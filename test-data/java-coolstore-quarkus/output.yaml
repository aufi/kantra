name: azure/springboot
description: Recommend OpenFeign instead of Feign.
violations: []
tags: null
name: camel3
description: Rules for changes between Camel 3.0 and Camel 4.0
violations: []
tags: null
name: camel3/camel2
description: Rules for changes in XML file (e.g. pom.xml) to run on Apache Camel 3
violations: []
tags: null
name: cloud-readiness
description: This ruleset detects logging configurations that may be problematic when migrating an application to a cloud environment.
violations:
  localhost-http-00001:
    description: Local HTTP Calls
    category: mandatory
    labels:
      - konveyor.io/source
      - konveyor.io/target=cloud-readiness
      - localhost
    incidents:
      - uri: file:///opt/input/source/src/main/resources/application.properties
        message: The app is trying to access local resource by HTTP, please try to migrate the resource to cloud
        codeSnip: "  1  # switch http port so it doesnt conflict with Kai (8080)\n  2  #%dev.quarkus.http.port=8888\n  3  \n  4  # datasource config\n  5  quarkus.datasource.db-kind=postgresql\n  6  quarkus.hibernate-orm.database.generation=none\n  7  quarkus.hibernate-orm.log.format-sql=true\n  8  \n  9  #rest client\n 10  quarkus.rest-client.shipping-service-api.url=http://localhost:8080/services\n 11  \n 12  #production profile\n 13  %prod.quarkus.datasource.username=quarkus\n 14  %prod.quarkus.datasource.password=quarkus\n 15  %prod.quarkus.datasource.jdbc.url=jdbc:postgresql://postgres:5432/coolstore\n 16  \n 17  #openshift deployment\n 18  #quarkus.kubernetes-client.trust-certs=true\n 19  #quarkus.openshift.route.expose=true\n 20  \n 21  #kubernetes deployment\n 22  quarkus.kubernetes.image-pull-policy=ifNotPresent \n 23  quarkus.kubernetes.service-type=load-balancer\n"
        lineNumber: 10
        variables:
          matchingText: http://localhost:8080/services
    effort: 7
tags: null
name: discovery-rules
tags:
  - EJB XML
  - Java Source
  - License=Apache License 2.0
  - License=GNU GPL
  - Maven XML
  - Properties
insights:
  discover-java-files:
    description: Java source files
    labels:
      - discovery
      - konveyor.io/include=always
      - konveyor.io/target=discovery
      - tag=Java Source
    incidents:
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/model/CatalogItemEntity.java
        message: ""
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/model/InventoryEntity.java
        message: ""
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/model/Order.java
        message: ""
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/model/OrderItem.java
        message: ""
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/model/Product.java
        message: ""
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/model/Promotion.java
        message: ""
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/model/ShoppingCart.java
        message: ""
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/model/ShoppingCartItem.java
        message: ""
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/CartEndpoint.java
        message: ""
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/OrderEndpoint.java
        message: ""
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/ProductEndpoint.java
        message: ""
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/RestApplication.java
        message: ""
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/client/ShippingServiceClient.java
        message: ""
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/service/CatalogService.java
        message: ""
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/service/InventoryNotificationMDB.java
        message: ""
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/service/OrderService.java
        message: ""
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/service/OrderServiceMDB.java
        message: ""
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/service/ProductService.java
        message: ""
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/service/PromoService.java
        message: ""
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/service/ShippingService.java
        message: ""
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/service/ShoppingCartOrderProcessor.java
        message: ""
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/service/ShoppingCartService.java
        message: ""
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/utils/DataBaseMigrationStartup.java
        message: ""
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/utils/Producers.java
        message: ""
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/utils/Transformers.java
        message: ""
  discover-license:
    description: Discover project license
    labels:
      - discovery
      - konveyor.io/include=always
      - konveyor.io/target=discovery
      - tag=License=Apache License 2.0
      - tag=License=GNU GPL
    incidents:
      - uri: file:///opt/input/source/src/main/resources/META-INF/resources/bower_components/angular-patternfly/LICENSE.txt
        message: ""
        codeSnip: "  1  Modifications to Bootstrap are copyright 2013 Red Hat, Inc. and licensed\n  2  under the Apache License 2.0.\n  3  \n  4  \n  5                             Version 2.0, January 2004\n  6                          http://www.apache.org/licenses/\n  7  \n  8     TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n  9  \n 10     1. Definitions.\n 11  \n 12        \"License\" shall mean the terms and conditions for use, reproduction,\n 13        and distribution as defined by Sections 1 through 9 of this document.\n 14  \n 15        \"Licensor\" shall mean the copyright owner or entity authorized by\n 16        the copyright owner that is granting the License.\n 17  \n 18        \"Legal Entity\" shall mean the union of the acting entity and all\n 19        other entities that control, are controlled by, or are under common\n 20        control with that entity. For the purposes of this definition,\n 21        \"control\" means (i) the power, direct or indirect, to cause the\n 22        direction or management of such entity, whether by contract or\n 23        otherwise, or (ii) ownership of fifty percent (50%) or more of the\n 24        outstanding shares, or (iii) beneficial ownership of such entity.\n 25  \n 26        \"You\" (or \"Your\") shall mean an individual or Legal Entity\n 27        exercising permissions granted by this License.\n 28  \n 29        \"Source\" form shall mean the preferred form for making modifications,\n 30        including but not limited to software source code, documentation\n 31        source, and configuration files.\n 32  \n 33        \"Object\" form shall mean any form resulting from mechanical\n 34        transformation or translation of a Source form, including but\n 35        not limited to compiled object code, generated documentation,\n 36        and conversions to other media types.\n 37  \n 38        \"Work\" shall mean the work of authorship, whether in Source or\n 39        Object form, made available under the License, as indicated by a\n 40        copyright notice that is included in or attached to the work\n 41        (an example is provided in the Appendix below).\n 42  \n 43        \"Derivative Works\" shall mean any work, whether in Source or Object\n 44        form, that is based on (or derived from) the Work and for which the\n 45        editorial revisions, annotations, elaborations, or other modifications\n 46        represent, as a whole, an original work of authorship. For the purposes\n 47        of this License, Derivative Works shall not include works that remain\n 48        separable from, or merely link (or bind by name) to the interfaces of,\n 49        the Work and Derivative Works thereof.\n 50  \n 51        \"Contribution\" shall mean any work of authorship, including\n 52        the original version of the Work and any modifications or additions\n 53        to that Work or Derivative Works thereof, that is intentionally\n 54        submitted to Licensor for inclusion in the Work by the copyright owner\n 55        or by an individual or Legal Entity authorized to submit on behalf of\n 56        the copyright owner. For the purposes of this definition, \"submitted\"\n 57        means any form of electronic, verbal, or written communication sent\n 58        to the Licensor or its representatives, including but not limited to\n 59        communication on electronic mailing lists, source code control systems,\n 60        and issue tracking systems that are managed by, or on behalf of, the\n 61        Licensor for the purpose of discussing and improving the Work, but\n 62        excluding communication that is conspicuously marked or otherwise\n 63        designated in writing by the copyright owner as \"Not a Contribution.\"\n 64  \n 65        \"Contributor\" shall mean Licensor and any individual or Legal Entity\n 66        on behalf of whom a Contribution has been received by Licensor and\n 67        subsequently incorporated within the Work.\n 68  \n 69     2. Grant of Copyright License. Subject to the terms and conditions of\n 70        this License, each Contributor hereby grants to You a perpetual,\n 71        worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n 72        copyright license to reproduce, prepare Derivative Works of,\n 73        publicly display, publicly perform, sublicense, and distribute the\n 74        Work and such Derivative Works in Source or Object form.\n 75  \n 76     3. Grant of Patent License. Subject to the terms and conditions of\n 77        this License, each Contributor hereby grants to You a perpetual,\n 78        worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n 79        (except as stated in this section) patent license to make, have made,\n 80        use, offer to sell, sell, import, and otherwise transfer the Work,\n 81        where such license applies only to those patent claims licensable\n 82        by such Contributor that are necessarily infringed by their\n 83        Contribution(s) alone or by combination of their Contribution(s)\n 84        with the Work to which such Contribution(s) was submitted. If You\n 85        institute patent litigation against any entity (including a\n 86        cross-claim or counterclaim in a lawsuit) alleging that the Work\n 87        or a Contribution incorporated within the Work constitutes direct\n 88        or contributory patent infringement, then any patent licenses\n 89        granted to You under this License for that Work shall terminate\n 90        as of the date such litigation is filed.\n 91  \n 92     4. Redistribution. You may reproduce and distribute copies of the\n 93        Work or Derivative Works thereof in any medium, with or without\n 94        modifications, and in Source or Object form, provided that You\n 95        meet the following conditions:\n 96  \n 97        (a) You must give any other recipients of the Work or\n 98            Derivative Works a copy of this License; and\n 99  \n100        (b) You must cause any modified files to carry prominent notices\n101            stating that You changed the files; and\n102  \n103        (c) You must retain, in the Source form of any Derivative Works"
        lineNumber: 2
        variables:
          matchingText: Apache License 2.0
      - uri: file:///opt/input/source/src/main/resources/META-INF/resources/bower_components/isotope/README.mdown
        message: ""
        codeSnip: "  1  # Isotope\n  2  \n  3  _Filter & sort magical layouts_\n  4  \n  5  See [isotope.metafizzy.co](http://isotope.metafizzy.co) for complete docs and demos.\n  6  \n  7  ## Install\n  8  \n  9  ### Download\n 10  \n 11  + [isotope.pkgd.js](https://github.com/metafizzy/isotope/raw/master/dist/isotope.pkgd.js) un-minified, or\n 12  + [isotope.pkgd.min.js](https://github.com/metafizzy/isotope/raw/master/dist/isotope.pkgd.min.js) minified\n 13  \n 14  ### CDN\n 15  \n 16  Link directly to [Isotope files on cdnjs](https://cdnjs.com/libraries/jquery.isotope).\n 17  \n 18  ``` html\n 19  <script src=\"//cdnjs.cloudflare.com/ajax/libs/jquery.isotope/2.2.1/isotope.pkgd.js\"></script>\n 20  <!-- or -->\n 21  <script src=\"//cdnjs.cloudflare.com/ajax/libs/jquery.isotope/2.2.1/isotope.pkgd.min.js\"></script>\n 22  ```\n 23  \n 24  ### Package managers\n 25  \n 26  Bower: `bower install isotope --save`\n 27  \n 28  npm: `npm install isotope-layout --save`\n 29  \n 30  ## License\n 31  \n 32  ### Commerical license\n 33  \n 34  If you want to use Isotope to develop commercial sites, themes, projects, and applications, the Commercial license is the appropriate license. With this option, your source code is kept proprietary. Purchase a Isotope Commercial License at [isotope.metafizzy.co](http://isotope.metafizzy.co/#commerical-license)\n 35  \n 36  ### Open source license\n 37  \n 38  If you are creating an open source application under a license compatible with the [GNU GPL license v3](https://www.gnu.org/licenses/gpl-3.0.html), you may use Isotope under the terms of the GPLv3.\n 39  \n 40  [Read more about Isotope's license](http://isotope.metafizzy.co/license.html).\n 41  \n 42  ## Initialize\n 43  \n 44  With jQuery\n 45  \n 46  ``` js\n 47  $('.grid').isotope({\n 48    // options...\n 49    itemSelector: '.grid-item',\n 50    masonry: {\n 51      columnWidth: 200\n 52    }\n 53  });\n 54  ```\n 55  \n 56  With vanilla JavaScript\n 57  \n 58  ``` js\n 59  // vanilla JS\n 60  var grid = document.querySelector('.grid');\n 61  var iso = new Isotope( grid, {\n 62    // options...\n 63    itemSelector: '.grid-item',\n 64    masonry: {\n 65      columnWidth: 200\n 66    }\n 67  });\n 68  ```\n 69  \n 70  With HTML\n 71  \n 72  Add a class of `js-isotope` to your element. Options can be set in JSON in `data-isotope-options`.\n 73  \n 74  ``` html\n 75  <div class=\"grid js-isotope\"\n 76    data-isotope-options='{ \"itemSelector\": \".grid-item\", \"masonry\": { \"columnWidth\": 200 } }'>\n 77    <div class=\"grid-item\"></div>\n 78    <div class=\"grid-item\"></div>\n 79    ...\n 80  </div>\n 81  ```\n 82  \n 83  ## Support\n 84  \n 85  [CodersClan has a dedicated support forum for Isotope](https://www.codersclan.net/?repo_id=1), where you can get personal support from experienced developers.\n 86  \n 87  #### [Get support on CodersClan](https://www.codersclan.net/?repo_id=1)\n 88  \n 89  * * *\n 90  \n 91  By [Metafizzy](http://metafizzy.co)\n"
        lineNumber: 38
        variables:
          matchingText: GNU GPL
      - uri: file:///opt/input/source/src/main/resources/META-INF/resources/bower_components/patternfly/LICENSE.txt
        message: ""
        codeSnip: "  1  Modifications to Bootstrap are copyright 2013 Red Hat, Inc. and licensed\n  2  under the Apache License 2.0.\n  3  \n  4  \n  5                             Version 2.0, January 2004\n  6                          http://www.apache.org/licenses/\n  7  \n  8     TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n  9  \n 10     1. Definitions.\n 11  \n 12        \"License\" shall mean the terms and conditions for use, reproduction,\n 13        and distribution as defined by Sections 1 through 9 of this document.\n 14  \n 15        \"Licensor\" shall mean the copyright owner or entity authorized by\n 16        the copyright owner that is granting the License.\n 17  \n 18        \"Legal Entity\" shall mean the union of the acting entity and all\n 19        other entities that control, are controlled by, or are under common\n 20        control with that entity. For the purposes of this definition,\n 21        \"control\" means (i) the power, direct or indirect, to cause the\n 22        direction or management of such entity, whether by contract or\n 23        otherwise, or (ii) ownership of fifty percent (50%) or more of the\n 24        outstanding shares, or (iii) beneficial ownership of such entity.\n 25  \n 26        \"You\" (or \"Your\") shall mean an individual or Legal Entity\n 27        exercising permissions granted by this License.\n 28  \n 29        \"Source\" form shall mean the preferred form for making modifications,\n 30        including but not limited to software source code, documentation\n 31        source, and configuration files.\n 32  \n 33        \"Object\" form shall mean any form resulting from mechanical\n 34        transformation or translation of a Source form, including but\n 35        not limited to compiled object code, generated documentation,\n 36        and conversions to other media types.\n 37  \n 38        \"Work\" shall mean the work of authorship, whether in Source or\n 39        Object form, made available under the License, as indicated by a\n 40        copyright notice that is included in or attached to the work\n 41        (an example is provided in the Appendix below).\n 42  \n 43        \"Derivative Works\" shall mean any work, whether in Source or Object\n 44        form, that is based on (or derived from) the Work and for which the\n 45        editorial revisions, annotations, elaborations, or other modifications\n 46        represent, as a whole, an original work of authorship. For the purposes\n 47        of this License, Derivative Works shall not include works that remain\n 48        separable from, or merely link (or bind by name) to the interfaces of,\n 49        the Work and Derivative Works thereof.\n 50  \n 51        \"Contribution\" shall mean any work of authorship, including\n 52        the original version of the Work and any modifications or additions\n 53        to that Work or Derivative Works thereof, that is intentionally\n 54        submitted to Licensor for inclusion in the Work by the copyright owner\n 55        or by an individual or Legal Entity authorized to submit on behalf of\n 56        the copyright owner. For the purposes of this definition, \"submitted\"\n 57        means any form of electronic, verbal, or written communication sent\n 58        to the Licensor or its representatives, including but not limited to\n 59        communication on electronic mailing lists, source code control systems,\n 60        and issue tracking systems that are managed by, or on behalf of, the\n 61        Licensor for the purpose of discussing and improving the Work, but\n 62        excluding communication that is conspicuously marked or otherwise\n 63        designated in writing by the copyright owner as \"Not a Contribution.\"\n 64  \n 65        \"Contributor\" shall mean Licensor and any individual or Legal Entity\n 66        on behalf of whom a Contribution has been received by Licensor and\n 67        subsequently incorporated within the Work.\n 68  \n 69     2. Grant of Copyright License. Subject to the terms and conditions of\n 70        this License, each Contributor hereby grants to You a perpetual,\n 71        worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n 72        copyright license to reproduce, prepare Derivative Works of,\n 73        publicly display, publicly perform, sublicense, and distribute the\n 74        Work and such Derivative Works in Source or Object form.\n 75  \n 76     3. Grant of Patent License. Subject to the terms and conditions of\n 77        this License, each Contributor hereby grants to You a perpetual,\n 78        worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n 79        (except as stated in this section) patent license to make, have made,\n 80        use, offer to sell, sell, import, and otherwise transfer the Work,\n 81        where such license applies only to those patent claims licensable\n 82        by such Contributor that are necessarily infringed by their\n 83        Contribution(s) alone or by combination of their Contribution(s)\n 84        with the Work to which such Contribution(s) was submitted. If You\n 85        institute patent litigation against any entity (including a\n 86        cross-claim or counterclaim in a lawsuit) alleging that the Work\n 87        or a Contribution incorporated within the Work constitutes direct\n 88        or contributory patent infringement, then any patent licenses\n 89        granted to You under this License for that Work shall terminate\n 90        as of the date such litigation is filed.\n 91  \n 92     4. Redistribution. You may reproduce and distribute copies of the\n 93        Work or Derivative Works thereof in any medium, with or without\n 94        modifications, and in Source or Object form, provided that You\n 95        meet the following conditions:\n 96  \n 97        (a) You must give any other recipients of the Work or\n 98            Derivative Works a copy of this License; and\n 99  \n100        (b) You must cause any modified files to carry prominent notices\n101            stating that You changed the files; and\n102  \n103        (c) You must retain, in the Source form of any Derivative Works"
        lineNumber: 2
        variables:
          matchingText: Apache License 2.0
      - uri: file:///opt/input/source/src/main/resources/META-INF/resources/bower_components/patternfly/README.md
        message: ""
        codeSnip: "105  \n106  A local development server can be quickly fired up by using the Gruntjs server task:\n107  \n108      grunt server\n109  \n110  This local static asset server (i.e., [http://localhost:9000](http://localhost:9000)) has the advantage of having livereload integration. Thus, if you start the Gruntjs server, any changes you make to `.html` or `.less` files will be automatically reloaded into your browser and the changes reflected almost immediately. This has the obvious benefit of not having to refresh your browser and still be able to see the changes as you add or remove them from your development files.  Additionally, any changes made to Jekyll source files (`tests\\pages/`) will trigger a Jekyll build.\n111  \n112  ### Coding Style\n113  \n114  See [http://codeguide.patternfly.org/](http://codeguide.patternfly.org/).\n115  \n116  ## Build\n117  \n118  ### CSS\n119  \n120  In development, styling is written and managed through multiple lesscss files. In order to generate a CSS file of all styling, run the build Gruntjs task:\n121  \n122      grunt build\n123  \n124  This task will compile and minify the lesscss files into CSS files located at `dist/css/patternfly.min.css` and `dist/css/patternfly-additional.min.css`.\n125  \n126  ### PatternFlyIcons Font\n127  \n128  PatternFlyIcons font is generated using [IcoMoon](http://icomoon.io/app). Go to [manage projects](https://icomoon.io/app/#/projects) and import the project `PatternFlyIcons-webfont.json`. Load it and update as necessary. When finished, return to manage projects, and download the updated `PatternFlyIcons-webfont.json` file. Also generate the fonts. Please commit the updated `PatternFlyIcons-webfont.json` file, the updated font files and supporting LESS/CSS changes.\n129  For detailed instructions, please see our [PatternFly Icon Guide](PFICONS.md)\n130  \n131  ## Tests\n132  \n133  The `tests/` directory contains HTML pages with component and pattern examples in order to facilitate development.  Please consult the official documentation (see below) for full details on how to use PatternFly.  The latest PatternFly test directory examples can be seen at [https://rawgit.com/patternfly/patternfly/master-dist/dist/tests/](https://rawgit.com/patternfly/patternfly/master-dist/dist/tests/).  \n134  \n135  If you are developing on PatternFly and would like to provide a link to a test directory from your fork, TravisCI can be configured to create a copy of your branch with the dist files generated for you.  No code changes are necessary to enable this, all that is needed is to login to [TravisCI](https://travis-ci.org/) and configure it to point at your PatternFly fork.  The first three steps at their [Getting Started page](https://docs.travis-ci.com/user/for-beginners) provide instructions on how to do this.  You will also need to add an AUTH_TOKEN variable to Travis generated in your GitHub account to allow Travis to connect to your fork.  \n136  \n137  The HTML pages in `dist/tests` are generated using Jekyll.  Do *not* edit these files directly.  See `tests/pages` to change these files.\n138  \n139  ### Unit Testing\n140  Unit tests are written for [Karma test server] (https://karma-runner.github.io/1.0/index.html) with [Jasmine](http://jasmine.github.io/)\n141  \n142  ```\n143  grunt karma\n144  ```\n145  ## Release\n146  \n147  PatternFly is released through the Bower and npm.\n148  \n149  To release a new version version of PatternFly, edit `bower.json` and `package.json` accordingly.\n150  \n151  Update the version listed in `bower.json` by editing the file and changing the line:\n152  \n153  ```\n154  \"version\": \"<new_version>\"\n155  ```\n156  \n157  Update the version listed in `package.json` by editing the file and changing the line:\n158  \n159  ```\n160  \"version\": \"<new_version>\"\n161  ```\n162  \n163  Commit the version bump:\n164  \n165  ```\n166  git commit -a -m \"Version bump to <new_version>\"\n167  ```\n168  \n169  Tag and push upstream (assuming you have commit access):\n170  \n171  ```\n172  git tag <new_version>\n173  git push && git push --tags\n174  ```\n175  \n176  The Bower package manager determines available versions and installs based upon git tags, so the new version will now be automatically available via Bower.\n177  \n178  To publish a new version to npm, execute:\n179  \n180  ```\n181  npm publish\n182  ```\n183  \n184  ## Documentation\n185  \n186  See [https://www.patternfly.org](https://www.patternfly.org) and [http://getbootstrap.com/](http://getbootstrap.com/).  \n187  \n188  ### Browser and Device Support\n189  \n190  Since PatternFly is based on Bootstrap, PatternFly supports [the same browsers as Bootstrap](http://getbootstrap.com/getting-started/#support) **excluding Internet Explorer 8**, plus the latest version of [Firefox for Linux](https://support.mozilla.org/en-US/kb/install-firefox-linux).\n191  \n192  *Important:*  starting with the v2.0.0 release, **PatternFly no longer supports Internet Explorer 8**.\n193  \n194  ### Product Backlog\n195  \n196  See [https://patternfly.atlassian.net/secure/RapidBoard.jspa?projectKey=PTNFLY&rapidView=4&view=planning](https://patternfly.atlassian.net/secure/RapidBoard.jspa?projectKey=PTNFLY&rapidView=4&view=planning).\n197  \n198  ### Bug List\n199  \n200  Official tracking of bugs occurs in Jira.  See https://patternfly.atlassian.net/issues/?filter=10300\n201  \n202  ## License\n203  \n204  Modifications to Bootstrap are copyright 2013 Red Hat, Inc. and licensed under the [Apache License 2.0](http://www.apache.org/licenses/LICENSE-2.0.html).\n"
        lineNumber: 204
        variables:
          matchingText: Apache License 2.0
  discover-maven-xml:
    description: Maven XML file
    labels:
      - discovery
      - konveyor.io/include=always
      - konveyor.io/target=discovery
      - tag=Maven XML
    incidents:
      - uri: file:///opt/input/source/pom.xml
        message: ""
  discover-properties-file:
    description: Properties file
    labels:
      - discovery
      - konveyor.io/include=always
      - konveyor.io/target=discovery
      - tag=Properties
    incidents:
      - uri: file:///opt/input/source/src/main/resources/application.properties
        message: ""
  windup-discover-ejb-configuration:
    description: EJB XML Configuration
    labels:
      - discovery
      - konveyor.io/include=always
      - konveyor.io/target=discovery
      - tag=EJB XML
    incidents:
      - uri: file:///opt/input/source/pom.xml
        message: ""
        codeSnip: |2-
            1  <?xml version="1.0" encoding="UTF-8"?>
            2  <project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0"
            3      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            4    <modelVersion>4.0.0</modelVersion>
            5    <groupId>com.redhat.coolstore</groupId>
            6    <artifactId>coolstore</artifactId>
            7    <version>1.0.0-SNAPSHOT</version>
            8    <name>coolstore-quarkus</name>
            9    <properties>
           10      <compiler-plugin.version>3.13.0</compiler-plugin.version>
           11      <maven.compiler.release>21</maven.compiler.release>
           12      <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
           13      <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
           14      <quarkus.platform.artifact-id>quarkus-bom</quarkus.platform.artifact-id>
           15      <quarkus.platform.group-id>io.quarkus.platform</quarkus.platform.group-id>
           16      <quarkus.platform.version>3.12.3</quarkus.platform.version>
           17      <skipITs>true</skipITs>
           18      <surefire-plugin.version>3.2.5</surefire-plugin.version>
           19    </properties>
           20    <dependencyManagement>
           21      <dependencies>
           22        <dependency>
           23          <groupId>io.quarkus.platform</groupId>
           24          <artifactId>quarkus-bom</artifactId>
           25          <version>${quarkus.platform.version}</version>
           26          <type>pom</type>
           27          <scope>import</scope>
           28        </dependency>
           29      </dependencies>
           30    </dependencyManagement>
           31    <dependencies>
           32      <dependency>
           33        <groupId>io.quarkus</groupId>
           34        <artifactId>quarkus-arc</artifactId>
           35      </dependency>
           36      <dependency>
           37        <groupId>io.quarkus</groupId>
           38        <artifactId>quarkus-resteasy</artifactId>
           39      </dependency>
           40      <dependency>
           41        <groupId>io.quarkus</groupId>
           42        <artifactId>quarkus-resteasy-jackson</artifactId>
           43      </dependency>
           44      <dependency>
           45        <groupId>io.quarkus</groupId>
           46        <artifactId>quarkus-resteasy-client</artifactId>
           47      </dependency>
           48      <dependency>
           49        <groupId>io.quarkus</groupId>
           50        <artifactId>quarkus-resteasy-client-jackson</artifactId>
           51      </dependency>
           52      <dependency>
           53        <groupId>io.quarkus</groupId>
           54        <artifactId>quarkus-hibernate-orm</artifactId>
           55      </dependency>
           56      <dependency>
           57        <groupId>io.quarkus</groupId>
           58        <artifactId>quarkus-jdbc-postgresql</artifactId>
           59      </dependency>
           60      <dependency>
           61        <groupId>io.quarkus</groupId>
           62        <artifactId>quarkus-flyway</artifactId>
           63      </dependency>
           64      <dependency>
           65        <groupId>org.flywaydb</groupId>
           66        <artifactId>flyway-database-postgresql</artifactId>
           67        <version>10.12.0</version>
           68        <scope>runtime</scope>
           69      </dependency>
           70      <dependency>
           71        <groupId>io.quarkus</groupId>
           72        <artifactId>quarkus-undertow</artifactId>
           73      </dependency>
           74      <dependency>
           75        <groupId>io.quarkus</groupId>
           76        <artifactId>quarkus-messaging</artifactId>
           77      </dependency>
           78      <dependency>
           79        <groupId>io.quarkus</groupId>
           80        <artifactId>quarkus-container-image-docker</artifactId>
           81      </dependency>
           82      <dependency>
           83        <groupId>io.quarkus</groupId>
           84        <artifactId>quarkus-minikube</artifactId>
           85      </dependency>
           86    </dependencies>
           87     <build>
           88          <plugins>
           89              <plugin>
           90                  <groupId>${quarkus.platform.group-id}</groupId>
           91                  <artifactId>quarkus-maven-plugin</artifactId>
           92                  <version>${quarkus.platform.version}</version>
           93                  <extensions>true</extensions>
           94                  <executions>
           95                      <execution>
           96                          <goals>
           97                              <goal>build</goal>
           98                              <goal>generate-code</goal>
           99                              <goal>generate-code-tests</goal>
          100                              <goal>native-image-agent</goal>
          101                          </goals>
          102                      </execution>
          103                  </executions>
          104              </plugin>
          105              <plugin>
        lineNumber: 4
        variables:
          data: ""
          innerText: "\n\n  4.0.0\n  com.redhat.coolstore\n  coolstore\n  1.0.0-SNAPSHOT\n  coolstore-quarkus\n  \n    3.13.0\n    21\n    UTF-8\n    UTF-8\n    quarkus-bom\n    io.quarkus.platform\n    3.12.3\n    true\n    3.2.5\n  \n  \n    \n      \n        io.quarkus.platform\n        quarkus-bom\n        ${quarkus.platform.version}\n        pom\n        import\n      \n    \n  \n  \n    \n      io.quarkus\n      quarkus-arc\n    \n    \n      io.quarkus\n      quarkus-resteasy\n    \n    \n      io.quarkus\n      quarkus-resteasy-jackson\n    \n    \n      io.quarkus\n      quarkus-resteasy-client\n    \n    \n      io.quarkus\n      quarkus-resteasy-client-jackson\n    \n    \n      io.quarkus\n      quarkus-hibernate-orm\n    \n    \n      io.quarkus\n      quarkus-jdbc-postgresql\n    \n    \n      io.quarkus\n      quarkus-flyway\n    \n    \n      org.flywaydb\n      flyway-database-postgresql\n      10.12.0\n      runtime\n    \n    \n      io.quarkus\n      quarkus-undertow\n    \n    \n      io.quarkus\n      quarkus-messaging\n    \n    \n      io.quarkus\n      quarkus-container-image-docker\n    \n    \n      io.quarkus\n      quarkus-minikube\n    \n  \n   \n        \n            \n                ${quarkus.platform.group-id}\n                quarkus-maven-plugin\n                ${quarkus.platform.version}\n                true\n                \n                    \n                        \n                            build\n                            generate-code\n                            generate-code-tests\n                            native-image-agent\n                        \n                    \n                \n            \n            \n                maven-compiler-plugin\n                ${compiler-plugin.version}\n                \n                    \n                        -parameters\n                    \n                \n            \n            \n                maven-surefire-plugin\n                ${surefire-plugin.version}\n                \n                    \n                        org.jboss.logmanager.LogManager\n                        ${maven.home}\n                    \n                \n            \n            \n                maven-failsafe-plugin\n                ${surefire-plugin.version}\n                \n                    \n                        \n                            integration-test\n                            verify\n                        \n                    \n                \n                \n                    \n                        ${project.build.directory}/${project.build.finalName}-runner\n                        org.jboss.logmanager.LogManager\n                        ${maven.home}\n                    \n                \n            \n        \n    \n\n    \n        \n            native\n            \n                \n                    native\n                \n            \n            \n                false\n                true\n            \n        \n    \n\n"
          matchingXML: <?xml version="1.0" encoding="UTF-8"?><project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><modelVersion>4.0.0</modelVersion><groupId>com.redhat.coolstore</groupId><artifactId>coolstore</artifactId><version>1.0.0-SNAPSHOT</version><name>coolstore-quarkus</name><properties><compiler-plugin.version>3.13.0</compiler-plugin.version><maven.compiler.release>21</maven.compiler.release><project.build.sourceEncoding>UTF-8</project.build.sourceEncoding><project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding><quarkus.platform.artifact-id>quarkus-bom</quarkus.platform.artifact-id><quarkus.platform.group-id>io.quarkus.platform</quarkus.platform.group-id><quarkus.platform.version>3.12.3</quarkus.platform.version><skipITs>true</skipITs><surefire-plugin.version>3.2.5</surefire-plugin.version></properties><dependencyManagement><dependencies><dependency><groupId>io.quarkus.platform</groupId><artifactId>quarkus-bom</artifactId><version>${quarkus.platform.version}</version><type>pom</type><scope>import</scope></dependency></dependencies></dependencyManagement><dependencies><dependency><groupId>io.quarkus</groupId><artifactId>quarkus-arc</artifactId></dependency><dependency><groupId>io.quarkus</groupId><artifactId>quarkus-resteasy</artifactId></dependency><dependency><groupId>io.quarkus</groupId><artifactId>quarkus-resteasy-jackson</artifactId></dependency><dependency><groupId>io.quarkus</groupId><artifactId>quarkus-resteasy-client</artifactId></dependency><dependency><groupId>io.quarkus</groupId><artifactId>quarkus-resteasy-client-jackson</artifactId></dependency><dependency><groupId>io.quarkus</groupId><artifactId>quarkus-hibernate-orm</artifactId></dependency><dependency><groupId>io.quarkus</groupId><artifactId>quarkus-jdbc-postgresql</artifactId></dependency><dependency><groupId>io.quarkus</groupId><artifactId>quarkus-flyway</artifactId></dependency><dependency><groupId>org.flywaydb</groupId><artifactId>flyway-database-postgresql</artifactId><version>10.12.0</version><scope>runtime</scope></dependency><dependency><groupId>io.quarkus</groupId><artifactId>quarkus-undertow</artifactId></dependency><dependency><groupId>io.quarkus</groupId><artifactId>quarkus-messaging</artifactId></dependency><dependency><groupId>io.quarkus</groupId><artifactId>quarkus-container-image-docker</artifactId></dependency><dependency><groupId>io.quarkus</groupId><artifactId>quarkus-minikube</artifactId></dependency></dependencies><build><plugins><plugin><groupId>${quarkus.platform.group-id}</groupId><artifactId>quarkus-maven-plugin</artifactId><version>${quarkus.platform.version}</version><extensions>true</extensions><executions><execution><goals><goal>build</goal><goal>generate-code</goal><goal>generate-code-tests</goal><goal>native-image-agent</goal></goals></execution></executions></plugin><plugin><artifactId>maven-compiler-plugin</artifactId><version>${compiler-plugin.version}</version><configuration><compilerArgs><arg>-parameters</arg></compilerArgs></configuration></plugin><plugin><artifactId>maven-surefire-plugin</artifactId><version>${surefire-plugin.version}</version><configuration><systemPropertyVariables><java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager><maven.home>${maven.home}</maven.home></systemPropertyVariables></configuration></plugin><plugin><artifactId>maven-failsafe-plugin</artifactId><version>${surefire-plugin.version}</version><executions><execution><goals><goal>integration-test</goal><goal>verify</goal></goals></execution></executions><configuration><systemPropertyVariables><native.image.path>${project.build.directory}/${project.build.finalName}-runner</native.image.path><java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager><maven.home>${maven.home}</maven.home></systemPropertyVariables></configuration></plugin></plugins></build><profiles><profile><id>native</id><activation><property><name>native</name></property></activation><properties><skipITs>false</skipITs><quarkus.native.enabled>true</quarkus.native.enabled></properties></profile></profiles></project>
      - uri: file:///opt/input/source/src/main/resources/META-INF/resources/bower_components/datatables-colreorder/docs/api/colReorder.order().xml
        message: ""
        codeSnip: "  1  <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n  2  <dt-api library=\"ColReorder\">\n  3  \t<name>colReorder.order()</name>\n  4  \t<summary>Get / set column order</summary>\n  5  \t<since>1.2.0</since>\n  6  \n  7  \t<type type=\"function\">\n  8  \t\t<signature>colReorder.order()</signature>\n  9  \t\t<description>\n 10  \t\t\tGet the current column order.\n 11  \t\t</description>\n 12  \t\t<returns type=\"array\">\n 13  \t\t\tReturns an array of column indexes. The column index given is the original column index, with its new position defined by the location in the returned array.\n 14  \t\t</returns>\n 15  \t</type>\n 16  \n 17  \t<type type=\"function\">\n 18  \t\t<signature>colReorder.order( order [, originalIndexes ] )</signature>\n 19  \t\t<description>\n 20  \t\t\tSet the column order.\n 21  \t\t</description>\n 22  \t\t<parameter name=\"order\" type=\"array\">\n 23  \t\t\tArray of column indexes that define where the columns should be placed after the reorder. \n 24  \n 25  \t\t\tPlease note that by default the column indexes given by this array are assumed to be the **current** column indexes. The optional second parameter can be used to indicate that they should actually be treated as the original indexes.\n 26  \n 27  \t\t\tPlease note that the column indexes in the array are _not_ the original column index, but rather than _current_ column index. i.e. `0` will always refer to the first column in the table, regardless of the table ordering.\n 28  \t\t</parameter>\n 29  \t\t<parameter name=\"originalIndexes\" type=\"boolean\" since=\"1.3.0\" default=\"false\">\n 30  \t\t\tThe order array defines the positions that columns should be shown through column indexes but these indexes can be one of:\n 31  \n 32  \t\t\t1. The **current** column index (i.e. even if column reordering has already happened)\n 33  \t\t\t2. The **original** column index (i.e. the original index of the column before ColReorder has done any reordering)\n 34  \n 35  \t\t\tSet to be `true` to indicate that the indexes passed in are the original indexes. `false` or `undefined` (default) will treat them as the original index.\n 36  \t\t</parameter>\n 37  \t\t<returns type=\"DataTables.Api\">\n 38  \t\t\tDataTables API instance for chaining\n 39  \t\t</returns>\n 40  \t</type>\n 41  \n 42  \t<description>\n 43  \t\tThis method provides the ability to get the current column order of a DataTable and also to set a new order.\n 44  \n 45  \t\tThe reorder triggered by this method is immediate and there is no requirement to redraw the table.\n 46  \t</description>\n 47  \n 48  \t<example title=\"Reverse the order of the columns in the table on a button click\"><![CDATA[\n 49  \n 50  var table = $('#example').DataTable( {\n 51  \tcolReorder: true\n 52  } );\n 53  \n 54  $('#reverse').click( function (e) {\n 55  \ttable.colReorder.order( [ 5, 4, 3, 2, 1, 0 ] );\n 56  } );\n 57  \n 58  ]]></example>\n 59  \n 60  \t<example title=\"Restore the original order, regardless of any ordering applied (by passing the second parameter as `true`)\"><![CDATA[\n 61  \n 62  var table = $('#example').DataTable( {\n 63  \tcolReorder: true\n 64  } );\n 65  \n 66  $('#reverse').click( function (e) {\n 67  \ttable.colReorder.order( [ 0, 1, 2, 3, 4, 5 ], true );\n 68  } );\n 69  \n 70  ]]></example>\n 71  \n 72  </dt-api>\n"
        lineNumber: 2
        variables:
          data: ""
          innerText: "\n\n\tcolReorder.order()\n\tGet / set column order\n\t1.2.0\n\n\t\n\t\tcolReorder.order()\n\t\t\n\t\t\tGet the current column order.\n\t\t\n\t\t\n\t\t\tReturns an array of column indexes. The column index given is the original column index, with its new position defined by the location in the returned array.\n\t\t\n\t\n\n\t\n\t\tcolReorder.order( order [, originalIndexes ] )\n\t\t\n\t\t\tSet the column order.\n\t\t\n\t\t\n\t\t\tArray of column indexes that define where the columns should be placed after the reorder. \n\n\t\t\tPlease note that by default the column indexes given by this array are assumed to be the **current** column indexes. The optional second parameter can be used to indicate that they should actually be treated as the original indexes.\n\n\t\t\tPlease note that the column indexes in the array are _not_ the original column index, but rather than _current_ column index. i.e. `0` will always refer to the first column in the table, regardless of the table ordering.\n\t\t\n\t\t\n\t\t\tThe order array defines the positions that columns should be shown through column indexes but these indexes can be one of:\n\n\t\t\t1. The **current** column index (i.e. even if column reordering has already happened)\n\t\t\t2. The **original** column index (i.e. the original index of the column before ColReorder has done any reordering)\n\n\t\t\tSet to be `true` to indicate that the indexes passed in are the original indexes. `false` or `undefined` (default) will treat them as the original index.\n\t\t\n\t\t\n\t\t\tDataTables API instance for chaining\n\t\t\n\t\n\n\t\n\t\tThis method provides the ability to get the current column order of a DataTable and also to set a new order.\n\n\t\tThe reorder triggered by this method is immediate and there is no requirement to redraw the table.\n\t\n\n\t\n\nvar table = $('#example').DataTable( {\n\tcolReorder: true\n} );\n\n$('#reverse').click( function (e) {\n\ttable.colReorder.order( [ 5, 4, 3, 2, 1, 0 ] );\n} );\n\n\n\n\t\n\nvar table = $('#example').DataTable( {\n\tcolReorder: true\n} );\n\n$('#reverse').click( function (e) {\n\ttable.colReorder.order( [ 0, 1, 2, 3, 4, 5 ], true );\n} );\n\n\n\n"
          matchingXML: "<?xml version=\"1.0\" encoding=\"UTF-8\"?><dt-api library=\"ColReorder\"><name>colReorder.order()</name><summary>Get / set column order</summary><since>1.2.0</since><type type=\"function\"><signature>colReorder.order()</signature><description>Get the current column order.</description><returns type=\"array\">Returns an array of column indexes. The column index given is the original column index, with its new position defined by the location in the returned array.</returns></type><type type=\"function\"><signature>colReorder.order( order [, originalIndexes ] )</signature><description>Set the column order.</description><parameter name=\"order\" type=\"array\">Array of column indexes that define where the columns should be placed after the reorder. \n\n\t\t\tPlease note that by default the column indexes given by this array are assumed to be the **current** column indexes. The optional second parameter can be used to indicate that they should actually be treated as the original indexes.\n\n\t\t\tPlease note that the column indexes in the array are _not_ the original column index, but rather than _current_ column index. i.e. `0` will always refer to the first column in the table, regardless of the table ordering.</parameter><parameter name=\"originalIndexes\" type=\"boolean\" since=\"1.3.0\" default=\"false\">The order array defines the positions that columns should be shown through column indexes but these indexes can be one of:\n\n\t\t\t1. The **current** column index (i.e. even if column reordering has already happened)\n\t\t\t2. The **original** column index (i.e. the original index of the column before ColReorder has done any reordering)\n\n\t\t\tSet to be `true` to indicate that the indexes passed in are the original indexes. `false` or `undefined` (default) will treat them as the original index.</parameter><returns type=\"DataTables.Api\">DataTables API instance for chaining</returns></type><description>This method provides the ability to get the current column order of a DataTable and also to set a new order.\n\n\t\tThe reorder triggered by this method is immediate and there is no requirement to redraw the table.</description><example title=\"Reverse the order of the columns in the table on a button click\"><![CDATA[\n\nvar table = $('#example').DataTable( {\n\tcolReorder: true\n} );\n\n$('#reverse').click( function (e) {\n\ttable.colReorder.order( [ 5, 4, 3, 2, 1, 0 ] );\n} );\n\n]]></example><example title=\"Restore the original order, regardless of any ordering applied (by passing the second parameter as `true`)\"><![CDATA[\n\nvar table = $('#example').DataTable( {\n\tcolReorder: true\n} );\n\n$('#reverse').click( function (e) {\n\ttable.colReorder.order( [ 0, 1, 2, 3, 4, 5 ], true );\n} );\n\n]]></example></dt-api>"
      - uri: file:///opt/input/source/src/main/resources/META-INF/resources/bower_components/datatables-colreorder/docs/api/colReorder.reset().xml
        message: ""
        codeSnip: "  1  <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n  2  <dt-api library=\"ColReorder\">\n  3  \t<name>colReorder.reset()</name>\n  4  \t<summary>Restore the loaded column order</summary>\n  5  \t<since>1.2.0</since>\n  6  \n  7  \t<type type=\"function\">\n  8  \t\t<signature>colReorder.reset()</signature>\n  9  \t\t<description>\n 10  \t\t\tRestore the column order that the columns were in when initially loaded.\n 11  \t\t</description>\n 12  \t\t<returns type=\"DataTables.Api\">DataTables API instance</returns>\n 13  \t</type>\n 14  \n 15  \t<description>\n 16  \t\tThis method provides the ability to restore the original order of the columns, as was defined in the HTML during the table's initialisation. This will undo any reordering changes that the end user or API has made prior to calling this method.\n 17  \n 18  \t\tThe reorder triggered by this method is immediate and there is no requirement to redraw the table.\n 19  \t</description>\n 20  \n 21  \t<example title=\"Restore column ordering on click of a button\"><![CDATA[\n 22  \n 23  var table = $('#example').DataTable( {\n 24  \tcolReorder: true\n 25  } );\n 26  \n 27  $('#reset').click( function (e) {\n 28  \ttable.colReorder.reset();\n 29  } );\n 30  \n 31  ]]></example>\n 32  \n 33  </dt-api>\n"
        lineNumber: 2
        variables:
          data: ""
          innerText: "\n\n\tcolReorder.reset()\n\tRestore the loaded column order\n\t1.2.0\n\n\t\n\t\tcolReorder.reset()\n\t\t\n\t\t\tRestore the column order that the columns were in when initially loaded.\n\t\t\n\t\tDataTables API instance\n\t\n\n\t\n\t\tThis method provides the ability to restore the original order of the columns, as was defined in the HTML during the table's initialisation. This will undo any reordering changes that the end user or API has made prior to calling this method.\n\n\t\tThe reorder triggered by this method is immediate and there is no requirement to redraw the table.\n\t\n\n\t\n\nvar table = $('#example').DataTable( {\n\tcolReorder: true\n} );\n\n$('#reset').click( function (e) {\n\ttable.colReorder.reset();\n} );\n\n\n\n"
          matchingXML: "<?xml version=\"1.0\" encoding=\"UTF-8\"?><dt-api library=\"ColReorder\"><name>colReorder.reset()</name><summary>Restore the loaded column order</summary><since>1.2.0</since><type type=\"function\"><signature>colReorder.reset()</signature><description>Restore the column order that the columns were in when initially loaded.</description><returns type=\"DataTables.Api\">DataTables API instance</returns></type><description>This method provides the ability to restore the original order of the columns, as was defined in the HTML during the table&#39;s initialisation. This will undo any reordering changes that the end user or API has made prior to calling this method.\n\n\t\tThe reorder triggered by this method is immediate and there is no requirement to redraw the table.</description><example title=\"Restore column ordering on click of a button\"><![CDATA[\n\nvar table = $('#example').DataTable( {\n\tcolReorder: true\n} );\n\n$('#reset').click( function (e) {\n\ttable.colReorder.reset();\n} );\n\n]]></example></dt-api>"
      - uri: file:///opt/input/source/src/main/resources/META-INF/resources/bower_components/datatables-colreorder/docs/api/colReorder.transpose().xml
        message: ""
        codeSnip: "  1  <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n  2  <dt-api library=\"ColReorder\">\n  3  \t<name>colReorder.transpose()</name>\n  4  \t<summary>Convert one or more column indexes to and from current and original indexes</summary>\n  5  \t<since>1.3.0</since>\n  6  \n  7  \t<type type=\"function\">\n  8  \t\t<signature>colReorder.transpose( idx [, direction ] )</signature>\n  9  \t\t<parameter name=\"idx\" type=\"integer|array\">\n 10  \t\t\tThe index, or array of indexes to transpose.\n 11  \t\t</parameter>\n 12  \t\t<parameter name=\"direction\" type=\"string\" default=\"toCurrent\">\n 13  \t\t\tSet what transposition is required. This can be one of:\n 14  \n 15  \t\t\t* `-string toCurrent` - the input value is an original index and you wish to know its current index\n 16  \t\t\t* `-string toOriginal` - the input value is the current index and you wish to know its original index\n 17  \t\t\t* `-string fromOriginal` - As `-string toCurrent`\n 18  \t\t\t* `-string toOriginal` - As `-string fromCurrent`.\n 19  \t\t</parameter>\n 20  \t\t<description>\n 21  \t\t\tGet one or more current column indexes form their original index.\n 22  \t\t</description>\n 23  \t\t<returns type=\"integer|array\">The transpose values</returns>\n 24  \t</type>\n 25  \n 26  \t<description>\n 27  \t\tColReorder will change the indexes of columns when columns are reordered and it can often be useful to convert between the original column index and the current column index. This method provides that ability.\n 28  \n 29  \t\tThis ability to transpose between current and original values can be really useful if you have a reference to a column (`dt-api column().index()`) and you want to ensure that your index refers to the correct column, regardless of ordering.\n 30  \n 31  \t\tFor example consider column index 0 is moved by the end user to index 5. You need to find out what its index is - this method provides that ability.\n 32  \n 33  \t\tNote that if ColReorder is not enabled on the target table this method can still be safely called - the input data will simply be returned (since no transposition is required).\n 34  \t</description>\n 35  \n 36  \t<example title=\"Get the current column position of the column that was in index 0 when the table was created\"><![CDATA[\n 37  \n 38  var table = $('#example').DataTable( {\n 39  \tcolReorder: true\n 40  } );\n 41  \n 42  $('#info').click( function (e) {\n 43  \talert( table.colReorder.transpose( 0 ) );\n 44  } );\n 45  \n 46  ]]></example>\n 47  \n 48  </dt-api>\n"
        lineNumber: 2
        variables:
          data: ""
          innerText: "\n\n\tcolReorder.transpose()\n\tConvert one or more column indexes to and from current and original indexes\n\t1.3.0\n\n\t\n\t\tcolReorder.transpose( idx [, direction ] )\n\t\t\n\t\t\tThe index, or array of indexes to transpose.\n\t\t\n\t\t\n\t\t\tSet what transposition is required. This can be one of:\n\n\t\t\t* `-string toCurrent` - the input value is an original index and you wish to know its current index\n\t\t\t* `-string toOriginal` - the input value is the current index and you wish to know its original index\n\t\t\t* `-string fromOriginal` - As `-string toCurrent`\n\t\t\t* `-string toOriginal` - As `-string fromCurrent`.\n\t\t\n\t\t\n\t\t\tGet one or more current column indexes form their original index.\n\t\t\n\t\tThe transpose values\n\t\n\n\t\n\t\tColReorder will change the indexes of columns when columns are reordered and it can often be useful to convert between the original column index and the current column index. This method provides that ability.\n\n\t\tThis ability to transpose between current and original values can be really useful if you have a reference to a column (`dt-api column().index()`) and you want to ensure that your index refers to the correct column, regardless of ordering.\n\n\t\tFor example consider column index 0 is moved by the end user to index 5. You need to find out what its index is - this method provides that ability.\n\n\t\tNote that if ColReorder is not enabled on the target table this method can still be safely called - the input data will simply be returned (since no transposition is required).\n\t\n\n\t\n\nvar table = $('#example').DataTable( {\n\tcolReorder: true\n} );\n\n$('#info').click( function (e) {\n\talert( table.colReorder.transpose( 0 ) );\n} );\n\n\n\n"
          matchingXML: "<?xml version=\"1.0\" encoding=\"UTF-8\"?><dt-api library=\"ColReorder\"><name>colReorder.transpose()</name><summary>Convert one or more column indexes to and from current and original indexes</summary><since>1.3.0</since><type type=\"function\"><signature>colReorder.transpose( idx [, direction ] )</signature><parameter name=\"idx\" type=\"integer|array\">The index, or array of indexes to transpose.</parameter><parameter name=\"direction\" type=\"string\" default=\"toCurrent\">Set what transposition is required. This can be one of:\n\n\t\t\t* `-string toCurrent` - the input value is an original index and you wish to know its current index\n\t\t\t* `-string toOriginal` - the input value is the current index and you wish to know its original index\n\t\t\t* `-string fromOriginal` - As `-string toCurrent`\n\t\t\t* `-string toOriginal` - As `-string fromCurrent`.</parameter><description>Get one or more current column indexes form their original index.</description><returns type=\"integer|array\">The transpose values</returns></type><description>ColReorder will change the indexes of columns when columns are reordered and it can often be useful to convert between the original column index and the current column index. This method provides that ability.\n\n\t\tThis ability to transpose between current and original values can be really useful if you have a reference to a column (`dt-api column().index()`) and you want to ensure that your index refers to the correct column, regardless of ordering.\n\n\t\tFor example consider column index 0 is moved by the end user to index 5. You need to find out what its index is - this method provides that ability.\n\n\t\tNote that if ColReorder is not enabled on the target table this method can still be safely called - the input data will simply be returned (since no transposition is required).</description><example title=\"Get the current column position of the column that was in index 0 when the table was created\"><![CDATA[\n\nvar table = $('#example').DataTable( {\n\tcolReorder: true\n} );\n\n$('#info').click( function (e) {\n\talert( table.colReorder.transpose( 0 ) );\n} );\n\n]]></example></dt-api>"
      - uri: file:///opt/input/source/src/main/resources/META-INF/resources/bower_components/datatables-colreorder/docs/event/column-reorder.xml
        message: ""
        codeSnip: "  1  <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n  2  <dt-event library=\"ColReorder\">\n  3  \t<name>column-reorder</name>\n  4  \t<summary>Columns have been reordered by the end user or API</summary>\n  5  \t<since>1.2.0</since>\n  6  \n  7  \t<type type=\"function\">\n  8  \t\t<signature>function( e, settings, details )</signature>\n  9  \t\t<parameter type=\"object\" name=\"e\">\n 10  \t\t\tjQuery event object\n 11  \t\t</parameter>\n 12  \t\t<parameter type=\"DataTable.Settings\" name=\"settings\">\n 13  \t\t\tDataTables settings object for the table that has been modified\n 14  \t\t</parameter>\n 15  \t\t<parameter type=\"object\" name=\"details\">\n 16  \t\t\tAn object that contains information about the reordered columns:\n 17  \n 18  \t\t\t* `-type integer` `from` - Column index that the column has been moved from\n 19  \t\t\t* `-type integer` `to` - Column index that the column has been moved to\n 20  \t\t\t* `-type array` `mapping` - Array of integers that define how the old column positions map to the new positions\n 21  \t\t\t* `-type boolean` `drop` - Indicate if this event is the result of a mouse drop (i.e. the user has finished moving the columns). This is useful to distinguish between a live reorder and the final state. Requires **ColReorder 1.2.1** or newer.\n 22  \t\t</parameter>\n 23  \t\t<scope>HTML table element</scope>\n 24  \t</type>\n 25  \n 26  \t<description>\n 27  \t\tWhen using ColReorder you may wish to know when a table has been reordered by an end user or through the API. This event provides that information.\n 28  \n 29  \t\tThis event is triggered when a column is reordered - if `cr-init colReorder.realtime` is enabled this can be during the column reordering drag.\n 30  \n 31  \t\tPlease note that, as with all DataTables emitted events, this event is triggered with the `dt` namespace. As such, to listen for this event, you must also use the `dt` namespace by simply appending `.dt` to your event name, or use the `dt-api on()` method to listen for the event which will automatically append this namespace.\n 32  \t</description>\n 33  \n 34  \t<example title=\"Add a class to the reordered column\"><![CDATA[\n 35  \n 36  var table = $('#example').DataTable( {\n 37  \tcolumnReorder: true\n 38  } );\n 39  \n 40  table.on( 'column-reorder', function ( e, settings, details ) {\n 41  \tvar headerCell = $( table.column( details.to ).header() );\n 42  \n 43  \theaderCell.addClass( 'reordered' );\n 44  \n 45  \tsetTimeout( function () {\n 46  \t\theaderCell.removeClass( 'reordered' );\n 47  \t}, 2000 );\n 48  } );\n 49  \n 50  ]]></example>\n 51  </dt-event>\n"
        lineNumber: 2
        variables:
          data: ""
          innerText: "\n\n\tcolumn-reorder\n\tColumns have been reordered by the end user or API\n\t1.2.0\n\n\t\n\t\tfunction( e, settings, details )\n\t\t\n\t\t\tjQuery event object\n\t\t\n\t\t\n\t\t\tDataTables settings object for the table that has been modified\n\t\t\n\t\t\n\t\t\tAn object that contains information about the reordered columns:\n\n\t\t\t* `-type integer` `from` - Column index that the column has been moved from\n\t\t\t* `-type integer` `to` - Column index that the column has been moved to\n\t\t\t* `-type array` `mapping` - Array of integers that define how the old column positions map to the new positions\n\t\t\t* `-type boolean` `drop` - Indicate if this event is the result of a mouse drop (i.e. the user has finished moving the columns). This is useful to distinguish between a live reorder and the final state. Requires **ColReorder 1.2.1** or newer.\n\t\t\n\t\tHTML table element\n\t\n\n\t\n\t\tWhen using ColReorder you may wish to know when a table has been reordered by an end user or through the API. This event provides that information.\n\n\t\tThis event is triggered when a column is reordered - if `cr-init colReorder.realtime` is enabled this can be during the column reordering drag.\n\n\t\tPlease note that, as with all DataTables emitted events, this event is triggered with the `dt` namespace. As such, to listen for this event, you must also use the `dt` namespace by simply appending `.dt` to your event name, or use the `dt-api on()` method to listen for the event which will automatically append this namespace.\n\t\n\n\t\n\nvar table = $('#example').DataTable( {\n\tcolumnReorder: true\n} );\n\ntable.on( 'column-reorder', function ( e, settings, details ) {\n\tvar headerCell = $( table.column( details.to ).header() );\n\n\theaderCell.addClass( 'reordered' );\n\n\tsetTimeout( function () {\n\t\theaderCell.removeClass( 'reordered' );\n\t}, 2000 );\n} );\n\n\n"
          matchingXML: "<?xml version=\"1.0\" encoding=\"UTF-8\"?><dt-event library=\"ColReorder\"><name>column-reorder</name><summary>Columns have been reordered by the end user or API</summary><since>1.2.0</since><type type=\"function\"><signature>function( e, settings, details )</signature><parameter type=\"object\" name=\"e\">jQuery event object</parameter><parameter type=\"DataTable.Settings\" name=\"settings\">DataTables settings object for the table that has been modified</parameter><parameter type=\"object\" name=\"details\">An object that contains information about the reordered columns:\n\n\t\t\t* `-type integer` `from` - Column index that the column has been moved from\n\t\t\t* `-type integer` `to` - Column index that the column has been moved to\n\t\t\t* `-type array` `mapping` - Array of integers that define how the old column positions map to the new positions\n\t\t\t* `-type boolean` `drop` - Indicate if this event is the result of a mouse drop (i.e. the user has finished moving the columns). This is useful to distinguish between a live reorder and the final state. Requires **ColReorder 1.2.1** or newer.</parameter><scope>HTML table element</scope></type><description>When using ColReorder you may wish to know when a table has been reordered by an end user or through the API. This event provides that information.\n\n\t\tThis event is triggered when a column is reordered - if `cr-init colReorder.realtime` is enabled this can be during the column reordering drag.\n\n\t\tPlease note that, as with all DataTables emitted events, this event is triggered with the `dt` namespace. As such, to listen for this event, you must also use the `dt` namespace by simply appending `.dt` to your event name, or use the `dt-api on()` method to listen for the event which will automatically append this namespace.</description><example title=\"Add a class to the reordered column\"><![CDATA[\n\nvar table = $('#example').DataTable( {\n\tcolumnReorder: true\n} );\n\ntable.on( 'column-reorder', function ( e, settings, details ) {\n\tvar headerCell = $( table.column( details.to ).header() );\n\n\theaderCell.addClass( 'reordered' );\n\n\tsetTimeout( function () {\n\t\theaderCell.removeClass( 'reordered' );\n\t}, 2000 );\n} );\n\n]]></example></dt-event>"
      - uri: file:///opt/input/source/src/main/resources/META-INF/resources/bower_components/datatables-colreorder/docs/option/colReorder.fixedColumnsLeft.xml
        message: ""
        codeSnip: "  1  <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n  2  <dt-option library=\"ColReorder\">\n  3  \t<name>colReorder.fixedColumnsLeft</name>\n  4  \t<summary>Disallow _x_ columns from reordering (counting from the left)</summary>\n  5  \n  6  \t<type type=\"integer\">\n  7  \t\t<description>\n  8  \t\t\tNumber of columns (counting from the left) to disallow reordering of.\n  9  \t\t</description>\n 10  \t</type>\n 11  \n 12  \t<default value=\"0\">\n 13  \t\tNo columns will be discounted from the reordering operation.\n 14  \t</default>\n 15  \n 16  \t<description>\n 17  \t\tWhen allowing reordering of columns in a table, you may often wish to disallow reordering of certain columns (for example locking an index, select or action column to the start of a table). This option provides that ability, locking columns counting from the left (`cr-init colReorder.fixedColumnsRight` provides the option to count from the right).\n 18  \n 19  \t\tThis can be particularly useful if using ColReorder with the [FixedColumns extension](https://datatables.net/extensions/fixedcolumns).\n 20  \t</description>\n 21  \n 22  \t<example title=\"Disallow the first column in a table from being reorderable\"><![CDATA[\n 23  \n 24  $('#example').DataTable( {\n 25  \tcolReorder: {\n 26  \t\tfixedColumnsLeft: 1\n 27  \t}\n 28  } );\n 29  \n 30  ]]></example>\n 31  \n 32  \t<related>cr-init colReorder.fixedColumnsRight</related>\n 33  </dt-option>\n"
        lineNumber: 1
        variables:
          data: ""
          innerText: "\n\n\tcolReorder.fixedColumnsLeft\n\tDisallow _x_ columns from reordering (counting from the left)\n\n\t\n\t\t\n\t\t\tNumber of columns (counting from the left) to disallow reordering of.\n\t\t\n\t\n\n\t\n\t\tNo columns will be discounted from the reordering operation.\n\t\n\n\t\n\t\tWhen allowing reordering of columns in a table, you may often wish to disallow reordering of certain columns (for example locking an index, select or action column to the start of a table). This option provides that ability, locking columns counting from the left (`cr-init colReorder.fixedColumnsRight` provides the option to count from the right).\n\n\t\tThis can be particularly useful if using ColReorder with the [FixedColumns extension](https://datatables.net/extensions/fixedcolumns).\n\t\n\n\t\n\n$('#example').DataTable( {\n\tcolReorder: {\n\t\tfixedColumnsLeft: 1\n\t}\n} );\n\n\n\n\tcr-init colReorder.fixedColumnsRight\n"
          matchingXML: "<?xml version=\"1.0\" encoding=\"UTF-8\"?><dt-option library=\"ColReorder\"><name>colReorder.fixedColumnsLeft</name><summary>Disallow _x_ columns from reordering (counting from the left)</summary><type type=\"integer\"><description>Number of columns (counting from the left) to disallow reordering of.</description></type><default value=\"0\">No columns will be discounted from the reordering operation.</default><description>When allowing reordering of columns in a table, you may often wish to disallow reordering of certain columns (for example locking an index, select or action column to the start of a table). This option provides that ability, locking columns counting from the left (`cr-init colReorder.fixedColumnsRight` provides the option to count from the right).\n\n\t\tThis can be particularly useful if using ColReorder with the [FixedColumns extension](https://datatables.net/extensions/fixedcolumns).</description><example title=\"Disallow the first column in a table from being reorderable\"><![CDATA[\n\n$('#example').DataTable( {\n\tcolReorder: {\n\t\tfixedColumnsLeft: 1\n\t}\n} );\n\n]]></example><related>cr-init colReorder.fixedColumnsRight</related></dt-option>"
      - uri: file:///opt/input/source/src/main/resources/META-INF/resources/bower_components/datatables-colreorder/docs/option/colReorder.fixedColumnsRight.xml
        message: ""
        codeSnip: "  1  <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n  2  <dt-option library=\"ColReorder\">\n  3  \t<name>colReorder.fixedColumnsRight</name>\n  4  \t<summary>Disallow _x_ columns from reordering (counting from the right)</summary>\n  5  \n  6  \t<type type=\"integer\">\n  7  \t\t<description>\n  8  \t\t\tNumber of columns (counting from the right) to disallow reordering of.\n  9  \t\t</description>\n 10  \t</type>\n 11  \n 12  \t<default value=\"0\">\n 13  \t\tNo columns will be discounted from the reordering operation.\n 14  \t</default>\n 15  \n 16  \t<description>\n 17  \t\tWhen allowing reordering of columns in a table, you may often wish to disallow reordering of certain columns (for example locking an index, select or action column to the start of a table). This option provides that ability, locking columns counting from the right (`cr-init colReorder.fixedColumnsLeft` provides the option to count from the left).\n 18  \n 19  \t\tThis can be particularly useful if using ColReorder with the [FixedColumns extension](https://datatables.net/extensions/fixedcolumns).\n 20  \t</description>\n 21  \n 22  \t<example title=\"Disallow the last two columns in a table from being reorderable\"><![CDATA[\n 23  \n 24  $('#example').DataTable( {\n 25  \tcolReorder: {\n 26  \t\tfixedColumnsRight: 2\n 27  \t}\n 28  } );\n 29  \n 30  ]]></example>\n 31  \n 32  \t<related>cr-init colReorder.fixedColumnsLeft</related>\n 33  </dt-option>\n"
        lineNumber: 1
        variables:
          data: ""
          innerText: "\n\n\tcolReorder.fixedColumnsRight\n\tDisallow _x_ columns from reordering (counting from the right)\n\n\t\n\t\t\n\t\t\tNumber of columns (counting from the right) to disallow reordering of.\n\t\t\n\t\n\n\t\n\t\tNo columns will be discounted from the reordering operation.\n\t\n\n\t\n\t\tWhen allowing reordering of columns in a table, you may often wish to disallow reordering of certain columns (for example locking an index, select or action column to the start of a table). This option provides that ability, locking columns counting from the right (`cr-init colReorder.fixedColumnsLeft` provides the option to count from the left).\n\n\t\tThis can be particularly useful if using ColReorder with the [FixedColumns extension](https://datatables.net/extensions/fixedcolumns).\n\t\n\n\t\n\n$('#example').DataTable( {\n\tcolReorder: {\n\t\tfixedColumnsRight: 2\n\t}\n} );\n\n\n\n\tcr-init colReorder.fixedColumnsLeft\n"
          matchingXML: "<?xml version=\"1.0\" encoding=\"UTF-8\"?><dt-option library=\"ColReorder\"><name>colReorder.fixedColumnsRight</name><summary>Disallow _x_ columns from reordering (counting from the right)</summary><type type=\"integer\"><description>Number of columns (counting from the right) to disallow reordering of.</description></type><default value=\"0\">No columns will be discounted from the reordering operation.</default><description>When allowing reordering of columns in a table, you may often wish to disallow reordering of certain columns (for example locking an index, select or action column to the start of a table). This option provides that ability, locking columns counting from the right (`cr-init colReorder.fixedColumnsLeft` provides the option to count from the left).\n\n\t\tThis can be particularly useful if using ColReorder with the [FixedColumns extension](https://datatables.net/extensions/fixedcolumns).</description><example title=\"Disallow the last two columns in a table from being reorderable\"><![CDATA[\n\n$('#example').DataTable( {\n\tcolReorder: {\n\t\tfixedColumnsRight: 2\n\t}\n} );\n\n]]></example><related>cr-init colReorder.fixedColumnsLeft</related></dt-option>"
      - uri: file:///opt/input/source/src/main/resources/META-INF/resources/bower_components/datatables-colreorder/docs/option/colReorder.order.xml
        message: ""
        codeSnip: "  1  <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n  2  <dt-option library=\"ColReorder\">\n  3  \t<name>colReorder.order</name>\n  4  \t<summary>Set a default order for the columns in the table</summary>\n  5  \n  6  \t<type type=\"array\">\n  7  \t\t<description>\n  8  \t\t\tAn array of integer values that define the order the columns should appear in. The position in the array is the position the column will take, and the value is the current column index that should be shown in that new position.\n  9  \n 10  \t\t\tThe array _must_ contain all columns in the table, and cannot contain duplicates.\n 11  \t\t</description>\n 12  \t</type>\n 13  \n 14  \t<default value=\"null\">\n 15  \t\tThe table's default column ordering will be used\n 16  \t</default>\n 17  \n 18  \t<description>\n 19  \t\tThis option provides the option to define a default order for the columns in a table. Typically you will wish to have the columns in the order defined in the HTML, or from state saving (`dt-init stateSave`), but if required, this option can be used to define an initial default order.\n 20  \t</description>\n 21  \n 22  \t<example title=\"Enable ColReorder and reserve the table's default column order (for a six column table)\"><![CDATA[\n 23  \n 24  $('#example').DataTable( {\n 25  \tcolReorder: {\n 26  \t\torder: [ 5, 4, 3, 2, 1, 0 ]\n 27  \t}\n 28  } );\n 29  \n 30  ]]></example>\n 31  \n 32  \t<related>cr-api colReorder.order()</related>\n 33  </dt-option>\n"
        lineNumber: 1
        variables:
          data: ""
          innerText: "\n\n\tcolReorder.order\n\tSet a default order for the columns in the table\n\n\t\n\t\t\n\t\t\tAn array of integer values that define the order the columns should appear in. The position in the array is the position the column will take, and the value is the current column index that should be shown in that new position.\n\n\t\t\tThe array _must_ contain all columns in the table, and cannot contain duplicates.\n\t\t\n\t\n\n\t\n\t\tThe table's default column ordering will be used\n\t\n\n\t\n\t\tThis option provides the option to define a default order for the columns in a table. Typically you will wish to have the columns in the order defined in the HTML, or from state saving (`dt-init stateSave`), but if required, this option can be used to define an initial default order.\n\t\n\n\t\n\n$('#example').DataTable( {\n\tcolReorder: {\n\t\torder: [ 5, 4, 3, 2, 1, 0 ]\n\t}\n} );\n\n\n\n\tcr-api colReorder.order()\n"
          matchingXML: "<?xml version=\"1.0\" encoding=\"UTF-8\"?><dt-option library=\"ColReorder\"><name>colReorder.order</name><summary>Set a default order for the columns in the table</summary><type type=\"array\"><description>An array of integer values that define the order the columns should appear in. The position in the array is the position the column will take, and the value is the current column index that should be shown in that new position.\n\n\t\t\tThe array _must_ contain all columns in the table, and cannot contain duplicates.</description></type><default value=\"null\">The table&#39;s default column ordering will be used</default><description>This option provides the option to define a default order for the columns in a table. Typically you will wish to have the columns in the order defined in the HTML, or from state saving (`dt-init stateSave`), but if required, this option can be used to define an initial default order.</description><example title=\"Enable ColReorder and reserve the table&#39;s default column order (for a six column table)\"><![CDATA[\n\n$('#example').DataTable( {\n\tcolReorder: {\n\t\torder: [ 5, 4, 3, 2, 1, 0 ]\n\t}\n} );\n\n]]></example><related>cr-api colReorder.order()</related></dt-option>"
      - uri: file:///opt/input/source/src/main/resources/META-INF/resources/bower_components/datatables-colreorder/docs/option/colReorder.realtime.xml
        message: ""
        codeSnip: "  1  <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n  2  <dt-option library=\"ColReorder\">\n  3  \t<name>colReorder.realtime</name>\n  4  \t<summary>Enable / disable live reordering of columns during a drag</summary>\n  5  \n  6  \t<type type=\"boolean\">\n  7  \t\t<description>\n  8  \t\t\t* `true` - Reorder columns during the drag operation initiated by the end user\n  9  \t\t\t* `false` - Only reorder columns when the dragged element has been dropped.\n 10  \t\t</description>\n 11  \t</type>\n 12  \n 13  \t<default value=\"true\">\n 14  \t\tColumns will be reordered during a drag operation\n 15  \t</default>\n 16  \n 17  \t<description>\n 18  \t\tColReorder will visually give the end user feedback about the reordering operation by showing an insert marker and also reordering the columns during the drag operation (by default). This option provides the option to turn the latter feedback mechanism off. You may wish to do this if you are targeting older browsers or older computers with complex tables as it can impact performance.\n 19  \t</description>\n 20  \n 21  \t<example title=\"Enable ColReorder and reserve the table's default column order (for a six column table)\"><![CDATA[\n 22  \n 23  $('#example').DataTable( {\n 24  \tcolReorder: {\n 25  \t\torder: [ 5, 4, 3, 2, 1, 0 ]\n 26  \t}\n 27  } );\n 28  \n 29  ]]></example>\n 30  \n 31  \t<related>cr-api colReorder.order()</related>\n 32  </dt-option>\n"
        lineNumber: 1
        variables:
          data: ""
          innerText: "\n\n\tcolReorder.realtime\n\tEnable / disable live reordering of columns during a drag\n\n\t\n\t\t\n\t\t\t* `true` - Reorder columns during the drag operation initiated by the end user\n\t\t\t* `false` - Only reorder columns when the dragged element has been dropped.\n\t\t\n\t\n\n\t\n\t\tColumns will be reordered during a drag operation\n\t\n\n\t\n\t\tColReorder will visually give the end user feedback about the reordering operation by showing an insert marker and also reordering the columns during the drag operation (by default). This option provides the option to turn the latter feedback mechanism off. You may wish to do this if you are targeting older browsers or older computers with complex tables as it can impact performance.\n\t\n\n\t\n\n$('#example').DataTable( {\n\tcolReorder: {\n\t\torder: [ 5, 4, 3, 2, 1, 0 ]\n\t}\n} );\n\n\n\n\tcr-api colReorder.order()\n"
          matchingXML: "<?xml version=\"1.0\" encoding=\"UTF-8\"?><dt-option library=\"ColReorder\"><name>colReorder.realtime</name><summary>Enable / disable live reordering of columns during a drag</summary><type type=\"boolean\"><description>* `true` - Reorder columns during the drag operation initiated by the end user\n\t\t\t* `false` - Only reorder columns when the dragged element has been dropped.</description></type><default value=\"true\">Columns will be reordered during a drag operation</default><description>ColReorder will visually give the end user feedback about the reordering operation by showing an insert marker and also reordering the columns during the drag operation (by default). This option provides the option to turn the latter feedback mechanism off. You may wish to do this if you are targeting older browsers or older computers with complex tables as it can impact performance.</description><example title=\"Enable ColReorder and reserve the table&#39;s default column order (for a six column table)\"><![CDATA[\n\n$('#example').DataTable( {\n\tcolReorder: {\n\t\torder: [ 5, 4, 3, 2, 1, 0 ]\n\t}\n} );\n\n]]></example><related>cr-api colReorder.order()</related></dt-option>"
      - uri: file:///opt/input/source/src/main/resources/META-INF/resources/bower_components/datatables-colreorder/docs/option/colReorder.xml
        message: ""
        codeSnip: "  1  <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n  2  <dt-option library=\"ColReorder\">\n  3  \t<name>colReorder</name>\n  4  \t<summary>Enable and configure the ColReorder extension for DataTables</summary>\n  5  \n  6  \t<type type=\"boolean\">\n  7  \t\t<description>\n  8  \t\t\tAs a boolean value this property will enable ColReorder on the DataTable that is being created. `true` will enable ColReorder, while `false` will not.\n  9  \n 10  \t\t\tThis is a short-cut option to enable ColReorder with the default configuration options. Customisations can be made by giving this parameter as an object, see below.\n 11  \t\t</description>\n 12  \t</type>\n 13  \n 14  \t<type type=\"object\">\n 15  \t\t<description>\n 16  \t\t\tIf given as an object, ColReorder will be enabled on the target DataTable, with default values (`$.fn.dataTable.ColReorder.defaults`) extended, and potentially overwritten, by the options provided in this object. This is how ColReorder can be configured on an individual table basis, or through the defaults.\n 17  \t\t</description>\n 18  \t</type>\n 19  \n 20  \t<default value=\"undefined\">\n 21  \t\tColReorder will not be initialised by default\n 22  \t</default>\n 23  \n 24  \t<description>\n 25  \t\tColReorder provides the option for end users to reorder columns in a DataTable by click and drag, or for yourself, the developer using DataTable, through the API.\n 26  \n 27  \t\tThis option provides the ability to enable and configure ColReorder for DataTables. In its simplest form as the boolean `true` it will enable ColReorder with the default configuration options (as defined by `$.fn.dataTable.ColReorder.defaults`). It can also be used as an object to provide custom configuration options as described below.\n 28  \n 29  \t\tPlease note that as with all other configuration options for ColReorder, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.\n 30  \t</description>\n 31  \n 32  \t<example title=\"Enable ColReorder for a table\"><![CDATA[\n 33  \n 34  $('#example').DataTable( {\n 35  \tcolReorder: true\n 36  } );\n 37  \n 38  ]]></example>\n 39  \n 40  \t<example title=\"Enable ColReorder with configuration options\"><![CDATA[\n 41  \n 42  $('#example').DataTable( {\n 43  \tcolReorder: {\n 44  \t\trealtime: false\n 45  \t}\n 46  } );\n 47  \n 48  ]]></example>\n 49  \n 50  </dt-option>\n"
        lineNumber: 1
        variables:
          data: ""
          innerText: "\n\n\tcolReorder\n\tEnable and configure the ColReorder extension for DataTables\n\n\t\n\t\t\n\t\t\tAs a boolean value this property will enable ColReorder on the DataTable that is being created. `true` will enable ColReorder, while `false` will not.\n\n\t\t\tThis is a short-cut option to enable ColReorder with the default configuration options. Customisations can be made by giving this parameter as an object, see below.\n\t\t\n\t\n\n\t\n\t\t\n\t\t\tIf given as an object, ColReorder will be enabled on the target DataTable, with default values (`$.fn.dataTable.ColReorder.defaults`) extended, and potentially overwritten, by the options provided in this object. This is how ColReorder can be configured on an individual table basis, or through the defaults.\n\t\t\n\t\n\n\t\n\t\tColReorder will not be initialised by default\n\t\n\n\t\n\t\tColReorder provides the option for end users to reorder columns in a DataTable by click and drag, or for yourself, the developer using DataTable, through the API.\n\n\t\tThis option provides the ability to enable and configure ColReorder for DataTables. In its simplest form as the boolean `true` it will enable ColReorder with the default configuration options (as defined by `$.fn.dataTable.ColReorder.defaults`). It can also be used as an object to provide custom configuration options as described below.\n\n\t\tPlease note that as with all other configuration options for ColReorder, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.\n\t\n\n\t\n\n$('#example').DataTable( {\n\tcolReorder: true\n} );\n\n\n\n\t\n\n$('#example').DataTable( {\n\tcolReorder: {\n\t\trealtime: false\n\t}\n} );\n\n\n\n"
          matchingXML: "<?xml version=\"1.0\" encoding=\"UTF-8\"?><dt-option library=\"ColReorder\"><name>colReorder</name><summary>Enable and configure the ColReorder extension for DataTables</summary><type type=\"boolean\"><description>As a boolean value this property will enable ColReorder on the DataTable that is being created. `true` will enable ColReorder, while `false` will not.\n\n\t\t\tThis is a short-cut option to enable ColReorder with the default configuration options. Customisations can be made by giving this parameter as an object, see below.</description></type><type type=\"object\"><description>If given as an object, ColReorder will be enabled on the target DataTable, with default values (`$.fn.dataTable.ColReorder.defaults`) extended, and potentially overwritten, by the options provided in this object. This is how ColReorder can be configured on an individual table basis, or through the defaults.</description></type><default value=\"undefined\">ColReorder will not be initialised by default</default><description>ColReorder provides the option for end users to reorder columns in a DataTable by click and drag, or for yourself, the developer using DataTable, through the API.\n\n\t\tThis option provides the ability to enable and configure ColReorder for DataTables. In its simplest form as the boolean `true` it will enable ColReorder with the default configuration options (as defined by `$.fn.dataTable.ColReorder.defaults`). It can also be used as an object to provide custom configuration options as described below.\n\n\t\tPlease note that as with all other configuration options for ColReorder, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.</description><example title=\"Enable ColReorder for a table\"><![CDATA[\n\n$('#example').DataTable( {\n\tcolReorder: true\n} );\n\n]]></example><example title=\"Enable ColReorder with configuration options\"><![CDATA[\n\n$('#example').DataTable( {\n\tcolReorder: {\n\t\trealtime: false\n\t}\n} );\n\n]]></example></dt-option>"
      - uri: file:///opt/input/source/src/main/resources/META-INF/resources/bower_components/datatables-colreorder/examples/index.xml
        message: ""
        codeSnip: "  1  <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n  2  <dt-example table-type=\"html\" order=\"0\">\n  3  \n  4  <title lib=\"ColReorder\">ColReorder examples</title>\n  5  \n  6  <js lib=\"jquery\" />\n  7  <info><![CDATA[\n  8  \n  9  ColReorder adds the ability for the end user to click and drag column headers to reorder a table as they see fit, to DataTables. Key features include:\n 10  \n 11  * Very easy integration with DataTables\n 12  * Tight integration with all other DataTables plug-ins\n 13  * The ability to exclude the first (or more) column from being movable\n 14  * Predefine a column order\n 15  * Save staving integration with DataTables\n 16  \n 17  ]]></info>\n 18  \n 19  </dt-example>\n"
        lineNumber: 1
        variables:
          data: ""
          innerText: |+
            ColReorder examples




            ColReorder adds the ability for the end user to click and drag column headers to reorder a table as they see fit, to DataTables. Key features include:

            * Very easy integration with DataTables
            * Tight integration with all other DataTables plug-ins
            * The ability to exclude the first (or more) column from being movable
            * Predefine a column order
            * Save staving integration with DataTables




          matchingXML: |-
            <?xml version="1.0" encoding="UTF-8"?><dt-example table-type="html" order="0"><title lib="ColReorder">ColReorder examples</title><js lib="jquery"></js><info><![CDATA[

            ColReorder adds the ability for the end user to click and drag column headers to reorder a table as they see fit, to DataTables. Key features include:

            * Very easy integration with DataTables
            * Tight integration with all other DataTables plug-ins
            * The ability to exclude the first (or more) column from being movable
            * Predefine a column order
            * Save staving integration with DataTables

            ]]></info></dt-example>
      - uri: file:///opt/input/source/src/main/resources/META-INF/resources/bower_components/datatables-colreorder/examples/initialisation/col_filter.xml
        message: ""
        codeSnip: "  1  <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n  2  <dt-example table-type=\"html\" order=\"5\">\n  3  \n  4  <css lib=\"datatables colreorder\" />\n  5  <js lib=\"jquery datatables colreorder\">\n  6  <![CDATA[\n  7  $(document).ready(function() {\n  8      // Setup - add a text input to each footer cell\n  9      $('#example tfoot th').each( function () {\n 10          var title = $('#example thead th').eq( $(this).index() ).text();\n 11          $(this).html( '<input type=\"text\" placeholder=\"Search '+title+'\" />' );\n 12      } );\n 13   \n 14      // DataTable\n 15      var table = $('#example').DataTable( {\n 16  \t\tcolReorder: true\n 17  \t} );\n 18       \n 19      // Apply the filter\n 20      $(\"#example tfoot input\").on( 'keyup change', function () {\n 21          table\n 22              .column( $(this).parent().index()+':visible' )\n 23              .search( this.value )\n 24              .draw();\n 25      } );\n 26  } );\n 27  ]]>\n 28  </js>\n 29  \n 30  <title lib=\"ColReorder\">Individual column filtering</title>\n 31  \n 32  <info><![CDATA[\n 33  \n 34  This example of how to use ColReorder shows how it can with with DataTables' ability to do individual column filtering. The basic example is exactly the same as the DataTables column filtering example, but with ColReorder also added to the table (`cr-init colReorder`).\n 35  \n 36  ]]></info>\n 37  \n 38  </dt-example>\n"
        lineNumber: 7
        variables:
          data: ""
          innerText: "\n\n\n\n\n\n$(document).ready(function() {\n    // Setup - add a text input to each footer cell\n    $('#example tfoot th').each( function () {\n        var title = $('#example thead th').eq( $(this).index() ).text();\n        $(this).html( '<input type=\"text\" placeholder=\"Search '+title+'\" />' );\n    } );\n \n    // DataTable\n    var table = $('#example').DataTable( {\n\t\tcolReorder: true\n\t} );\n     \n    // Apply the filter\n    $(\"#example tfoot input\").on( 'keyup change', function () {\n        table\n            .column( $(this).parent().index()+':visible' )\n            .search( this.value )\n            .draw();\n    } );\n} );\n\n\n\nIndividual column filtering\n\n\n\nThis example of how to use ColReorder shows how it can with with DataTables' ability to do individual column filtering. The basic example is exactly the same as the DataTables column filtering example, but with ColReorder also added to the table (`cr-init colReorder`).\n\n\n\n\n"
          matchingXML: "<?xml version=\"1.0\" encoding=\"UTF-8\"?><dt-example table-type=\"html\" order=\"5\"><css lib=\"datatables colreorder\"></css><js lib=\"jquery datatables colreorder\"><![CDATA[\n$(document).ready(function() {\n    // Setup - add a text input to each footer cell\n    $('#example tfoot th').each( function () {\n        var title = $('#example thead th').eq( $(this).index() ).text();\n        $(this).html( '<input type=\"text\" placeholder=\"Search '+title+'\" />' );\n    } );\n \n    // DataTable\n    var table = $('#example').DataTable( {\n\t\tcolReorder: true\n\t} );\n     \n    // Apply the filter\n    $(\"#example tfoot input\").on( 'keyup change', function () {\n        table\n            .column( $(this).parent().index()+':visible' )\n            .search( this.value )\n            .draw();\n    } );\n} );\n]]></js><title lib=\"ColReorder\">Individual column filtering</title><info><![CDATA[\n\nThis example of how to use ColReorder shows how it can with with DataTables' ability to do individual column filtering. The basic example is exactly the same as the DataTables column filtering example, but with ColReorder also added to the table (`cr-init colReorder`).\n\n]]></info></dt-example>"
      - uri: file:///opt/input/source/src/main/resources/META-INF/resources/bower_components/datatables-colreorder/examples/initialisation/index.xml
        message: ""
        codeSnip: "  1  <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n  2  <dt-example order=\"0\">\n  3  \n  4  <title lib=\"ColReorder\">Initialisation</title>\n  5  \n  6  <info><![CDATA[\n  7  \n  8  The examples in this section demonstrate ColReorder's initialisation and options.\n  9  \n 10  ]]></info>\n 11  \n 12  </dt-example>\n"
        lineNumber: 4
        variables:
          data: ""
          innerText: |+
            Initialisation



            The examples in this section demonstrate ColReorder's initialisation and options.




          matchingXML: |-
            <?xml version="1.0" encoding="UTF-8"?><dt-example order="0"><title lib="ColReorder">Initialisation</title><info><![CDATA[

            The examples in this section demonstrate ColReorder's initialisation and options.

            ]]></info></dt-example>
      - uri: file:///opt/input/source/src/main/resources/META-INF/resources/bower_components/datatables-colreorder/examples/initialisation/new_init.xml
        message: ""
        codeSnip: "  1  <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n  2  <dt-example table-type=\"html\" order=\"6\">\n  3  \n  4  <css lib=\"datatables colreorder\" />\n  5  <js lib=\"jquery datatables colreorder\">\n  6  <![CDATA[\n  7  $(document).ready(function() {\n  8  \tvar table = $('#example').DataTable();\n  9  \n 10  \tnew $.fn.dataTable.ColReorder( table );\n 11  } );\n 12  ]]>\n 13  </js>\n 14  \n 15  <title lib=\"ColReorder\">Initialisation using `new`</title>\n 16  \n 17  <info><![CDATA[\n 18  \n 19  As well as providing the option to be initialised through the `cr-init colReorder`, ColReorder can also be added to a DataTable using direct initialisation - `new $.fn.dataTable.ColReorder();` as shown in this example. Options can be passed in as the second parameter for the constructor.\n 20  \n 21  ]]></info>\n 22  \n 23  </dt-example>\n"
        lineNumber: 7
        variables:
          data: ""
          innerText: "\n\n\n\n\n\n$(document).ready(function() {\n\tvar table = $('#example').DataTable();\n\n\tnew $.fn.dataTable.ColReorder( table );\n} );\n\n\n\nInitialisation using `new`\n\n\n\nAs well as providing the option to be initialised through the `cr-init colReorder`, ColReorder can also be added to a DataTable using direct initialisation - `new $.fn.dataTable.ColReorder();` as shown in this example. Options can be passed in as the second parameter for the constructor.\n\n\n\n\n"
          matchingXML: "<?xml version=\"1.0\" encoding=\"UTF-8\"?><dt-example table-type=\"html\" order=\"6\"><css lib=\"datatables colreorder\"></css><js lib=\"jquery datatables colreorder\"><![CDATA[\n$(document).ready(function() {\n\tvar table = $('#example').DataTable();\n\n\tnew $.fn.dataTable.ColReorder( table );\n} );\n]]></js><title lib=\"ColReorder\">Initialisation using `new`</title><info><![CDATA[\n\nAs well as providing the option to be initialised through the `cr-init colReorder`, ColReorder can also be added to a DataTable using direct initialisation - `new $.fn.dataTable.ColReorder();` as shown in this example. Options can be passed in as the second parameter for the constructor.\n\n]]></info></dt-example>"
      - uri: file:///opt/input/source/src/main/resources/META-INF/resources/bower_components/datatables-colreorder/examples/initialisation/predefined.xml
        message: ""
        codeSnip: "  1  <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n  2  <dt-example table-type=\"html\" order=\"3\">\n  3  \n  4  <css lib=\"datatables colreorder\" />\n  5  <js lib=\"jquery datatables colreorder\">\n  6  <![CDATA[\n  7  \n  8  $(document).ready(function() {\n  9  \t$('#example').dataTable( {\n 10  \t\tcolReorder: {\n 11  \t\t\torder: [ 4, 3, 2, 1, 0, 5 ]\n 12  \t\t}\n 13  \t} );\n 14  } );\n 15  \n 16  ]]>\n 17  </js>\n 18  \n 19  <title lib=\"ColReorder\">Predefined column ordering</title>\n 20  \n 21  <info><![CDATA[\n 22  \n 23  ColReorder provides the ability to specify a column ordering which is not that of the HTML (which typically you will want) through the parameter `cr-init colReorder.order`. This is an array of integers with the column ordering you want.\n 24  \n 25  ]]></info>\n 26  \n 27  </dt-example>\n"
        lineNumber: 8
        variables:
          data: ""
          innerText: "\n\n\n\n\n\n\n$(document).ready(function() {\n\t$('#example').dataTable( {\n\t\tcolReorder: {\n\t\t\torder: [ 4, 3, 2, 1, 0, 5 ]\n\t\t}\n\t} );\n} );\n\n\n\n\nPredefined column ordering\n\n\n\nColReorder provides the ability to specify a column ordering which is not that of the HTML (which typically you will want) through the parameter `cr-init colReorder.order`. This is an array of integers with the column ordering you want.\n\n\n\n\n"
          matchingXML: "<?xml version=\"1.0\" encoding=\"UTF-8\"?><dt-example table-type=\"html\" order=\"3\"><css lib=\"datatables colreorder\"></css><js lib=\"jquery datatables colreorder\"><![CDATA[\n\n$(document).ready(function() {\n\t$('#example').dataTable( {\n\t\tcolReorder: {\n\t\t\torder: [ 4, 3, 2, 1, 0, 5 ]\n\t\t}\n\t} );\n} );\n\n]]></js><title lib=\"ColReorder\">Predefined column ordering</title><info><![CDATA[\n\nColReorder provides the ability to specify a column ordering which is not that of the HTML (which typically you will want) through the parameter `cr-init colReorder.order`. This is an array of integers with the column ordering you want.\n\n]]></info></dt-example>"
      - uri: file:///opt/input/source/src/main/resources/META-INF/resources/bower_components/datatables-colreorder/examples/initialisation/realtime.xml
        message: ""
        codeSnip: "  1  <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n  2  <dt-example table-type=\"html\" order=\"4\">\n  3  \n  4  <css lib=\"datatables colreorder\" />\n  5  <js lib=\"jquery datatables colreorder\">\n  6  <![CDATA[\n  7  \n  8  $(document).ready(function() {\n  9  \t$('#example').dataTable( {\n 10  \t\tcolReorder: {\n 11  \t\t\trealtime: false\n 12  \t\t}\n 13  \t} );\n 14  } );\n 15  \n 16  ]]>\n 17  </js>\n 18  \n 19  <title lib=\"ColReorder\">Realtime updating</title>\n 20  \n 21  <info><![CDATA[\n 22  \n 23  ColReorder will automatically move columns in realtime as the user moves their mouse. On slower computers with complex tables this can potentially impact performance, so ColReorder has the option to disable this dynamic update and reorder columns only once the reordering is complete - this is done using the `cr-init colReorder.realtime` option.\n 24  \n 25  ]]></info>\n 26  \n 27  </dt-example>\n"
        lineNumber: 8
        variables:
          data: ""
          innerText: "\n\n\n\n\n\n\n$(document).ready(function() {\n\t$('#example').dataTable( {\n\t\tcolReorder: {\n\t\t\trealtime: false\n\t\t}\n\t} );\n} );\n\n\n\n\nRealtime updating\n\n\n\nColReorder will automatically move columns in realtime as the user moves their mouse. On slower computers with complex tables this can potentially impact performance, so ColReorder has the option to disable this dynamic update and reorder columns only once the reordering is complete - this is done using the `cr-init colReorder.realtime` option.\n\n\n\n\n"
          matchingXML: "<?xml version=\"1.0\" encoding=\"UTF-8\"?><dt-example table-type=\"html\" order=\"4\"><css lib=\"datatables colreorder\"></css><js lib=\"jquery datatables colreorder\"><![CDATA[\n\n$(document).ready(function() {\n\t$('#example').dataTable( {\n\t\tcolReorder: {\n\t\t\trealtime: false\n\t\t}\n\t} );\n} );\n\n]]></js><title lib=\"ColReorder\">Realtime updating</title><info><![CDATA[\n\nColReorder will automatically move columns in realtime as the user moves their mouse. On slower computers with complex tables this can potentially impact performance, so ColReorder has the option to disable this dynamic update and reorder columns only once the reordering is complete - this is done using the `cr-init colReorder.realtime` option.\n\n]]></info></dt-example>"
      - uri: file:///opt/input/source/src/main/resources/META-INF/resources/bower_components/datatables-colreorder/examples/initialisation/reset.xml
        message: ""
        codeSnip: "  1  <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n  2  <dt-example table-type=\"html\" order=\"8\">\n  3  \n  4  <css lib=\"datatables colreorder\" />\n  5  <js lib=\"jquery datatables colreorder\">\n  6  <![CDATA[\n  7  \n  8  $(document).ready(function() {\n  9  \tvar table = $('#example').DataTable( {\n 10  \t\tcolReorder: true\n 11  \t} );\n 12  \t\n 13  \t$('#reset').click( function (e) {\n 14  \t\te.preventDefault();\n 15  \t\t\n 16  \t\ttable.colReorder.reset();\n 17  \t} );\n 18  } );\n 19  \n 20  ]]>\n 21  </js>\n 22  \n 23  <title lib=\"ColReorder\">Reset ordering API</title>\n 24  \n 25  <info><![CDATA[\n 26  \n 27  One useful control option to present the end user when using ColReorder is the ability to reset the column ordering to that which was found in the HTML. This can be done by calling the `cr-api colReorder.reset()` method.\n 28  \n 29  This example shows that method being triggered from a button click. To demonstrate, reorder the columns and then click the reset button to have the columns reset.\n 30  \n 31  ]]></info>\n 32  \n 33  <demo-html>\n 34  \t<button id=\"reset\">Reset to original HTML order</button>\n 35  \t<br/><br/>\n 36  </demo-html>\n 37  \n 38  </dt-example>\n"
        lineNumber: 8
        variables:
          data: ""
          innerText: "\n\n\n\n\n\n\n$(document).ready(function() {\n\tvar table = $('#example').DataTable( {\n\t\tcolReorder: true\n\t} );\n\t\n\t$('#reset').click( function (e) {\n\t\te.preventDefault();\n\t\t\n\t\ttable.colReorder.reset();\n\t} );\n} );\n\n\n\n\nReset ordering API\n\n\n\nOne useful control option to present the end user when using ColReorder is the ability to reset the column ordering to that which was found in the HTML. This can be done by calling the `cr-api colReorder.reset()` method.\n\nThis example shows that method being triggered from a button click. To demonstrate, reorder the columns and then click the reset button to have the columns reset.\n\n\n\n\n\tReset to original HTML order\n\t\n\n\n\n"
          matchingXML: "<?xml version=\"1.0\" encoding=\"UTF-8\"?><dt-example table-type=\"html\" order=\"8\"><css lib=\"datatables colreorder\"></css><js lib=\"jquery datatables colreorder\"><![CDATA[\n\n$(document).ready(function() {\n\tvar table = $('#example').DataTable( {\n\t\tcolReorder: true\n\t} );\n\t\n\t$('#reset').click( function (e) {\n\t\te.preventDefault();\n\t\t\n\t\ttable.colReorder.reset();\n\t} );\n} );\n\n]]></js><title lib=\"ColReorder\">Reset ordering API</title><info><![CDATA[\n\nOne useful control option to present the end user when using ColReorder is the ability to reset the column ordering to that which was found in the HTML. This can be done by calling the `cr-api colReorder.reset()` method.\n\nThis example shows that method being triggered from a button click. To demonstrate, reorder the columns and then click the reset button to have the columns reset.\n\n]]></info><demo-html><button id=\"reset\">Reset to original HTML order</button><br></br><br></br></demo-html></dt-example>"
      - uri: file:///opt/input/source/src/main/resources/META-INF/resources/bower_components/datatables-colreorder/examples/initialisation/scrolling.xml
        message: ""
        codeSnip: "  1  <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n  2  <dt-example table-type=\"html\" order=\"2\">\n  3  \n  4  <css lib=\"datatables colreorder\" />\n  5  <js lib=\"jquery datatables colreorder\">\n  6  <![CDATA[\n  7  \n  8  $(document).ready(function() {\n  9  \t$('#example').dataTable( {\n 10  \t\tscrollY:    '200px',\n 11  \t\tpaging:     false,\n 12  \t\tcolReorder: true\n 13  \t} );\n 14  } );\n 15  \n 16  ]]>\n 17  </js>\n 18  \n 19  <title lib=\"ColReorder\">Scrolling table</title>\n 20  \n 21  <info><![CDATA[\n 22  \n 23  This is a simple example to show ColReorder working with DataTables scrolling (`dt-init scrollY` and `dt-init scrollX`).\n 24  \n 25  ]]></info>\n 26  \n 27  </dt-example>\n"
        lineNumber: 8
        variables:
          data: ""
          innerText: "\n\n\n\n\n\n\n$(document).ready(function() {\n\t$('#example').dataTable( {\n\t\tscrollY:    '200px',\n\t\tpaging:     false,\n\t\tcolReorder: true\n\t} );\n} );\n\n\n\n\nScrolling table\n\n\n\nThis is a simple example to show ColReorder working with DataTables scrolling (`dt-init scrollY` and `dt-init scrollX`).\n\n\n\n\n"
          matchingXML: "<?xml version=\"1.0\" encoding=\"UTF-8\"?><dt-example table-type=\"html\" order=\"2\"><css lib=\"datatables colreorder\"></css><js lib=\"jquery datatables colreorder\"><![CDATA[\n\n$(document).ready(function() {\n\t$('#example').dataTable( {\n\t\tscrollY:    '200px',\n\t\tpaging:     false,\n\t\tcolReorder: true\n\t} );\n} );\n\n]]></js><title lib=\"ColReorder\">Scrolling table</title><info><![CDATA[\n\nThis is a simple example to show ColReorder working with DataTables scrolling (`dt-init scrollY` and `dt-init scrollX`).\n\n]]></info></dt-example>"
      - uri: file:///opt/input/source/src/main/resources/META-INF/resources/bower_components/datatables-colreorder/examples/initialisation/simple.xml
        message: ""
        codeSnip: "  1  <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n  2  <dt-example table-type=\"html\" order=\"1\">\n  3  \n  4  <css lib=\"datatables colreorder\" />\n  5  <js lib=\"jquery datatables colreorder\">\n  6  <![CDATA[\n  7  $(document).ready(function() {\n  8  \t$('#example').DataTable( {\n  9  \t\tcolReorder: true\n 10  \t} );\n 11  } );\n 12  ]]>\n 13  </js>\n 14  \n 15  <title lib=\"ColReorder\">Basic initialisation</title>\n 16  \n 17  <info><![CDATA[\n 18  \n 19  This example shows the basic use case of the ColReorder plug-in. With ColReorder enabled for a table, the user has the ability to click and drag any table header cell, and drop it where they wish the column to be inserted. The insert point is shown visually, and the column reordering is done as soon as the mouse button is released.\n 20  \n 21  ColReorder is added to a DataTable through the `cr-init colReorder` initialisation option which can be set to `true` to use the default options for ColReorder (as shown in this example) or used as an object to set options, as shown in other examples.\n 22  \n 23  ]]></info>\n 24  \n 25  </dt-example>\n"
        lineNumber: 7
        variables:
          data: ""
          innerText: "\n\n\n\n\n\n$(document).ready(function() {\n\t$('#example').DataTable( {\n\t\tcolReorder: true\n\t} );\n} );\n\n\n\nBasic initialisation\n\n\n\nThis example shows the basic use case of the ColReorder plug-in. With ColReorder enabled for a table, the user has the ability to click and drag any table header cell, and drop it where they wish the column to be inserted. The insert point is shown visually, and the column reordering is done as soon as the mouse button is released.\n\nColReorder is added to a DataTable through the `cr-init colReorder` initialisation option which can be set to `true` to use the default options for ColReorder (as shown in this example) or used as an object to set options, as shown in other examples.\n\n\n\n\n"
          matchingXML: "<?xml version=\"1.0\" encoding=\"UTF-8\"?><dt-example table-type=\"html\" order=\"1\"><css lib=\"datatables colreorder\"></css><js lib=\"jquery datatables colreorder\"><![CDATA[\n$(document).ready(function() {\n\t$('#example').DataTable( {\n\t\tcolReorder: true\n\t} );\n} );\n]]></js><title lib=\"ColReorder\">Basic initialisation</title><info><![CDATA[\n\nThis example shows the basic use case of the ColReorder plug-in. With ColReorder enabled for a table, the user has the ability to click and drag any table header cell, and drop it where they wish the column to be inserted. The insert point is shown visually, and the column reordering is done as soon as the mouse button is released.\n\nColReorder is added to a DataTable through the `cr-init colReorder` initialisation option which can be set to `true` to use the default options for ColReorder (as shown in this example) or used as an object to set options, as shown in other examples.\n\n]]></info></dt-example>"
      - uri: file:///opt/input/source/src/main/resources/META-INF/resources/bower_components/datatables-colreorder/examples/integration/colvis.xml
        message: ""
        codeSnip: "  1  <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n  2  <dt-example table-type=\"html\" order=\"1\">\n  3  \n  4  <css lib=\"datatables colreorder buttons\" />\n  5  <js lib=\"jquery datatables colreorder buttons buttons-colvis\">\n  6  <![CDATA[\n  7  $(document).ready(function() {\n  8      var table = $('#example').DataTable( {\n  9          dom: 'Bfrtip',\n 10          colReorder: true,\n 11          buttons: [\n 12          \t'colvis'\n 13          ]\n 14  \t} );\n 15  } );\n 16  ]]>\n 17  </js>\n 18  \n 19  <title lib=\"ColReorder\">Column visibility integration</title>\n 20  \n 21  <info><![CDATA[\n 22  \n 23  ColReorder interfaces with the [Button's column visibility module](//datatables.net/extensions/buttons) for DataTables by updating the order of the list of columns whenever a reorder is done. This is shown in the example below.\n 24  \n 25  ]]></info>\n 26  \n 27  </dt-example>\n"
        lineNumber: 7
        variables:
          data: ""
          innerText: "\n\n\n\n\n\n$(document).ready(function() {\n    var table = $('#example').DataTable( {\n        dom: 'Bfrtip',\n        colReorder: true,\n        buttons: [\n        \t'colvis'\n        ]\n\t} );\n} );\n\n\n\nColumn visibility integration\n\n\n\nColReorder interfaces with the [Button's column visibility module](//datatables.net/extensions/buttons) for DataTables by updating the order of the list of columns whenever a reorder is done. This is shown in the example below.\n\n\n\n\n"
          matchingXML: "<?xml version=\"1.0\" encoding=\"UTF-8\"?><dt-example table-type=\"html\" order=\"1\"><css lib=\"datatables colreorder buttons\"></css><js lib=\"jquery datatables colreorder buttons buttons-colvis\"><![CDATA[\n$(document).ready(function() {\n    var table = $('#example').DataTable( {\n        dom: 'Bfrtip',\n        colReorder: true,\n        buttons: [\n        \t'colvis'\n        ]\n\t} );\n} );\n]]></js><title lib=\"ColReorder\">Column visibility integration</title><info><![CDATA[\n\nColReorder interfaces with the [Button's column visibility module](//datatables.net/extensions/buttons) for DataTables by updating the order of the list of columns whenever a reorder is done. This is shown in the example below.\n\n]]></info></dt-example>"
      - uri: file:///opt/input/source/src/main/resources/META-INF/resources/bower_components/datatables-colreorder/examples/integration/fixedcolumns.xml
        message: ""
        codeSnip: "  1  <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n  2  <dt-example table-type=\"html-wide\" table-class=\"display nowrap\" order=\"2\">\n  3  \n  4  <css lib=\"datatables colreorder fixedcolumns\" />\n  5  <js lib=\"jquery datatables colreorder fixedcolumns\">\n  6  <![CDATA[\n  7  \n  8  $(document).ready(function() {\n  9  \tvar table = $('#example').DataTable( {\n 10  \t\tscrollX: true,\n 11  \t\tscrollCollapse: true,\n 12  \t\tcolumnDefs: [\n 13  \t\t\t{ orderable: false, targets: 0 },\n 14  \t\t\t{ orderable: false, targets: -1 }\n 15  \t\t],\n 16  \t\tordering: [[ 1, 'asc' ]],\n 17  \t\tcolReorder: {\n 18  \t\t\tfixedColumnsLeft: 1,\n 19  \t\t\tfixedColumnsRight: 1\n 20  \t\t}\n 21  \t} );\n 22  \n 23  \tnew $.fn.dataTable.FixedColumns( table, {\n 24  \t\tleftColumns: 1,\n 25  \t\trightColumns: 1\n 26  \t} );\n 27  } );\n 28  \n 29  ]]>\n 30  </js>\n 31  \n 32  <title lib=\"ColReorder\">FixedColumns integration</title>\n 33  \n 34  <info><![CDATA[\n 35  \n 36  While ColReorder works with the built-in scrolling options in DataTables (`dt-init scrollY` and `dt-init scrollX`) and also the [FixedColumns extension](//datatables.net/extensions/fixedcolumns).\n 37  \n 38  ColReorder provides the `cr-init colReorder.fixedColumnsLeft` and `cr-init colReorder.fixedColumnsRight` options which allows you disallow reordering of the fixed columns (which is required).\n 39  \n 40  ]]></info>\n 41  \n 42  </dt-example>\n"
        lineNumber: 8
        variables:
          data: ""
          innerText: "\n\n\n\n\n\n\n$(document).ready(function() {\n\tvar table = $('#example').DataTable( {\n\t\tscrollX: true,\n\t\tscrollCollapse: true,\n\t\tcolumnDefs: [\n\t\t\t{ orderable: false, targets: 0 },\n\t\t\t{ orderable: false, targets: -1 }\n\t\t],\n\t\tordering: [[ 1, 'asc' ]],\n\t\tcolReorder: {\n\t\t\tfixedColumnsLeft: 1,\n\t\t\tfixedColumnsRight: 1\n\t\t}\n\t} );\n\n\tnew $.fn.dataTable.FixedColumns( table, {\n\t\tleftColumns: 1,\n\t\trightColumns: 1\n\t} );\n} );\n\n\n\n\nFixedColumns integration\n\n\n\nWhile ColReorder works with the built-in scrolling options in DataTables (`dt-init scrollY` and `dt-init scrollX`) and also the [FixedColumns extension](//datatables.net/extensions/fixedcolumns).\n\nColReorder provides the `cr-init colReorder.fixedColumnsLeft` and `cr-init colReorder.fixedColumnsRight` options which allows you disallow reordering of the fixed columns (which is required).\n\n\n\n\n"
          matchingXML: "<?xml version=\"1.0\" encoding=\"UTF-8\"?><dt-example table-type=\"html-wide\" table-class=\"display nowrap\" order=\"2\"><css lib=\"datatables colreorder fixedcolumns\"></css><js lib=\"jquery datatables colreorder fixedcolumns\"><![CDATA[\n\n$(document).ready(function() {\n\tvar table = $('#example').DataTable( {\n\t\tscrollX: true,\n\t\tscrollCollapse: true,\n\t\tcolumnDefs: [\n\t\t\t{ orderable: false, targets: 0 },\n\t\t\t{ orderable: false, targets: -1 }\n\t\t],\n\t\tordering: [[ 1, 'asc' ]],\n\t\tcolReorder: {\n\t\t\tfixedColumnsLeft: 1,\n\t\t\tfixedColumnsRight: 1\n\t\t}\n\t} );\n\n\tnew $.fn.dataTable.FixedColumns( table, {\n\t\tleftColumns: 1,\n\t\trightColumns: 1\n\t} );\n} );\n\n]]></js><title lib=\"ColReorder\">FixedColumns integration</title><info><![CDATA[\n\nWhile ColReorder works with the built-in scrolling options in DataTables (`dt-init scrollY` and `dt-init scrollX`) and also the [FixedColumns extension](//datatables.net/extensions/fixedcolumns).\n\nColReorder provides the `cr-init colReorder.fixedColumnsLeft` and `cr-init colReorder.fixedColumnsRight` options which allows you disallow reordering of the fixed columns (which is required).\n\n]]></info></dt-example>"
      - uri: file:///opt/input/source/src/main/resources/META-INF/resources/bower_components/datatables-colreorder/examples/integration/fixedheader.xml
        message: ""
        codeSnip: "  1  <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n  2  <dt-example table-type=\"html\" order=\"3\">\n  3  \n  4  <css lib=\"datatables colreorder fixedheader\" />\n  5  <js lib=\"jquery datatables colreorder fixedheader\">\n  6  <![CDATA[\n  7  \n  8  $(document).ready(function() {\n  9  \tvar table = $('#example').dataTable( {\n 10  \t\tcolReorder: true,\n 11  \t\tfixedHeader: true\n 12  \t} );\n 13  } );\n 14  \n 15  ]]>\n 16  </js>\n 17  \n 18  <title lib=\"ColReorder\">FixedHeader integration</title>\n 19  \n 20  <info><![CDATA[\n 21  \n 22  FixedHeader is a particularly useful plug-in for DataTables, allowing a table header to float at the top of a scrolling window. ColReorder works well with FixedHeader, allowing you to reorder columns even using the floating header, as shown in the example below.\n 23  \n 24  ]]></info>\n 25  \n 26  </dt-example>\n"
        lineNumber: 8
        variables:
          data: ""
          innerText: "\n\n\n\n\n\n\n$(document).ready(function() {\n\tvar table = $('#example').dataTable( {\n\t\tcolReorder: true,\n\t\tfixedHeader: true\n\t} );\n} );\n\n\n\n\nFixedHeader integration\n\n\n\nFixedHeader is a particularly useful plug-in for DataTables, allowing a table header to float at the top of a scrolling window. ColReorder works well with FixedHeader, allowing you to reorder columns even using the floating header, as shown in the example below.\n\n\n\n\n"
          matchingXML: "<?xml version=\"1.0\" encoding=\"UTF-8\"?><dt-example table-type=\"html\" order=\"3\"><css lib=\"datatables colreorder fixedheader\"></css><js lib=\"jquery datatables colreorder fixedheader\"><![CDATA[\n\n$(document).ready(function() {\n\tvar table = $('#example').dataTable( {\n\t\tcolReorder: true,\n\t\tfixedHeader: true\n\t} );\n} );\n\n]]></js><title lib=\"ColReorder\">FixedHeader integration</title><info><![CDATA[\n\nFixedHeader is a particularly useful plug-in for DataTables, allowing a table header to float at the top of a scrolling window. ColReorder works well with FixedHeader, allowing you to reorder columns even using the floating header, as shown in the example below.\n\n]]></info></dt-example>"
      - uri: file:///opt/input/source/src/main/resources/META-INF/resources/bower_components/datatables-colreorder/examples/integration/index.xml
        message: ""
        codeSnip: "  1  <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n  2  <dt-example order=\"0\">\n  3  \n  4  <title lib=\"ColReorder\">Integration</title>\n  5  \n  6  <info><![CDATA[\n  7  \n  8  The examples in this section demonstrate ColReorder being used with other DataTables extensions.\n  9  \n 10  ]]></info>\n 11  \n 12  </dt-example>\n"
        lineNumber: 4
        variables:
          data: ""
          innerText: |+
            Integration



            The examples in this section demonstrate ColReorder being used with other DataTables extensions.




          matchingXML: |-
            <?xml version="1.0" encoding="UTF-8"?><dt-example order="0"><title lib="ColReorder">Integration</title><info><![CDATA[

            The examples in this section demonstrate ColReorder being used with other DataTables extensions.

            ]]></info></dt-example>
      - uri: file:///opt/input/source/src/main/resources/META-INF/resources/bower_components/datatables-colreorder/examples/integration/responsive.xml
        message: ""
        codeSnip: "  1  <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n  2  <dt-example table-type=\"html-wide\" order=\"4\" table-class=\"display nowrap\">\n  3  \n  4  <css lib=\"datatables colreorder responsive\" />\n  5  <js lib=\"jquery datatables colreorder responsive\">\n  6  <![CDATA[\n  7  \n  8  $(document).ready(function() {\n  9  \tvar table = $('#example').dataTable( {\n 10  \t\tcolReorder: true,\n 11  \t\tresponsive: true,\n 12  \t\tcolumnDefs: [ {\n 13  \t\t\ttargets: 2,\n 14  \t\t\tresponsivePriority: 10001\n 15  \t\t} ]\n 16  \t} );\n 17  } );\n 18  \n 19  ]]>\n 20  </js>\n 21  \n 22  <title lib=\"ColReorder\">Responsive integration</title>\n 23  \n 24  <info><![CDATA[\n 25  \n 26  This example shows ColReorder being used with the [Responsive extension for DataTables](https://datatables.net/extensions/colreorder). The _\"Position\"_ column is the first to be hidden through the use of the `r-init columns.responsivePriority` option, and you'll be able to notice that the hidden column is automatically taken account of by ColReorder as the columns are reordered.\n 27  \n 28  ]]></info>\n 29  \n 30  </dt-example>\n"
        lineNumber: 8
        variables:
          data: ""
          innerText: "\n\n\n\n\n\n\n$(document).ready(function() {\n\tvar table = $('#example').dataTable( {\n\t\tcolReorder: true,\n\t\tresponsive: true,\n\t\tcolumnDefs: [ {\n\t\t\ttargets: 2,\n\t\t\tresponsivePriority: 10001\n\t\t} ]\n\t} );\n} );\n\n\n\n\nResponsive integration\n\n\n\nThis example shows ColReorder being used with the [Responsive extension for DataTables](https://datatables.net/extensions/colreorder). The _\"Position\"_ column is the first to be hidden through the use of the `r-init columns.responsivePriority` option, and you'll be able to notice that the hidden column is automatically taken account of by ColReorder as the columns are reordered.\n\n\n\n\n"
          matchingXML: "<?xml version=\"1.0\" encoding=\"UTF-8\"?><dt-example table-type=\"html-wide\" order=\"4\" table-class=\"display nowrap\"><css lib=\"datatables colreorder responsive\"></css><js lib=\"jquery datatables colreorder responsive\"><![CDATA[\n\n$(document).ready(function() {\n\tvar table = $('#example').dataTable( {\n\t\tcolReorder: true,\n\t\tresponsive: true,\n\t\tcolumnDefs: [ {\n\t\t\ttargets: 2,\n\t\t\tresponsivePriority: 10001\n\t\t} ]\n\t} );\n} );\n\n]]></js><title lib=\"ColReorder\">Responsive integration</title><info><![CDATA[\n\nThis example shows ColReorder being used with the [Responsive extension for DataTables](https://datatables.net/extensions/colreorder). The _\"Position\"_ column is the first to be hidden through the use of the `r-init columns.responsivePriority` option, and you'll be able to notice that the hidden column is automatically taken account of by ColReorder as the columns are reordered.\n\n]]></info></dt-example>"
      - uri: file:///opt/input/source/src/main/resources/META-INF/resources/bower_components/datatables-colreorder/examples/integration/server_side.xml
        message: ""
        codeSnip: "  1  <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n  2  <dt-example table-type=\"ssp\" order=\"5\">\n  3  \n  4  <css lib=\"datatables colreorder\" />\n  5  <js lib=\"jquery datatables colreorder\">\n  6  <![CDATA[\n  7  \n  8  $(document).ready(function() {\n  9  \t$('#example').dataTable( {\n 10  \t\tprocessing: true,\n 11  \t\tserverSide: true,\n 12  \t\tajax: \"../../../../examples/server_side/scripts/objects.php\",\n 13  \t\tcolumns: [\n 14  \t\t\t{ data: \"first_name\" },\n 15  \t\t\t{ data: \"last_name\" },\n 16  \t\t\t{ data: \"position\" },\n 17  \t\t\t{ data: \"office\" },\n 18  \t\t\t{ data: \"start_date\" },\n 19  \t\t\t{ data: \"salary\" }\n 20  \t\t],\n 21  \t\tcolReorder: true\n 22  \t} );\n 23  } );\n 24  \n 25  ]]>\n 26  </js>\n 27  \n 28  <title lib=\"ColReorder\">Server-side processing</title>\n 29  \n 30  <info><![CDATA[\n 31  \n 32  Server-side processing can be exceptionally useful in DataTables when dealing with massive data sets, and ColReorder works with this as would be expected.\n 33  \n 34  It is recommend that you use object based data with server-side processing and ColReorder, as this provides easily understandable mapping between the the columns and the data relation on the server, otherwise you need to work out array indexes on each call!\n 35  \n 36  ]]></info>\n 37  \n 38  </dt-example>\n"
        lineNumber: 8
        variables:
          data: ""
          innerText: "\n\n\n\n\n\n\n$(document).ready(function() {\n\t$('#example').dataTable( {\n\t\tprocessing: true,\n\t\tserverSide: true,\n\t\tajax: \"../../../../examples/server_side/scripts/objects.php\",\n\t\tcolumns: [\n\t\t\t{ data: \"first_name\" },\n\t\t\t{ data: \"last_name\" },\n\t\t\t{ data: \"position\" },\n\t\t\t{ data: \"office\" },\n\t\t\t{ data: \"start_date\" },\n\t\t\t{ data: \"salary\" }\n\t\t],\n\t\tcolReorder: true\n\t} );\n} );\n\n\n\n\nServer-side processing\n\n\n\nServer-side processing can be exceptionally useful in DataTables when dealing with massive data sets, and ColReorder works with this as would be expected.\n\nIt is recommend that you use object based data with server-side processing and ColReorder, as this provides easily understandable mapping between the the columns and the data relation on the server, otherwise you need to work out array indexes on each call!\n\n\n\n\n"
          matchingXML: "<?xml version=\"1.0\" encoding=\"UTF-8\"?><dt-example table-type=\"ssp\" order=\"5\"><css lib=\"datatables colreorder\"></css><js lib=\"jquery datatables colreorder\"><![CDATA[\n\n$(document).ready(function() {\n\t$('#example').dataTable( {\n\t\tprocessing: true,\n\t\tserverSide: true,\n\t\tajax: \"../../../../examples/server_side/scripts/objects.php\",\n\t\tcolumns: [\n\t\t\t{ data: \"first_name\" },\n\t\t\t{ data: \"last_name\" },\n\t\t\t{ data: \"position\" },\n\t\t\t{ data: \"office\" },\n\t\t\t{ data: \"start_date\" },\n\t\t\t{ data: \"salary\" }\n\t\t],\n\t\tcolReorder: true\n\t} );\n} );\n\n]]></js><title lib=\"ColReorder\">Server-side processing</title><info><![CDATA[\n\nServer-side processing can be exceptionally useful in DataTables when dealing with massive data sets, and ColReorder works with this as would be expected.\n\nIt is recommend that you use object based data with server-side processing and ColReorder, as this provides easily understandable mapping between the the columns and the data relation on the server, otherwise you need to work out array indexes on each call!\n\n]]></info></dt-example>"
      - uri: file:///opt/input/source/src/main/resources/META-INF/resources/bower_components/datatables-colreorder/examples/integration/state_save.xml
        message: ""
        codeSnip: "  1  <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n  2  <dt-example table-type=\"html\" order=\"6\">\n  3  \n  4  <css lib=\"datatables colreorder\" />\n  5  <js lib=\"jquery datatables colreorder\">\n  6  <![CDATA[\n  7  \n  8  $(document).ready(function() {\n  9  \t$('#example').dataTable( {\n 10  \t\tcolReorder: true,\n 11  \t\tstateSave:  true\n 12  \t} );\n 13  } );\n 14  \n 15  ]]>\n 16  </js>\n 17  \n 18  <title lib=\"ColReorder\">State saving</title>\n 19  \n 20  <info><![CDATA[\n 21  \n 22  A useful interaction pattern to use in DataTables is state saving, so when the end user reloads or revisits a page its previous state is retained. ColReorder works seamlessly with state saving in DataTables (`dt-init stateSave`), remembering and restoring the column positions, as well as everything else such as sorting and filtering.\n 23  \n 24  ]]></info>\n 25  \n 26  </dt-example>\n"
        lineNumber: 8
        variables:
          data: ""
          innerText: "\n\n\n\n\n\n\n$(document).ready(function() {\n\t$('#example').dataTable( {\n\t\tcolReorder: true,\n\t\tstateSave:  true\n\t} );\n} );\n\n\n\n\nState saving\n\n\n\nA useful interaction pattern to use in DataTables is state saving, so when the end user reloads or revisits a page its previous state is retained. ColReorder works seamlessly with state saving in DataTables (`dt-init stateSave`), remembering and restoring the column positions, as well as everything else such as sorting and filtering.\n\n\n\n\n"
          matchingXML: "<?xml version=\"1.0\" encoding=\"UTF-8\"?><dt-example table-type=\"html\" order=\"6\"><css lib=\"datatables colreorder\"></css><js lib=\"jquery datatables colreorder\"><![CDATA[\n\n$(document).ready(function() {\n\t$('#example').dataTable( {\n\t\tcolReorder: true,\n\t\tstateSave:  true\n\t} );\n} );\n\n]]></js><title lib=\"ColReorder\">State saving</title><info><![CDATA[\n\nA useful interaction pattern to use in DataTables is state saving, so when the end user reloads or revisits a page its previous state is retained. ColReorder works seamlessly with state saving in DataTables (`dt-init stateSave`), remembering and restoring the column positions, as well as everything else such as sorting and filtering.\n\n]]></info></dt-example>"
      - uri: file:///opt/input/source/src/main/resources/META-INF/resources/bower_components/datatables-colreorder/examples/styling/alt_insert.xml
        message: ""
        codeSnip: "  1  <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n  2  <dt-example table-type=\"html\" order=\"1\">\n  3  \n  4  <css lib=\"datatables colreorder\">\n  5  \tdiv.DTCR_pointer {\n  6  \t\tmargin-left: -10px;\n  7  \t\twidth: 0;\n  8  \t\theight: 0 !important;\n  9  \t\tborder-style: solid;\n 10  \t\tborder-width: 10px 10px 0 10px;\n 11  \t\tborder-color: #0259c4 transparent transparent transparent;\n 12  \t\tbackground: transparent;\n 13  \t}\n 14  </css>\n 15  <js lib=\"jquery datatables colreorder\">\n 16  <![CDATA[\n 17  $(document).ready(function() {\n 18  \t$('#example').DataTable( {\n 19  \t\tcolReorder: true\n 20  \t} );\n 21  } );\n 22  ]]>\n 23  </js>\n 24  \n 25  <title lib=\"ColReorder\">Alternative insert styling</title>\n 26  \n 27  <info><![CDATA[\n 28  \n 29  Using CSS it is easy to modify the insert bar to suit your web-site. This example shows how CSS can be used to display an insert arrow pointer while dragging a column. Equally an image could be used for more complex visual insert pointers if required.\n 30  \n 31  ]]></info>\n 32  \n 33  </dt-example>\n"
        lineNumber: 5
        variables:
          data: ""
          innerText: "\n\n\n\n\tdiv.DTCR_pointer {\n\t\tmargin-left: -10px;\n\t\twidth: 0;\n\t\theight: 0 !important;\n\t\tborder-style: solid;\n\t\tborder-width: 10px 10px 0 10px;\n\t\tborder-color: #0259c4 transparent transparent transparent;\n\t\tbackground: transparent;\n\t}\n\n\n\n$(document).ready(function() {\n\t$('#example').DataTable( {\n\t\tcolReorder: true\n\t} );\n} );\n\n\n\nAlternative insert styling\n\n\n\nUsing CSS it is easy to modify the insert bar to suit your web-site. This example shows how CSS can be used to display an insert arrow pointer while dragging a column. Equally an image could be used for more complex visual insert pointers if required.\n\n\n\n\n"
          matchingXML: "<?xml version=\"1.0\" encoding=\"UTF-8\"?><dt-example table-type=\"html\" order=\"1\"><css lib=\"datatables colreorder\">div.DTCR_pointer {\n\t\tmargin-left: -10px;\n\t\twidth: 0;\n\t\theight: 0 !important;\n\t\tborder-style: solid;\n\t\tborder-width: 10px 10px 0 10px;\n\t\tborder-color: #0259c4 transparent transparent transparent;\n\t\tbackground: transparent;\n\t}</css><js lib=\"jquery datatables colreorder\"><![CDATA[\n$(document).ready(function() {\n\t$('#example').DataTable( {\n\t\tcolReorder: true\n\t} );\n} );\n]]></js><title lib=\"ColReorder\">Alternative insert styling</title><info><![CDATA[\n\nUsing CSS it is easy to modify the insert bar to suit your web-site. This example shows how CSS can be used to display an insert arrow pointer while dragging a column. Equally an image could be used for more complex visual insert pointers if required.\n\n]]></info></dt-example>"
      - uri: file:///opt/input/source/src/main/resources/META-INF/resources/bower_components/datatables-colreorder/examples/styling/bootstrap.xml
        message: ""
        codeSnip: "  1  <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n  2  <dt-example table-type=\"html\" table-class=\"display\" order=\"2\" framework=\"bootstrap\">\n  3  \n  4  <css lib=\"datatables colreorder\"/>\n  5  <js lib=\"jquery datatables colreorder\">\n  6  <![CDATA[\n  7  \n  8  $(document).ready(function() {\n  9  \t$('#example').DataTable( {\n 10  \t\tcolReorder: true\n 11  \t} );\n 12  } );\n 13  \n 14  ]]>\n 15  </js>\n 16  \n 17  <title lib=\"ColReorder\">Bootstrap styling</title>\n 18  \n 19  <info><![CDATA[\n 20  \n 21  This example shows DataTables and the ColReorder extension being used with the [Bootstrap](http://getbootstrap.com) framework providing the styling. The [DataTables / Bootstrap integration](//datatables.net/manual/styling/bootstrap) provides seamless integration for DataTables to be used in a Bootstrap page.\n 22  \n 23  ]]></info>\n 24  \n 25  </dt-example>\n 26  \n"
        lineNumber: 8
        variables:
          data: ""
          innerText: "\n\n\n\n\n\n\n$(document).ready(function() {\n\t$('#example').DataTable( {\n\t\tcolReorder: true\n\t} );\n} );\n\n\n\n\nBootstrap styling\n\n\n\nThis example shows DataTables and the ColReorder extension being used with the [Bootstrap](http://getbootstrap.com) framework providing the styling. The [DataTables / Bootstrap integration](//datatables.net/manual/styling/bootstrap) provides seamless integration for DataTables to be used in a Bootstrap page.\n\n\n\n\n\n"
          matchingXML: "<?xml version=\"1.0\" encoding=\"UTF-8\"?><dt-example table-type=\"html\" table-class=\"display\" order=\"2\" framework=\"bootstrap\"><css lib=\"datatables colreorder\"></css><js lib=\"jquery datatables colreorder\"><![CDATA[\n\n$(document).ready(function() {\n\t$('#example').DataTable( {\n\t\tcolReorder: true\n\t} );\n} );\n\n]]></js><title lib=\"ColReorder\">Bootstrap styling</title><info><![CDATA[\n\nThis example shows DataTables and the ColReorder extension being used with the [Bootstrap](http://getbootstrap.com) framework providing the styling. The [DataTables / Bootstrap integration](//datatables.net/manual/styling/bootstrap) provides seamless integration for DataTables to be used in a Bootstrap page.\n\n]]></info></dt-example>"
      - uri: file:///opt/input/source/src/main/resources/META-INF/resources/bower_components/datatables-colreorder/examples/styling/bootstrap4.xml
        message: ""
        codeSnip: "  1  <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n  2  <dt-example table-type=\"html\" table-class=\"display\" order=\"3\" framework=\"bootstrap4\">\n  3  \n  4  <css lib=\"datatables colreorder\"/>\n  5  <js lib=\"jquery datatables colreorder\">\n  6  <![CDATA[\n  7  \n  8  $(document).ready(function() {\n  9  \t$('#example').DataTable( {\n 10  \t\tcolReorder: true\n 11  \t} );\n 12  } );\n 13  \n 14  ]]>\n 15  </js>\n 16  \n 17  <title lib=\"ColReorder\">Bootstrap 4 styling</title>\n 18  \n 19  <info><![CDATA[\n 20  \n 21  This example shows DataTables and the ColReorder extension being used with [Bootstrap 4](http://getbootstrap.com) providing the styling. The DataTables / Bootstrap integration provides seamless integration for DataTables to be used in a Bootstrap 4 page.\n 22  \n 23  ]]></info>\n 24  \n 25  </dt-example>\n 26  \n"
        lineNumber: 8
        variables:
          data: ""
          innerText: "\n\n\n\n\n\n\n$(document).ready(function() {\n\t$('#example').DataTable( {\n\t\tcolReorder: true\n\t} );\n} );\n\n\n\n\nBootstrap 4 styling\n\n\n\nThis example shows DataTables and the ColReorder extension being used with [Bootstrap 4](http://getbootstrap.com) providing the styling. The DataTables / Bootstrap integration provides seamless integration for DataTables to be used in a Bootstrap 4 page.\n\n\n\n\n\n"
          matchingXML: "<?xml version=\"1.0\" encoding=\"UTF-8\"?><dt-example table-type=\"html\" table-class=\"display\" order=\"3\" framework=\"bootstrap4\"><css lib=\"datatables colreorder\"></css><js lib=\"jquery datatables colreorder\"><![CDATA[\n\n$(document).ready(function() {\n\t$('#example').DataTable( {\n\t\tcolReorder: true\n\t} );\n} );\n\n]]></js><title lib=\"ColReorder\">Bootstrap 4 styling</title><info><![CDATA[\n\nThis example shows DataTables and the ColReorder extension being used with [Bootstrap 4](http://getbootstrap.com) providing the styling. The DataTables / Bootstrap integration provides seamless integration for DataTables to be used in a Bootstrap 4 page.\n\n]]></info></dt-example>"
      - uri: file:///opt/input/source/src/main/resources/META-INF/resources/bower_components/datatables-colreorder/examples/styling/foundation.xml
        message: ""
        codeSnip: "  1  <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n  2  <dt-example table-type=\"html\" table-class=\"display\" order=\"4\" framework=\"foundation\">\n  3  \n  4  <css lib=\"datatables colreorder\"/>\n  5  <js lib=\"jquery datatables colreorder\">\n  6  <![CDATA[\n  7  \n  8  $(document).ready(function() {\n  9  \t$('#example').DataTable( {\n 10  \t\tcolReorder: true\n 11  \t} );\n 12  } );\n 13  \n 14  ]]>\n 15  </js>\n 16  \n 17  <title lib=\"ColReorder\">Foundation styling</title>\n 18  \n 19  <info><![CDATA[\n 20  \n 21  This example shows DataTables and the ColReorder extension being used with the [Foundation](http://foundation.zurb.com) framework providing the styling. The [DataTables / Foundation integration](//datatables.net/manual/styling/foundation) prove seamless integration for DataTables to be used in a Foundation page.\n 22  \n 23  ]]></info>\n 24  \n 25  </dt-example>\n 26  \n"
        lineNumber: 8
        variables:
          data: ""
          innerText: "\n\n\n\n\n\n\n$(document).ready(function() {\n\t$('#example').DataTable( {\n\t\tcolReorder: true\n\t} );\n} );\n\n\n\n\nFoundation styling\n\n\n\nThis example shows DataTables and the ColReorder extension being used with the [Foundation](http://foundation.zurb.com) framework providing the styling. The [DataTables / Foundation integration](//datatables.net/manual/styling/foundation) prove seamless integration for DataTables to be used in a Foundation page.\n\n\n\n\n\n"
          matchingXML: "<?xml version=\"1.0\" encoding=\"UTF-8\"?><dt-example table-type=\"html\" table-class=\"display\" order=\"4\" framework=\"foundation\"><css lib=\"datatables colreorder\"></css><js lib=\"jquery datatables colreorder\"><![CDATA[\n\n$(document).ready(function() {\n\t$('#example').DataTable( {\n\t\tcolReorder: true\n\t} );\n} );\n\n]]></js><title lib=\"ColReorder\">Foundation styling</title><info><![CDATA[\n\nThis example shows DataTables and the ColReorder extension being used with the [Foundation](http://foundation.zurb.com) framework providing the styling. The [DataTables / Foundation integration](//datatables.net/manual/styling/foundation) prove seamless integration for DataTables to be used in a Foundation page.\n\n]]></info></dt-example>"
      - uri: file:///opt/input/source/src/main/resources/META-INF/resources/bower_components/datatables-colreorder/examples/styling/index.xml
        message: ""
        codeSnip: "  1  <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n  2  <dt-example order=\"0\">\n  3  \n  4  <title lib=\"ColReorder\">Styling</title>\n  5  \n  6  <info><![CDATA[\n  7  \n  8  Like all DataTables components ColReorder can be styling to integrate seamlessly with Bootstrap, Foundation and other CSS frameworks. These examples in this section demonstrate this.\n  9  \n 10  ]]></info>\n 11  \n 12  </dt-example>\n"
        lineNumber: 4
        variables:
          data: ""
          innerText: |+
            Styling



            Like all DataTables components ColReorder can be styling to integrate seamlessly with Bootstrap, Foundation and other CSS frameworks. These examples in this section demonstrate this.




          matchingXML: |-
            <?xml version="1.0" encoding="UTF-8"?><dt-example order="0"><title lib="ColReorder">Styling</title><info><![CDATA[

            Like all DataTables components ColReorder can be styling to integrate seamlessly with Bootstrap, Foundation and other CSS frameworks. These examples in this section demonstrate this.

            ]]></info></dt-example>
      - uri: file:///opt/input/source/src/main/resources/META-INF/resources/bower_components/datatables-colreorder/examples/styling/jqueryui.xml
        message: ""
        codeSnip: "  1  <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n  2  <dt-example table-type=\"html\" table-class=\"display\" order=\"6\" framework=\"jqueryui\">\n  3  \n  4  <css lib=\"datatables colreorder\"/>\n  5  <js lib=\"jquery datatables colreorder\">\n  6  <![CDATA[\n  7  \n  8  $(document).ready(function() {\n  9  \t$('#example').DataTable( {\n 10  \t\tcolReorder: true\n 11  \t} );\n 12  } );\n 13  \n 14  ]]>\n 15  </js>\n 16  \n 17  <title lib=\"ColReorder\">jQuery UI styling</title>\n 18  \n 19  <info><![CDATA[\n 20  \n 21  This example shows DataTables and ColReorder being used with [jQuery UI](http://jqueryui.com/) providing the base styling information.\n 22  \n 23  ]]></info>\n 24  \n 25  </dt-example>\n 26  \n"
        lineNumber: 8
        variables:
          data: ""
          innerText: "\n\n\n\n\n\n\n$(document).ready(function() {\n\t$('#example').DataTable( {\n\t\tcolReorder: true\n\t} );\n} );\n\n\n\n\njQuery UI styling\n\n\n\nThis example shows DataTables and ColReorder being used with [jQuery UI](http://jqueryui.com/) providing the base styling information.\n\n\n\n\n\n"
          matchingXML: "<?xml version=\"1.0\" encoding=\"UTF-8\"?><dt-example table-type=\"html\" table-class=\"display\" order=\"6\" framework=\"jqueryui\"><css lib=\"datatables colreorder\"></css><js lib=\"jquery datatables colreorder\"><![CDATA[\n\n$(document).ready(function() {\n\t$('#example').DataTable( {\n\t\tcolReorder: true\n\t} );\n} );\n\n]]></js><title lib=\"ColReorder\">jQuery UI styling</title><info><![CDATA[\n\nThis example shows DataTables and ColReorder being used with [jQuery UI](http://jqueryui.com/) providing the base styling information.\n\n]]></info></dt-example>"
      - uri: file:///opt/input/source/src/main/resources/META-INF/resources/bower_components/datatables-colreorder/examples/styling/semanticui.xml
        message: ""
        codeSnip: "  1  <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n  2  <dt-example table-type=\"html\" table-class=\"display\" order=\"5\" framework=\"semanticui\">\n  3  \n  4  <css lib=\"datatables colreorder\"/>\n  5  <js lib=\"jquery datatables colreorder\">\n  6  <![CDATA[\n  7  \n  8  $(document).ready(function() {\n  9  \t$('#example').DataTable( {\n 10  \t\tcolReorder: true\n 11  \t} );\n 12  } );\n 13  \n 14  ]]>\n 15  </js>\n 16  \n 17  <title lib=\"ColReorder\">Semantic UI styling</title>\n 18  \n 19  <info><![CDATA[\n 20  \n 21  This example shows DataTables and ColReorder being used with [Semantic UI](http://semantic-ui.com) providing the styling. The DataTables / Semantic UI integration provides seamless integration for DataTables to be used in a Semantic UI page.\n 22  \n 23  ]]></info>\n 24  \n 25  </dt-example>\n 26  \n"
        lineNumber: 8
        variables:
          data: ""
          innerText: "\n\n\n\n\n\n\n$(document).ready(function() {\n\t$('#example').DataTable( {\n\t\tcolReorder: true\n\t} );\n} );\n\n\n\n\nSemantic UI styling\n\n\n\nThis example shows DataTables and ColReorder being used with [Semantic UI](http://semantic-ui.com) providing the styling. The DataTables / Semantic UI integration provides seamless integration for DataTables to be used in a Semantic UI page.\n\n\n\n\n\n"
          matchingXML: "<?xml version=\"1.0\" encoding=\"UTF-8\"?><dt-example table-type=\"html\" table-class=\"display\" order=\"5\" framework=\"semanticui\"><css lib=\"datatables colreorder\"></css><js lib=\"jquery datatables colreorder\"><![CDATA[\n\n$(document).ready(function() {\n\t$('#example').DataTable( {\n\t\tcolReorder: true\n\t} );\n} );\n\n]]></js><title lib=\"ColReorder\">Semantic UI styling</title><info><![CDATA[\n\nThis example shows DataTables and ColReorder being used with [Semantic UI](http://semantic-ui.com) providing the styling. The DataTables / Semantic UI integration provides seamless integration for DataTables to be used in a Semantic UI page.\n\n]]></info></dt-example>"
      - uri: file:///opt/input/source/src/main/resources/META-INF/resources/bower_components/datatables-colvis/examples/button_order.xml
        message: ""
        codeSnip: "  1  <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n  2  <dt-example table-type=\"html\" order=\"6\">\n  3  \n  4  <css lib=\"datatables colvis\" />\n  5  <js lib=\"jquery datatables colvis\">\n  6  <![CDATA[\n  7  $(document).ready(function() {\n  8  \t$('#example').DataTable( {\n  9  \t\tdom: 'C<\"clear\">lfrtip',\n 10  \t\tcolVis: {\n 11  \t\t\torder: 'alpha'\n 12  \t\t}\n 13  \t} );\n 14  } );\n 15  ]]>\n 16  </js>\n 17  \n 18  <title lib=\"ColVis\">Button ordering</title>\n 19  \n 20  <info><![CDATA[\n 21  \n 22  The list of columns that ColVis displays has two options for the order in which they are displayed. The default mode of operation is to show the buttons in the same order as they appear in the HTML table, but the second mode of operation is to show the buttons in alphabetical order. This is done by specifying the `order` option, set to `alpha`. Alphabetical button ordering is shown in this example.\n 23  \n 24  ]]></info>\n 25  \n 26  </dt-example>\n"
        lineNumber: 7
        variables:
          data: ""
          innerText: "\n\n\n\n\n\n$(document).ready(function() {\n\t$('#example').DataTable( {\n\t\tdom: 'C<\"clear\">lfrtip',\n\t\tcolVis: {\n\t\t\torder: 'alpha'\n\t\t}\n\t} );\n} );\n\n\n\nButton ordering\n\n\n\nThe list of columns that ColVis displays has two options for the order in which they are displayed. The default mode of operation is to show the buttons in the same order as they appear in the HTML table, but the second mode of operation is to show the buttons in alphabetical order. This is done by specifying the `order` option, set to `alpha`. Alphabetical button ordering is shown in this example.\n\n\n\n\n"
          matchingXML: "<?xml version=\"1.0\" encoding=\"UTF-8\"?><dt-example table-type=\"html\" order=\"6\"><css lib=\"datatables colvis\"></css><js lib=\"jquery datatables colvis\"><![CDATA[\n$(document).ready(function() {\n\t$('#example').DataTable( {\n\t\tdom: 'C<\"clear\">lfrtip',\n\t\tcolVis: {\n\t\t\torder: 'alpha'\n\t\t}\n\t} );\n} );\n]]></js><title lib=\"ColVis\">Button ordering</title><info><![CDATA[\n\nThe list of columns that ColVis displays has two options for the order in which they are displayed. The default mode of operation is to show the buttons in the same order as they appear in the HTML table, but the second mode of operation is to show the buttons in alphabetical order. This is done by specifying the `order` option, set to `alpha`. Alphabetical button ordering is shown in this example.\n\n]]></info></dt-example>"
      - uri: file:///opt/input/source/src/main/resources/META-INF/resources/bower_components/datatables-colvis/examples/exclude_columns.xml
        message: ""
        codeSnip: "  1  <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n  2  <dt-example table-type=\"html\" order=\"4\">\n  3  \n  4  <css lib=\"datatables colvis\" />\n  5  <js lib=\"jquery datatables colvis\">\n  6  <![CDATA[\n  7  $(document).ready(function() {\n  8  \t$('#example').DataTable( {\n  9  \t\tdom: 'C<\"clear\">lfrtip',\n 10  \t\tcolVis: {\n 11  \t\t\texclude: [ 0 ]\n 12  \t\t}\n 13  \t} );\n 14  } );\n 15  ]]>\n 16  </js>\n 17  \n 18  <title lib=\"ColVis\">Exclude columns from list</title>\n 19  \n 20  <info><![CDATA[\n 21  \n 22  It can at times be useful to exclude columns from being in the 'show / hide' list (for example if you have hidden information that the end user shouldn't be able to make visible. This can be done by the `exclude` ColVis configuration parameter when creating the DataTable. This is simply an array of integers, indicating which columns should be excluded. This example shows the first column being excluded.\n 23  \n 24  For full information about the ColVis options, please refer to the [ColVis options documentation](//datatables.net/extensions/colvis/options).\n 25  \n 26  ]]></info>\n 27  \n 28  </dt-example>\n"
        lineNumber: 7
        variables:
          data: ""
          innerText: "\n\n\n\n\n\n$(document).ready(function() {\n\t$('#example').DataTable( {\n\t\tdom: 'C<\"clear\">lfrtip',\n\t\tcolVis: {\n\t\t\texclude: [ 0 ]\n\t\t}\n\t} );\n} );\n\n\n\nExclude columns from list\n\n\n\nIt can at times be useful to exclude columns from being in the 'show / hide' list (for example if you have hidden information that the end user shouldn't be able to make visible. This can be done by the `exclude` ColVis configuration parameter when creating the DataTable. This is simply an array of integers, indicating which columns should be excluded. This example shows the first column being excluded.\n\nFor full information about the ColVis options, please refer to the [ColVis options documentation](//datatables.net/extensions/colvis/options).\n\n\n\n\n"
          matchingXML: "<?xml version=\"1.0\" encoding=\"UTF-8\"?><dt-example table-type=\"html\" order=\"4\"><css lib=\"datatables colvis\"></css><js lib=\"jquery datatables colvis\"><![CDATA[\n$(document).ready(function() {\n\t$('#example').DataTable( {\n\t\tdom: 'C<\"clear\">lfrtip',\n\t\tcolVis: {\n\t\t\texclude: [ 0 ]\n\t\t}\n\t} );\n} );\n]]></js><title lib=\"ColVis\">Exclude columns from list</title><info><![CDATA[\n\nIt can at times be useful to exclude columns from being in the 'show / hide' list (for example if you have hidden information that the end user shouldn't be able to make visible. This can be done by the `exclude` ColVis configuration parameter when creating the DataTable. This is simply an array of integers, indicating which columns should be excluded. This example shows the first column being excluded.\n\nFor full information about the ColVis options, please refer to the [ColVis options documentation](//datatables.net/extensions/colvis/options).\n\n]]></info></dt-example>"
      - uri: file:///opt/input/source/src/main/resources/META-INF/resources/bower_components/datatables-colvis/examples/group_columns.xml
        message: ""
        codeSnip: "  1  <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n  2  <dt-example table-type=\"html\" order=\"8\">\n  3  \n  4  <css lib=\"datatables colvis\" />\n  5  <js lib=\"jquery datatables colvis\">\n  6  <![CDATA[\n  7  $(document).ready(function() {\n  8  \t$('#example').DataTable( {\n  9  \t\tdom: 'C<\"clear\">lfrtip',\n 10  \t\tcolVis: {\n 11  \t\t\texclude: [],\n 12  \t\t\tgroups: [\n 13  \t\t\t\t{\n 14  \t\t\t\t\ttitle: \"Engine\",\n 15  \t\t\t\t\tcolumns: [ 0, 3 ]\n 16  \t\t\t\t},\n 17  \t\t\t\t{\n 18  \t\t\t\t\ttitle: \"Client\",\n 19  \t\t\t\t\tcolumns: [ 1, 2 ]\n 20  \t\t\t\t}\n 21  \t\t\t]\n 22  \t\t}\n 23  \t} );\n 24  } );\n 25  ]]>\n 26  </js>\n 27  \n 28  <title lib=\"ColVis\">Group columns</title>\n 29  \n 30  <info><![CDATA[\n 31  \n 32  It can be useful at times to show and hide multiple columns together - i.e. grouping them together. Groupings are defined by the `groups` array. Create a group button by naming it (using the `title` option) and specifying by index which columns belong to it (using the `columns` option).\n 33  \n 34  Note also that this ability to create groups can be used in combination `exclude` to remove individual columns from the list (should you wish them to only be used in the groups), or set `exclude = [ 'all' ]` to show only the grouping buttons (i.e. individual column control buttons will not be shown).\n 35  \n 36  For full information about the ColVis options, please refer to the [ColVis options documentation](//datatables.net/extensions/colvis/options).\n 37  \n 38  ]]></info>\n 39  \n 40  </dt-example>\n"
        lineNumber: 7
        variables:
          data: ""
          innerText: "\n\n\n\n\n\n$(document).ready(function() {\n\t$('#example').DataTable( {\n\t\tdom: 'C<\"clear\">lfrtip',\n\t\tcolVis: {\n\t\t\texclude: [],\n\t\t\tgroups: [\n\t\t\t\t{\n\t\t\t\t\ttitle: \"Engine\",\n\t\t\t\t\tcolumns: [ 0, 3 ]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttitle: \"Client\",\n\t\t\t\t\tcolumns: [ 1, 2 ]\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t} );\n} );\n\n\n\nGroup columns\n\n\n\nIt can be useful at times to show and hide multiple columns together - i.e. grouping them together. Groupings are defined by the `groups` array. Create a group button by naming it (using the `title` option) and specifying by index which columns belong to it (using the `columns` option).\n\nNote also that this ability to create groups can be used in combination `exclude` to remove individual columns from the list (should you wish them to only be used in the groups), or set `exclude = [ 'all' ]` to show only the grouping buttons (i.e. individual column control buttons will not be shown).\n\nFor full information about the ColVis options, please refer to the [ColVis options documentation](//datatables.net/extensions/colvis/options).\n\n\n\n\n"
          matchingXML: "<?xml version=\"1.0\" encoding=\"UTF-8\"?><dt-example table-type=\"html\" order=\"8\"><css lib=\"datatables colvis\"></css><js lib=\"jquery datatables colvis\"><![CDATA[\n$(document).ready(function() {\n\t$('#example').DataTable( {\n\t\tdom: 'C<\"clear\">lfrtip',\n\t\tcolVis: {\n\t\t\texclude: [],\n\t\t\tgroups: [\n\t\t\t\t{\n\t\t\t\t\ttitle: \"Engine\",\n\t\t\t\t\tcolumns: [ 0, 3 ]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttitle: \"Client\",\n\t\t\t\t\tcolumns: [ 1, 2 ]\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t} );\n} );\n]]></js><title lib=\"ColVis\">Group columns</title><info><![CDATA[\n\nIt can be useful at times to show and hide multiple columns together - i.e. grouping them together. Groupings are defined by the `groups` array. Create a group button by naming it (using the `title` option) and specifying by index which columns belong to it (using the `columns` option).\n\nNote also that this ability to create groups can be used in combination `exclude` to remove individual columns from the list (should you wish them to only be used in the groups), or set `exclude = [ 'all' ]` to show only the grouping buttons (i.e. individual column control buttons will not be shown).\n\nFor full information about the ColVis options, please refer to the [ColVis options documentation](//datatables.net/extensions/colvis/options).\n\n]]></info></dt-example>"
      - uri: file:///opt/input/source/src/main/resources/META-INF/resources/bower_components/datatables-colvis/examples/index.xml
        message: ""
        codeSnip: "  1  <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n  2  <dt-example table-type=\"html\" order=\"0\">\n  3  \n  4  <title lib=\"ColVis\">ColVis examples</title>\n  5  \n  6  <js lib=\"jquery\" />\n  7  <info><![CDATA[\n  8  \n  9  ColVis adds a button to the toolbars around DataTables which gives the end user of the table the ability to dynamically change the visibility of the columns in the table:\n 10  \n 11  * Dynamically show and hide columns in a table\n 12  * Very easy integration with DataTables\n 13  * Ability to exclude columns from being either hidden or shown\n 14  * Save saving integration with DataTables\n 15  \n 16  ]]></info>\n 17  \n 18  </dt-example>\n"
        lineNumber: 1
        variables:
          data: ""
          innerText: |+
            ColVis examples




            ColVis adds a button to the toolbars around DataTables which gives the end user of the table the ability to dynamically change the visibility of the columns in the table:

            * Dynamically show and hide columns in a table
            * Very easy integration with DataTables
            * Ability to exclude columns from being either hidden or shown
            * Save saving integration with DataTables




          matchingXML: |-
            <?xml version="1.0" encoding="UTF-8"?><dt-example table-type="html" order="0"><title lib="ColVis">ColVis examples</title><js lib="jquery"></js><info><![CDATA[

            ColVis adds a button to the toolbars around DataTables which gives the end user of the table the ability to dynamically change the visibility of the columns in the table:

            * Dynamically show and hide columns in a table
            * Very easy integration with DataTables
            * Ability to exclude columns from being either hidden or shown
            * Save saving integration with DataTables

            ]]></info></dt-example>
      - uri: file:///opt/input/source/src/main/resources/META-INF/resources/bower_components/datatables-colvis/examples/jqueryui.xml
        message: ""
        codeSnip: "  1  <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n  2  <dt-example table-type=\"html\" order=\"12\">\n  3  \n  4  <css lib=\"jqueryui datatables-jqueryui colvis-jqueryui\" />\n  5  <js lib=\"jquery datatables datatables-jqueryui colvis\">\n  6  <![CDATA[\n  7  $(document).ready(function() {\n  8  \tvar table = $('#example').DataTable( {\n  9  \t\tjQueryUI: true\n 10  \t} );\n 11  \tvar colvis = new $.fn.dataTable.ColVis( table );\n 12  \n 13  \t$( colvis.button() ).insertBefore('div.dataTables_length');\n 14  } );\n 15  ]]>\n 16  </js>\n 17  \n 18  <title lib=\"ColVis\">jQuery UI styling</title>\n 19  \n 20  <info><![CDATA[\n 21  \n 22  This example shows how the jQuery UI ThemeRoller option in DataTables can be used with ColVis.\n 23  \n 24  The important thing to note here is that it is easier to use `new $.fn.dataTable.ColVis()` to add ColVis to the table rather than `dt-init dom` as the jQuery UI integration uses a complex expression for `dt-init dom`.\n 25  \n 26  ]]></info>\n 27  \n 28  </dt-example>\n"
        lineNumber: 7
        variables:
          data: ""
          innerText: "\n\n\n\n\n\n$(document).ready(function() {\n\tvar table = $('#example').DataTable( {\n\t\tjQueryUI: true\n\t} );\n\tvar colvis = new $.fn.dataTable.ColVis( table );\n\n\t$( colvis.button() ).insertBefore('div.dataTables_length');\n} );\n\n\n\njQuery UI styling\n\n\n\nThis example shows how the jQuery UI ThemeRoller option in DataTables can be used with ColVis.\n\nThe important thing to note here is that it is easier to use `new $.fn.dataTable.ColVis()` to add ColVis to the table rather than `dt-init dom` as the jQuery UI integration uses a complex expression for `dt-init dom`.\n\n\n\n\n"
          matchingXML: "<?xml version=\"1.0\" encoding=\"UTF-8\"?><dt-example table-type=\"html\" order=\"12\"><css lib=\"jqueryui datatables-jqueryui colvis-jqueryui\"></css><js lib=\"jquery datatables datatables-jqueryui colvis\"><![CDATA[\n$(document).ready(function() {\n\tvar table = $('#example').DataTable( {\n\t\tjQueryUI: true\n\t} );\n\tvar colvis = new $.fn.dataTable.ColVis( table );\n\n\t$( colvis.button() ).insertBefore('div.dataTables_length');\n} );\n]]></js><title lib=\"ColVis\">jQuery UI styling</title><info><![CDATA[\n\nThis example shows how the jQuery UI ThemeRoller option in DataTables can be used with ColVis.\n\nThe important thing to note here is that it is easier to use `new $.fn.dataTable.ColVis()` to add ColVis to the table rather than `dt-init dom` as the jQuery UI integration uses a complex expression for `dt-init dom`.\n\n]]></info></dt-example>"
      - uri: file:///opt/input/source/src/main/resources/META-INF/resources/bower_components/datatables-colvis/examples/mouseover.xml
        message: ""
        codeSnip: "  1  <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n  2  <dt-example table-type=\"html\" order=\"7\">\n  3  \n  4  <css lib=\"datatables colvis\" />\n  5  <js lib=\"jquery datatables colvis\">\n  6  <![CDATA[\n  7  $(document).ready(function() {\n  8  \t$('#example').DataTable( {\n  9  \t\tdom: 'C<\"clear\">lfrtip',\n 10  \t\tcolVis: {\n 11  \t\t\tactivate: \"mouseover\"\n 12  \t\t}\n 13  \t} );\n 14  } );\n 15  ]]>\n 16  </js>\n 17  \n 18  <title lib=\"ColVis\">Mouseover activation</title>\n 19  \n 20  <info><![CDATA[\n 21  \n 22  The default activation (showing the columns list) for ColVis is for the user to click the button. This can be altered to a `mouseover` activation by making use of the `activate` initialisation option and setting it to `dt-string mouseover`. This is shown in the example below.\n 23  \n 24  For full information about the ColVis options, please refer to the [ColVis options documentation](//datatables.net/extensions/colvis/options).\n 25  \n 26  ]]></info>\n 27  \n 28  </dt-example>\n"
        lineNumber: 7
        variables:
          data: ""
          innerText: "\n\n\n\n\n\n$(document).ready(function() {\n\t$('#example').DataTable( {\n\t\tdom: 'C<\"clear\">lfrtip',\n\t\tcolVis: {\n\t\t\tactivate: \"mouseover\"\n\t\t}\n\t} );\n} );\n\n\n\nMouseover activation\n\n\n\nThe default activation (showing the columns list) for ColVis is for the user to click the button. This can be altered to a `mouseover` activation by making use of the `activate` initialisation option and setting it to `dt-string mouseover`. This is shown in the example below.\n\nFor full information about the ColVis options, please refer to the [ColVis options documentation](//datatables.net/extensions/colvis/options).\n\n\n\n\n"
          matchingXML: "<?xml version=\"1.0\" encoding=\"UTF-8\"?><dt-example table-type=\"html\" order=\"7\"><css lib=\"datatables colvis\"></css><js lib=\"jquery datatables colvis\"><![CDATA[\n$(document).ready(function() {\n\t$('#example').DataTable( {\n\t\tdom: 'C<\"clear\">lfrtip',\n\t\tcolVis: {\n\t\t\tactivate: \"mouseover\"\n\t\t}\n\t} );\n} );\n]]></js><title lib=\"ColVis\">Mouseover activation</title><info><![CDATA[\n\nThe default activation (showing the columns list) for ColVis is for the user to click the button. This can be altered to a `mouseover` activation by making use of the `activate` initialisation option and setting it to `dt-string mouseover`. This is shown in the example below.\n\nFor full information about the ColVis options, please refer to the [ColVis options documentation](//datatables.net/extensions/colvis/options).\n\n]]></info></dt-example>"
      - uri: file:///opt/input/source/src/main/resources/META-INF/resources/bower_components/datatables-colvis/examples/new_init.xml
        message: ""
        codeSnip: "  1  <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n  2  <dt-example table-type=\"html\" order=\"2\">\n  3  \n  4  <css lib=\"datatables colvis\" />\n  5  <js lib=\"jquery datatables colvis\">\n  6  <![CDATA[\n  7  $(document).ready(function() {\n  8  \tvar table = $('#example').DataTable();\n  9  \tvar colvis = new $.fn.dataTable.ColVis( table );\n 10  \n 11  \t$( colvis.button() ).insertAfter('div.info');\n 12  } );\n 13  ]]>\n 14  </js>\n 15  \n 16  <title lib=\"ColVis\">`new` initialisation</title>\n 17  \n 18  <info><![CDATA[\n 19  \n 20  As well as providing the option to be initialised through the `C` option of `dt-init dom`, ColVis can also be added to a DataTable using direct initialisation - `new $.fn.dataTable.ColVis();` as shown in this example. The ColVis control button it available through its `button()` method, which can then be used to attach to the document where you need.\n 21  \n 22  For full information about the ColVis API, please refer to the [ColVis API documentation](//datatables.net/extensions/colvis/api).\n 23  \n 24  ]]></info>\n 25  \n 26  </dt-example>\n"
        lineNumber: 7
        variables:
          data: ""
          innerText: "\n\n\n\n\n\n$(document).ready(function() {\n\tvar table = $('#example').DataTable();\n\tvar colvis = new $.fn.dataTable.ColVis( table );\n\n\t$( colvis.button() ).insertAfter('div.info');\n} );\n\n\n\n`new` initialisation\n\n\n\nAs well as providing the option to be initialised through the `C` option of `dt-init dom`, ColVis can also be added to a DataTable using direct initialisation - `new $.fn.dataTable.ColVis();` as shown in this example. The ColVis control button it available through its `button()` method, which can then be used to attach to the document where you need.\n\nFor full information about the ColVis API, please refer to the [ColVis API documentation](//datatables.net/extensions/colvis/api).\n\n\n\n\n"
          matchingXML: "<?xml version=\"1.0\" encoding=\"UTF-8\"?><dt-example table-type=\"html\" order=\"2\"><css lib=\"datatables colvis\"></css><js lib=\"jquery datatables colvis\"><![CDATA[\n$(document).ready(function() {\n\tvar table = $('#example').DataTable();\n\tvar colvis = new $.fn.dataTable.ColVis( table );\n\n\t$( colvis.button() ).insertAfter('div.info');\n} );\n]]></js><title lib=\"ColVis\">`new` initialisation</title><info><![CDATA[\n\nAs well as providing the option to be initialised through the `C` option of `dt-init dom`, ColVis can also be added to a DataTable using direct initialisation - `new $.fn.dataTable.ColVis();` as shown in this example. The ColVis control button it available through its `button()` method, which can then be used to attach to the document where you need.\n\nFor full information about the ColVis API, please refer to the [ColVis API documentation](//datatables.net/extensions/colvis/api).\n\n]]></info></dt-example>"
      - uri: file:///opt/input/source/src/main/resources/META-INF/resources/bower_components/datatables-colvis/examples/restore.xml
        message: ""
        codeSnip: "  1  <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n  2  <dt-example table-type=\"html\" order=\"11\">\n  3  \n  4  <css lib=\"datatables colvis\" />\n  5  <js lib=\"jquery datatables colvis\">\n  6  <![CDATA[\n  7  $(document).ready(function() {\n  8  \t$('#example').DataTable( {\n  9  \t\tdom: 'C<\"clear\">lfrtip',\n 10  \t\tcolumnDefs: [\n 11  \t\t\t{ visible: false, targets: 2 }\n 12  \t\t],\n 13  \t\tcolVis: {\n 14  \t\t\trestore: \"Restore\",\n 15  \t\t\tshowAll: \"Show all\",\n 16  \t\t\tshowNone: \"Show none\"\n 17  \t\t}\n 18  \t} );\n 19  } );\n 20  ]]>\n 21  </js>\n 22  \n 23  <title lib=\"ColVis\">Restore / show all</title>\n 24  \n 25  <info><![CDATA[\n 26  \n 27  This demo of ColVis shows its ability to add \"Restore\", \"Show all\" and \"Show none\" buttons to the list of column visibility options. This is done with the `restore`, `showAll` and `showNone` options which can be enabled individually if needed.\n 28  \n 29  For full information about the ColVis options, please refer to the [ColVis options documentation](//datatables.net/extensions/colvis/options).\n 30  \n 31  ]]></info>\n 32  \n 33  </dt-example>\n"
        lineNumber: 7
        variables:
          data: ""
          innerText: "\n\n\n\n\n\n$(document).ready(function() {\n\t$('#example').DataTable( {\n\t\tdom: 'C<\"clear\">lfrtip',\n\t\tcolumnDefs: [\n\t\t\t{ visible: false, targets: 2 }\n\t\t],\n\t\tcolVis: {\n\t\t\trestore: \"Restore\",\n\t\t\tshowAll: \"Show all\",\n\t\t\tshowNone: \"Show none\"\n\t\t}\n\t} );\n} );\n\n\n\nRestore / show all\n\n\n\nThis demo of ColVis shows its ability to add \"Restore\", \"Show all\" and \"Show none\" buttons to the list of column visibility options. This is done with the `restore`, `showAll` and `showNone` options which can be enabled individually if needed.\n\nFor full information about the ColVis options, please refer to the [ColVis options documentation](//datatables.net/extensions/colvis/options).\n\n\n\n\n"
          matchingXML: "<?xml version=\"1.0\" encoding=\"UTF-8\"?><dt-example table-type=\"html\" order=\"11\"><css lib=\"datatables colvis\"></css><js lib=\"jquery datatables colvis\"><![CDATA[\n$(document).ready(function() {\n\t$('#example').DataTable( {\n\t\tdom: 'C<\"clear\">lfrtip',\n\t\tcolumnDefs: [\n\t\t\t{ visible: false, targets: 2 }\n\t\t],\n\t\tcolVis: {\n\t\t\trestore: \"Restore\",\n\t\t\tshowAll: \"Show all\",\n\t\t\tshowNone: \"Show none\"\n\t\t}\n\t} );\n} );\n]]></js><title lib=\"ColVis\">Restore / show all</title><info><![CDATA[\n\nThis demo of ColVis shows its ability to add \"Restore\", \"Show all\" and \"Show none\" buttons to the list of column visibility options. This is done with the `restore`, `showAll` and `showNone` options which can be enabled individually if needed.\n\nFor full information about the ColVis options, please refer to the [ColVis options documentation](//datatables.net/extensions/colvis/options).\n\n]]></info></dt-example>"
      - uri: file:///opt/input/source/src/main/resources/META-INF/resources/bower_components/datatables-colvis/examples/simple.xml
        message: ""
        codeSnip: "  1  <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n  2  <dt-example table-type=\"html\" order=\"1\">\n  3  \n  4  <css lib=\"datatables colvis\" />\n  5  <js lib=\"jquery datatables colvis\">\n  6  <![CDATA[\n  7  $(document).ready(function() {\n  8  \t$('#example').DataTable( {\n  9  \t\tdom: 'C<\"clear\">lfrtip'\n 10  \t} );\n 11  } );\n 12  ]]>\n 13  </js>\n 14  \n 15  <title lib=\"ColVis\">Basic initialisation</title>\n 16  \n 17  <info><![CDATA[\n 18  \n 19  ColVis is a plug-in for DataTables which presents a list of all columns to a user and allows them to select which ones they wish to be visible. Click the 'Show / hide columns' button to be presented with a list of columns in the table, and click the buttons to show and hide them as you wish.\n 20  \n 21  ColVis is added to a DataTable by specifying the `C` option for `dt-init dom`. The example below shows the ColVis button added to the table with a clearing element after it.\n 22  \n 23  ]]></info>\n 24  \n 25  </dt-example>\n"
        lineNumber: 7
        variables:
          data: ""
          innerText: "\n\n\n\n\n\n$(document).ready(function() {\n\t$('#example').DataTable( {\n\t\tdom: 'C<\"clear\">lfrtip'\n\t} );\n} );\n\n\n\nBasic initialisation\n\n\n\nColVis is a plug-in for DataTables which presents a list of all columns to a user and allows them to select which ones they wish to be visible. Click the 'Show / hide columns' button to be presented with a list of columns in the table, and click the buttons to show and hide them as you wish.\n\nColVis is added to a DataTable by specifying the `C` option for `dt-init dom`. The example below shows the ColVis button added to the table with a clearing element after it.\n\n\n\n\n"
          matchingXML: "<?xml version=\"1.0\" encoding=\"UTF-8\"?><dt-example table-type=\"html\" order=\"1\"><css lib=\"datatables colvis\"></css><js lib=\"jquery datatables colvis\"><![CDATA[\n$(document).ready(function() {\n\t$('#example').DataTable( {\n\t\tdom: 'C<\"clear\">lfrtip'\n\t} );\n} );\n]]></js><title lib=\"ColVis\">Basic initialisation</title><info><![CDATA[\n\nColVis is a plug-in for DataTables which presents a list of all columns to a user and allows them to select which ones they wish to be visible. Click the 'Show / hide columns' button to be presented with a list of columns in the table, and click the buttons to show and hide them as you wish.\n\nColVis is added to a DataTable by specifying the `C` option for `dt-init dom`. The example below shows the ColVis button added to the table with a clearing element after it.\n\n]]></info></dt-example>"
      - uri: file:///opt/input/source/src/main/resources/META-INF/resources/bower_components/datatables-colvis/examples/text.xml
        message: ""
        codeSnip: "  1  <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n  2  <dt-example table-type=\"html\" order=\"3\">\n  3  \n  4  <css lib=\"datatables colvis\" />\n  5  <js lib=\"jquery datatables colvis\">\n  6  <![CDATA[\n  7  $(document).ready(function() {\n  8  \t$('#example').DataTable( {\n  9  \t\t\"dom\": 'C<\"clear\">lfrtip',\n 10  \t\t\"colVis\": {\n 11  \t\t\t\"buttonText\": \"Change columns\"\n 12  \t\t}\n 13  \t} );\n 14  } );\n 15  ]]>\n 16  </js>\n 17  \n 18  <title lib=\"ColVis\">Custom button text</title>\n 19  \n 20  <info><![CDATA[\n 21  \n 22  You may wish to use your own text in the ColVis button - this is done by making use of the `buttonText` initialisation option, as shown in this example.\n 23  \n 24  For full information about the ColVis options, please refer to the [ColVis options documentation](//datatables.net/extensions/colvis/options).\n 25  \n 26  \n 27  ]]></info>\n 28  \n 29  </dt-example>\n"
        lineNumber: 7
        variables:
          data: ""
          innerText: "\n\n\n\n\n\n$(document).ready(function() {\n\t$('#example').DataTable( {\n\t\t\"dom\": 'C<\"clear\">lfrtip',\n\t\t\"colVis\": {\n\t\t\t\"buttonText\": \"Change columns\"\n\t\t}\n\t} );\n} );\n\n\n\nCustom button text\n\n\n\nYou may wish to use your own text in the ColVis button - this is done by making use of the `buttonText` initialisation option, as shown in this example.\n\nFor full information about the ColVis options, please refer to the [ColVis options documentation](//datatables.net/extensions/colvis/options).\n\n\n\n\n\n"
          matchingXML: "<?xml version=\"1.0\" encoding=\"UTF-8\"?><dt-example table-type=\"html\" order=\"3\"><css lib=\"datatables colvis\"></css><js lib=\"jquery datatables colvis\"><![CDATA[\n$(document).ready(function() {\n\t$('#example').DataTable( {\n\t\t\"dom\": 'C<\"clear\">lfrtip',\n\t\t\"colVis\": {\n\t\t\t\"buttonText\": \"Change columns\"\n\t\t}\n\t} );\n} );\n]]></js><title lib=\"ColVis\">Custom button text</title><info><![CDATA[\n\nYou may wish to use your own text in the ColVis button - this is done by making use of the `buttonText` initialisation option, as shown in this example.\n\nFor full information about the ColVis options, please refer to the [ColVis options documentation](//datatables.net/extensions/colvis/options).\n\n\n]]></info></dt-example>"
      - uri: file:///opt/input/source/src/main/resources/META-INF/resources/bower_components/datatables-colvis/examples/title_callback.xml
        message: ""
        codeSnip: "  1  <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n  2  <dt-example table-type=\"html\" order=\"5\">\n  3  \n  4  <css lib=\"datatables colvis\" />\n  5  <js lib=\"jquery datatables colvis\">\n  6  <![CDATA[\n  7  $(document).ready(function() {\n  8  \t$('#example').DataTable( {\n  9  \t\t\"dom\": 'C<\"clear\">lfrtip',\n 10  \t\t\"colVis\": {\n 11  \t\t\t\"label\": function ( index, title, th ) {\n 12  \t\t\t\treturn (index+1) +'. '+ title;\n 13  \t\t\t}\n 14  \t\t}\n 15  \t} );\n 16  } );\n 17  ]]>\n 18  </js>\n 19  \n 20  <title lib=\"ColVis\">Column button callback</title>\n 21  \n 22  <info><![CDATA[\n 23  \n 24  By default ColVis will use the information in the `dt-tag th` cell for each column as the button name to use in ColVis, which might not always be what you want (for example you might has HTML in the cell that you don't want in the button). The `label` callback provides the ability to customise the label used for the button.\n 25  \n 26  In this example the column index is prefixed to the column title.\n 27  \n 28  ]]></info>\n 29  \n 30  </dt-example>\n"
        lineNumber: 7
        variables:
          data: ""
          innerText: "\n\n\n\n\n\n$(document).ready(function() {\n\t$('#example').DataTable( {\n\t\t\"dom\": 'C<\"clear\">lfrtip',\n\t\t\"colVis\": {\n\t\t\t\"label\": function ( index, title, th ) {\n\t\t\t\treturn (index+1) +'. '+ title;\n\t\t\t}\n\t\t}\n\t} );\n} );\n\n\n\nColumn button callback\n\n\n\nBy default ColVis will use the information in the `dt-tag th` cell for each column as the button name to use in ColVis, which might not always be what you want (for example you might has HTML in the cell that you don't want in the button). The `label` callback provides the ability to customise the label used for the button.\n\nIn this example the column index is prefixed to the column title.\n\n\n\n\n"
          matchingXML: "<?xml version=\"1.0\" encoding=\"UTF-8\"?><dt-example table-type=\"html\" order=\"5\"><css lib=\"datatables colvis\"></css><js lib=\"jquery datatables colvis\"><![CDATA[\n$(document).ready(function() {\n\t$('#example').DataTable( {\n\t\t\"dom\": 'C<\"clear\">lfrtip',\n\t\t\"colVis\": {\n\t\t\t\"label\": function ( index, title, th ) {\n\t\t\t\treturn (index+1) +'. '+ title;\n\t\t\t}\n\t\t}\n\t} );\n} );\n]]></js><title lib=\"ColVis\">Column button callback</title><info><![CDATA[\n\nBy default ColVis will use the information in the `dt-tag th` cell for each column as the button name to use in ColVis, which might not always be what you want (for example you might has HTML in the cell that you don't want in the button). The `label` callback provides the ability to customise the label used for the button.\n\nIn this example the column index is prefixed to the column title.\n\n]]></info></dt-example>"
      - uri: file:///opt/input/source/src/main/resources/META-INF/resources/bower_components/datatables-colvis/examples/two_tables.xml
        message: ""
        codeSnip: "  1  <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n  2  <dt-example table-type=\"html-office-edin|html-office-london\" table-id=\"\" order=\"9\">\n  3  \n  4  <css lib=\"datatables colvis\" />\n  5  <js lib=\"jquery datatables colvis\">\n  6  <![CDATA[\n  7  $(document).ready(function() {\n  8  \t$('table.display').DataTable( {\n  9  \t\tdom: 'C<\"clear\">lfrtip',\n 10  \t\tdisplayLength: 5\n 11  \t} );\n 12  } );\n 13  ]]>\n 14  </js>\n 15  \n 16  <title lib=\"ColVis\">Two tables with individual controls</title>\n 17  \n 18  <info><![CDATA[\n 19  \n 20  It can be useful to have DataTables initialise more than one table with a single call can for them to each have individual ColVis controllers. All this requires is a suitable jQuery selector to be used, and DataTables and ColVis will take care of the rest - as shown in this example.\n 21  \n 22  ]]></info>\n 23  \n 24  </dt-example>\n"
        lineNumber: 7
        variables:
          data: ""
          innerText: "\n\n\n\n\n\n$(document).ready(function() {\n\t$('table.display').DataTable( {\n\t\tdom: 'C<\"clear\">lfrtip',\n\t\tdisplayLength: 5\n\t} );\n} );\n\n\n\nTwo tables with individual controls\n\n\n\nIt can be useful to have DataTables initialise more than one table with a single call can for them to each have individual ColVis controllers. All this requires is a suitable jQuery selector to be used, and DataTables and ColVis will take care of the rest - as shown in this example.\n\n\n\n\n"
          matchingXML: "<?xml version=\"1.0\" encoding=\"UTF-8\"?><dt-example table-type=\"html-office-edin|html-office-london\" table-id=\"\" order=\"9\"><css lib=\"datatables colvis\"></css><js lib=\"jquery datatables colvis\"><![CDATA[\n$(document).ready(function() {\n\t$('table.display').DataTable( {\n\t\tdom: 'C<\"clear\">lfrtip',\n\t\tdisplayLength: 5\n\t} );\n} );\n]]></js><title lib=\"ColVis\">Two tables with individual controls</title><info><![CDATA[\n\nIt can be useful to have DataTables initialise more than one table with a single call can for them to each have individual ColVis controllers. All this requires is a suitable jQuery selector to be used, and DataTables and ColVis will take care of the rest - as shown in this example.\n\n]]></info></dt-example>"
      - uri: file:///opt/input/source/src/main/resources/META-INF/resources/bower_components/datatables-colvis/examples/two_tables_identical.xml
        message: ""
        codeSnip: "  1  <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n  2  <dt-example table-type=\"html-office-edin|html-office-london\" table-id=\"\" order=\"10\">\n  3  \n  4  <css lib=\"datatables colvis\" />\n  5  <js lib=\"jquery datatables colvis\">\n  6  <![CDATA[\n  7  $(document).ready(function() {\n  8  \tvar tables = $('table.display').DataTable( {\n  9  \t\tdisplayLength: 5\n 10  \t} );\n 11  \n 12  \t// When the column visibility changes on the firs table, also change it on\n 13  \t// the others\n 14  \ttables.table(0).on('column-visibility', function ( e, settings, colIdx, visibility ) {\n 15  \t\ttables.tables(':gt(0)').column( colIdx ).visible( visibility );\n 16  \t} );\n 17  \n 18  \t// Create ColVis on the first table only\n 19  \tvar colvis = new $.fn.dataTable.ColVis( tables.table(0) );\n 20  \t$( colvis.button() ).insertAfter('div.info');\n 21  } );\n 22  ]]>\n 23  </js>\n 24  \n 25  <title lib=\"ColVis\">Two tables with shared controls</title>\n 26  \n 27  <info><![CDATA[\n 28  \n 29  This example shows how the DataTables API can be used with ColVis to use a single ColVis control to effect other tables. This is done by applying ColVis to the first table and then listening for the `dt-event column-visibility` event and updating all other tables when triggered.\n 30  \n 31  This example makes use of the `dt-api tables()` and `dt-api table()` methods for working with multiple tables, and also initialised ColVis using the `new $.fn.dataTable.ColVis();` operator.\n 32  \n 33  ]]></info>\n 34  \n 35  </dt-example>\n"
        lineNumber: 7
        variables:
          data: ""
          innerText: "\n\n\n\n\n\n$(document).ready(function() {\n\tvar tables = $('table.display').DataTable( {\n\t\tdisplayLength: 5\n\t} );\n\n\t// When the column visibility changes on the firs table, also change it on\n\t// the others\n\ttables.table(0).on('column-visibility', function ( e, settings, colIdx, visibility ) {\n\t\ttables.tables(':gt(0)').column( colIdx ).visible( visibility );\n\t} );\n\n\t// Create ColVis on the first table only\n\tvar colvis = new $.fn.dataTable.ColVis( tables.table(0) );\n\t$( colvis.button() ).insertAfter('div.info');\n} );\n\n\n\nTwo tables with shared controls\n\n\n\nThis example shows how the DataTables API can be used with ColVis to use a single ColVis control to effect other tables. This is done by applying ColVis to the first table and then listening for the `dt-event column-visibility` event and updating all other tables when triggered.\n\nThis example makes use of the `dt-api tables()` and `dt-api table()` methods for working with multiple tables, and also initialised ColVis using the `new $.fn.dataTable.ColVis();` operator.\n\n\n\n\n"
          matchingXML: "<?xml version=\"1.0\" encoding=\"UTF-8\"?><dt-example table-type=\"html-office-edin|html-office-london\" table-id=\"\" order=\"10\"><css lib=\"datatables colvis\"></css><js lib=\"jquery datatables colvis\"><![CDATA[\n$(document).ready(function() {\n\tvar tables = $('table.display').DataTable( {\n\t\tdisplayLength: 5\n\t} );\n\n\t// When the column visibility changes on the firs table, also change it on\n\t// the others\n\ttables.table(0).on('column-visibility', function ( e, settings, colIdx, visibility ) {\n\t\ttables.tables(':gt(0)').column( colIdx ).visible( visibility );\n\t} );\n\n\t// Create ColVis on the first table only\n\tvar colvis = new $.fn.dataTable.ColVis( tables.table(0) );\n\t$( colvis.button() ).insertAfter('div.info');\n} );\n]]></js><title lib=\"ColVis\">Two tables with shared controls</title><info><![CDATA[\n\nThis example shows how the DataTables API can be used with ColVis to use a single ColVis control to effect other tables. This is done by applying ColVis to the first table and then listening for the `dt-event column-visibility` event and updating all other tables when triggered.\n\nThis example makes use of the `dt-api tables()` and `dt-api table()` methods for working with multiple tables, and also initialised ColVis using the `new $.fn.dataTable.ColVis();` operator.\n\n]]></info></dt-example>"
      - uri: file:///opt/input/source/src/main/resources/META-INF/resources/bower_components/eonasdan-bootstrap-datetimepicker/docs/theme/browserconfig.xml
        message: ""
        codeSnip: |2
            1  <?xml version="1.0" encoding="utf-8"?>
            2  <browserconfig>
            3    <msapplication>
            4      <tile>
            5        <square70x70logo src="/mstile-70x70.png"/>
            6        <square150x150logo src="/mstile-150x150.png"/>
            7        <square310x310logo src="/mstile-310x310.png"/>
            8        <wide310x150logo src="/mstile-310x150.png"/>
            9        <TileColor>#da532c</TileColor>
           10      </tile>
           11    </msapplication>
           12  </browserconfig>
        lineNumber: 9
        variables:
          data: ""
          innerText: "\n\n  \n    \n      \n      \n      \n      \n      #da532c\n    \n  \n\n"
          matchingXML: <?xml version="1.0" encoding="utf-8"?><browserconfig><msapplication><tile><square70x70logo src="/mstile-70x70.png"></square70x70logo><square150x150logo src="/mstile-150x150.png"></square150x150logo><square310x310logo src="/mstile-310x310.png"></square310x310logo><wide310x150logo src="/mstile-310x150.png"></wide310x150logo><TileColor>#da532c</TileColor></tile></msapplication></browserconfig>
violations: []
name: droolsjbpm
description: This ruleset provides help for migrating to a unified KIE (Knowledge Is Everything) API in the upgrade from version 5 to 6.
violations: []
tags: null
name: eap6/java-ee/seam
description: This ruleset provides generic migration knowledge from the Seam 2 UI controls to pure JSF 2 UI Controls
violations: []
tags: null
name: eap7/weblogic/tests/data
violations: []
tags: null
name: eap8/eap7
description: This ruleset provides analysis of Java EE applications that need to change certain CDI-related method calls.
violations: []
tags: null
name: eapxp/thorntail
description: This ruleset provides analysis of Maven built applications that use Thorntail Maven Plugin, which should be replaced by JBoss EAP XP Bootable JAR Maven Plugin, when migrating to JBoss EAP XP.
violations: []
tags: null
name: filemappings
description: This rule set configures the organization matching functionality, using known root-package prefixes to identify libraries and other code.
violations: []
tags: null
name: fuse-service-works/soa-p-5
description: This ruleset provides analysis of JBoss SOA Platform 5 applications and provides information on how to migrate these to Red Hat JBoss Fuse Service Works
violations: []
tags: null
name: fuse/sonicesb
description: This ruleset contains rules that assist in migrating from Sonic ESB to Apache Camel.
violations: []
tags: null
name: hibernate
description: This ruleset provides analysis of deprecated Hibernate java constructs and their migration to newer one.
violations: []
tags: null
name: jakarta-ee9
violations: []
tags: null
name: jws5
description: This ruleset provides analysis of applications that need to change their pom dependencies to upgrade dependencies that belong to the groupId `org.apache.tomcat`
violations: []
tags: null
name: openjdk11/openjdk8
description: This ruleset provides analysis with respect to API removals between OpenJDK 8 and 11.
violations: []
tags: null
name: openjdk17
description: This ruleset provides analysis regarding deprecated APIs in OpenJDK 21.
violations: []
tags: null
name: openjdk17/openjdk11
description: This ruleset provides analysis Security Manager classes and methods deprecated between OpenJDK 11 to 17.
violations: []
tags: null
name: openjdk7/oraclejdk7
description: This ruleset provides analysis with respect to the migration from OracleJDK to OpenJDK.
violations: []
tags: null
name: openliberty/websphere
description: This ruleset identifies usage of Java APIs and technologies which are not provided by Open Liberty.
violations: []
tags: null
name: os/windows
description: This is a ruleset for Windows operating system specific rules while migrating to Linux operating system.
violations: []
tags: null
name: quarkus/springboot
description: This ruleset gives hints to migrate from SpringBoot devtools to Quarkus
violations:
  jakarta-cdi-to-quarkus-00040:
    description: Producer annotation no longer required
    category: potential
    labels:
      - konveyor.io/source=java-ee
      - konveyor.io/target=quarkus
    incidents:
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/utils/Producers.java
        message: |-
          In Quarkus you can skip the @Produces annotation completely if the producer method is annotated with a scope annotation, a stereotype or a qualifier..
           This field could be accessed using a `@Named` getter method instead.
        codeSnip: " 2  \n 3  import jakarta.enterprise.inject.Produces;\n 4  import jakarta.enterprise.inject.spi.InjectionPoint;\n 5  import java.util.logging.Logger;\n 6  \n 7  \n 8  public class Producers {\n 9  \n10      Logger log = Logger.getLogger(Producers.class.getName());\n11  \n12      @Produces\n13      public Logger produceLog(InjectionPoint injectionPoint) {\n14          return Logger.getLogger(injectionPoint.getMember().getDeclaringClass().getName());\n15      }\n16  \n17  }\n"
        lineNumber: 12
        variables:
          file: file:///opt/input/source/src/main/java/com/redhat/coolstore/utils/Producers.java
          kind: Method
          name: Produces
          package: com.redhat.coolstore.utils
    links:
      - url: https://quarkus.io/guides/cdi-reference#simplified-producer-method-declaration
        title: Quarkus Simplified Producer Method Declaration
    effort: 1
  jakarta-jaxrs-to-quarkus-00010:
    description: Replace jakarta JAX-RS dependency
    category: mandatory
    labels:
      - konveyor.io/source=java-ee
      - konveyor.io/target=quarkus
    incidents:
      - uri: file:///opt/input/source/pom.xml
        message: Dependency `jakarta.ws.rs:jakarta.ws.rs-api` has to be replaced with `io.quarkus:quarkus-resteasy-reactive` artifact.
        codeSnip: |-
          36      <dependency>
          37        <groupId>io.quarkus</groupId>
          38        <artifactId>quarkus-resteasy</artifactId>
          39      </dependency>
          40      <dependency>
          41        <groupId>io.quarkus</groupId>
          42        <artifactId>quarkus-resteasy-jackson</artifactId>
          43      </dependency>
          44      <dependency>
          45        <groupId>io.quarkus</groupId>
          46        <artifactId>quarkus-resteasy-client</artifactId>
          47      </dependency>
          48      <dependency>
          49        <groupId>io.quarkus</groupId>
          50        <artifactId>quarkus-resteasy-client-jackson</artifactId>
          51      </dependency>
          52      <dependency>
          53        <groupId>io.quarkus</groupId>
          54        <artifactId>quarkus-hibernate-orm</artifactId>
          55      </dependency>
          56      <dependency>
        lineNumber: 45
        variables:
          name: jakarta.ws.rs.jakarta.ws.rs-api
          version: 3.1.0
    links:
      - url: https://quarkus.io/guides/resteasy-reactive
        title: Quarkus - Guide
    effort: 1
  jakarta-jaxrs-to-quarkus-00020:
    description: Jakarta JAX-RS activation is no longer necessary
    category: optional
    labels:
      - konveyor.io/source=java-ee
      - konveyor.io/target=quarkus
    incidents:
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/RestApplication.java
        message: Jakarta JAX-RS activation is no longer necessary. You can set a root path like this but you don't have to.
        codeSnip: " 1  package com.redhat.coolstore.rest;\n 2  \n 3  import jakarta.ws.rs.ApplicationPath;\n 4  import jakarta.ws.rs.core.Application;\n 5  \n 6  \n 7  @ApplicationPath(\"/services\")\n 8  public class RestApplication extends Application {\n 9  \n10  }\n"
        lineNumber: 7
        variables:
          file: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/RestApplication.java
          kind: Class
          name: ApplicationPath
          package: com.redhat.coolstore.rest
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/RestApplication.java
        message: Jakarta JAX-RS activation is no longer necessary. You can set a root path like this but you don't have to.
        codeSnip: " 1  package com.redhat.coolstore.rest;\n 2  \n 3  import jakarta.ws.rs.ApplicationPath;\n 4  import jakarta.ws.rs.core.Application;\n 5  \n 6  \n 7  @ApplicationPath(\"/services\")\n 8  public class RestApplication extends Application {\n 9  \n10  }\n"
        lineNumber: 8
        variables:
          file: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/RestApplication.java
          kind: Class
          name: RestApplication
          package: com.redhat.coolstore.rest
    links:
      - url: https://quarkus.io/guides/resteasy-reactive#declaring-endpoints-uri-mapping
        title: Quarkus - Guide
    effort: 1
  javaee-pom-to-quarkus-00050:
    description: Adopt Maven Failsafe plugin
    category: mandatory
    labels:
      - konveyor.io/source=java-ee
      - konveyor.io/target=quarkus
    incidents:
      - uri: file:///opt/input/source/pom.xml
        message: "Use the Maven Failsafe plugin adding the following sections to the `pom.xml` file: \n\n ```xml\n <properties> \n <surefire-plugin.version>3.0.0</compiler-plugin.version>\n </properties> \n <build>\n <plugins>\n <plugin>\n <artifactId>maven-failsafe-plugin</artifactId>\n <version>$</version>\n <executions>\n <execution>\n <goals>\n <goals>integration-test</goal>\n <goals>verify</goal>\n </goals>\n <configuration>\n <systemPropertyVariables>\n <native.image.path>$/$-runner</native.image.path>\n <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>\n <maven.home>$</maven.home>\n </systemPropertyVariables>\n </configuration>\n </execution>\n </executions>\n </plugin>\n </plugins>\n </build>\n ```"
        codeSnip: |2-
            1  <?xml version="1.0" encoding="UTF-8"?>
            2  <project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0"
            3      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            4    <modelVersion>4.0.0</modelVersion>
            5    <groupId>com.redhat.coolstore</groupId>
            6    <artifactId>coolstore</artifactId>
            7    <version>1.0.0-SNAPSHOT</version>
            8    <name>coolstore-quarkus</name>
            9    <properties>
           10      <compiler-plugin.version>3.13.0</compiler-plugin.version>
           11      <maven.compiler.release>21</maven.compiler.release>
           12      <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
           13      <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
           14      <quarkus.platform.artifact-id>quarkus-bom</quarkus.platform.artifact-id>
           15      <quarkus.platform.group-id>io.quarkus.platform</quarkus.platform.group-id>
           16      <quarkus.platform.version>3.12.3</quarkus.platform.version>
           17      <skipITs>true</skipITs>
           18      <surefire-plugin.version>3.2.5</surefire-plugin.version>
           19    </properties>
           20    <dependencyManagement>
           21      <dependencies>
           22        <dependency>
           23          <groupId>io.quarkus.platform</groupId>
           24          <artifactId>quarkus-bom</artifactId>
           25          <version>${quarkus.platform.version}</version>
           26          <type>pom</type>
           27          <scope>import</scope>
           28        </dependency>
           29      </dependencies>
           30    </dependencyManagement>
           31    <dependencies>
           32      <dependency>
           33        <groupId>io.quarkus</groupId>
           34        <artifactId>quarkus-arc</artifactId>
           35      </dependency>
           36      <dependency>
           37        <groupId>io.quarkus</groupId>
           38        <artifactId>quarkus-resteasy</artifactId>
           39      </dependency>
           40      <dependency>
           41        <groupId>io.quarkus</groupId>
           42        <artifactId>quarkus-resteasy-jackson</artifactId>
           43      </dependency>
           44      <dependency>
           45        <groupId>io.quarkus</groupId>
           46        <artifactId>quarkus-resteasy-client</artifactId>
           47      </dependency>
           48      <dependency>
           49        <groupId>io.quarkus</groupId>
           50        <artifactId>quarkus-resteasy-client-jackson</artifactId>
           51      </dependency>
           52      <dependency>
           53        <groupId>io.quarkus</groupId>
           54        <artifactId>quarkus-hibernate-orm</artifactId>
           55      </dependency>
           56      <dependency>
           57        <groupId>io.quarkus</groupId>
           58        <artifactId>quarkus-jdbc-postgresql</artifactId>
           59      </dependency>
           60      <dependency>
           61        <groupId>io.quarkus</groupId>
           62        <artifactId>quarkus-flyway</artifactId>
           63      </dependency>
           64      <dependency>
           65        <groupId>org.flywaydb</groupId>
           66        <artifactId>flyway-database-postgresql</artifactId>
           67        <version>10.12.0</version>
           68        <scope>runtime</scope>
           69      </dependency>
           70      <dependency>
           71        <groupId>io.quarkus</groupId>
           72        <artifactId>quarkus-undertow</artifactId>
           73      </dependency>
           74      <dependency>
           75        <groupId>io.quarkus</groupId>
           76        <artifactId>quarkus-messaging</artifactId>
           77      </dependency>
           78      <dependency>
           79        <groupId>io.quarkus</groupId>
           80        <artifactId>quarkus-container-image-docker</artifactId>
           81      </dependency>
           82      <dependency>
           83        <groupId>io.quarkus</groupId>
           84        <artifactId>quarkus-minikube</artifactId>
           85      </dependency>
           86    </dependencies>
           87     <build>
           88          <plugins>
           89              <plugin>
           90                  <groupId>${quarkus.platform.group-id}</groupId>
           91                  <artifactId>quarkus-maven-plugin</artifactId>
           92                  <version>${quarkus.platform.version}</version>
           93                  <extensions>true</extensions>
           94                  <executions>
           95                      <execution>
           96                          <goals>
           97                              <goal>build</goal>
           98                              <goal>generate-code</goal>
           99                              <goal>generate-code-tests</goal>
          100                              <goal>native-image-agent</goal>
          101                          </goals>
          102                      </execution>
          103                  </executions>
          104              </plugin>
          105              <plugin>
        lineNumber: 4
        variables:
          data: project
          innerText: "\n  4.0.0\n  com.redhat.coolstore\n  coolstore\n  1.0.0-SNAPSHOT\n  coolstore-quarkus\n  \n    3.13.0\n    21\n    UTF-8\n    UTF-8\n    quarkus-bom\n    io.quarkus.platform\n    3.12.3\n    true\n    3.2.5\n  \n  \n    \n      \n        io.quarkus.platform\n        quarkus-bom\n        ${quarkus.platform.version}\n        pom\n        import\n      \n    \n  \n  \n    \n      io.quarkus\n      quarkus-arc\n    \n    \n      io.quarkus\n      quarkus-resteasy\n    \n    \n      io.quarkus\n      quarkus-resteasy-jackson\n    \n    \n      io.quarkus\n      quarkus-resteasy-client\n    \n    \n      io.quarkus\n      quarkus-resteasy-client-jackson\n    \n    \n      io.quarkus\n      quarkus-hibernate-orm\n    \n    \n      io.quarkus\n      quarkus-jdbc-postgresql\n    \n    \n      io.quarkus\n      quarkus-flyway\n    \n    \n      org.flywaydb\n      flyway-database-postgresql\n      10.12.0\n      runtime\n    \n    \n      io.quarkus\n      quarkus-undertow\n    \n    \n      io.quarkus\n      quarkus-messaging\n    \n    \n      io.quarkus\n      quarkus-container-image-docker\n    \n    \n      io.quarkus\n      quarkus-minikube\n    \n  \n   \n        \n            \n                ${quarkus.platform.group-id}\n                quarkus-maven-plugin\n                ${quarkus.platform.version}\n                true\n                \n                    \n                        \n                            build\n                            generate-code\n                            generate-code-tests\n                            native-image-agent\n                        \n                    \n                \n            \n            \n                maven-compiler-plugin\n                ${compiler-plugin.version}\n                \n                    \n                        -parameters\n                    \n                \n            \n            \n                maven-surefire-plugin\n                ${surefire-plugin.version}\n                \n                    \n                        org.jboss.logmanager.LogManager\n                        ${maven.home}\n                    \n                \n            \n            \n                maven-failsafe-plugin\n                ${surefire-plugin.version}\n                \n                    \n                        \n                            integration-test\n                            verify\n                        \n                    \n                \n                \n                    \n                        ${project.build.directory}/${project.build.finalName}-runner\n                        org.jboss.logmanager.LogManager\n                        ${maven.home}\n                    \n                \n            \n        \n    \n\n    \n        \n            native\n            \n                \n                    native\n                \n            \n            \n                false\n                true\n            \n        \n    \n"
          matchingXML: <modelVersion>4.0.0</modelVersion><groupId>com.redhat.coolstore</groupId><artifactId>coolstore</artifactId><version>1.0.0-SNAPSHOT</version><name>coolstore-quarkus</name><properties><compiler-plugin.version>3.13.0</compiler-plugin.version><maven.compiler.release>21</maven.compiler.release><project.build.sourceEncoding>UTF-8</project.build.sourceEncoding><project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding><quarkus.platform.artifact-id>quarkus-bom</quarkus.platform.artifact-id><quarkus.platform.group-id>io.quarkus.platform</quarkus.platform.group-id><quarkus.platform.version>3.12.3</quarkus.platform.version><skipITs>true</skipITs><surefire-plugin.version>3.2.5</surefire-plugin.version></properties><dependencyManagement><dependencies><dependency><groupId>io.quarkus.platform</groupId><artifactId>quarkus-bom</artifactId><version>${quarkus.platform.version}</version><type>pom</type><scope>import</scope></dependency></dependencies></dependencyManagement><dependencies><dependency><groupId>io.quarkus</groupId><artifactId>quarkus-arc</artifactId></dependency><dependency><groupId>io.quarkus</groupId><artifactId>quarkus-resteasy</artifactId></dependency><dependency><groupId>io.quarkus</groupId><artifactId>quarkus-resteasy-jackson</artifactId></dependency><dependency><groupId>io.quarkus</groupId><artifactId>quarkus-resteasy-client</artifactId></dependency><dependency><groupId>io.quarkus</groupId><artifactId>quarkus-resteasy-client-jackson</artifactId></dependency><dependency><groupId>io.quarkus</groupId><artifactId>quarkus-hibernate-orm</artifactId></dependency><dependency><groupId>io.quarkus</groupId><artifactId>quarkus-jdbc-postgresql</artifactId></dependency><dependency><groupId>io.quarkus</groupId><artifactId>quarkus-flyway</artifactId></dependency><dependency><groupId>org.flywaydb</groupId><artifactId>flyway-database-postgresql</artifactId><version>10.12.0</version><scope>runtime</scope></dependency><dependency><groupId>io.quarkus</groupId><artifactId>quarkus-undertow</artifactId></dependency><dependency><groupId>io.quarkus</groupId><artifactId>quarkus-messaging</artifactId></dependency><dependency><groupId>io.quarkus</groupId><artifactId>quarkus-container-image-docker</artifactId></dependency><dependency><groupId>io.quarkus</groupId><artifactId>quarkus-minikube</artifactId></dependency></dependencies><build><plugins><plugin><groupId>${quarkus.platform.group-id}</groupId><artifactId>quarkus-maven-plugin</artifactId><version>${quarkus.platform.version}</version><extensions>true</extensions><executions><execution><goals><goal>build</goal><goal>generate-code</goal><goal>generate-code-tests</goal><goal>native-image-agent</goal></goals></execution></executions></plugin><plugin><artifactId>maven-compiler-plugin</artifactId><version>${compiler-plugin.version}</version><configuration><compilerArgs><arg>-parameters</arg></compilerArgs></configuration></plugin><plugin><artifactId>maven-surefire-plugin</artifactId><version>${surefire-plugin.version}</version><configuration><systemPropertyVariables><java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager><maven.home>${maven.home}</maven.home></systemPropertyVariables></configuration></plugin><plugin><artifactId>maven-failsafe-plugin</artifactId><version>${surefire-plugin.version}</version><executions><execution><goals><goal>integration-test</goal><goal>verify</goal></goals></execution></executions><configuration><systemPropertyVariables><native.image.path>${project.build.directory}/${project.build.finalName}-runner</native.image.path><java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager><maven.home>${maven.home}</maven.home></systemPropertyVariables></configuration></plugin></plugins></build><profiles><profile><id>native</id><activation><property><name>native</name></property></activation><properties><skipITs>false</skipITs><quarkus.native.enabled>true</quarkus.native.enabled></properties></profile></profiles>
    links:
      - url: https://quarkus.io/guides/maven-tooling#build-tool-maven;
        title: Quarkus - Guide;
    effort: 1
  javaee-pom-to-quarkus-00060:
    description: Add Maven profile to run the Quarkus native build
    category: mandatory
    labels:
      - konveyor.io/source=java-ee
      - konveyor.io/target=quarkus
    incidents:
      - uri: file:///opt/input/source/pom.xml
        message: "Leverage a Maven profile to run the Quarkus native build adding the following section to the `pom.xml` file: \n\n ```xml\n <profiles>\n <profile>\n <id>native</id>\n <activation>\n <property>\n <name>native</name>\n </property>\n </activation>\n <properties>\n <skipITs>false</skipITs>\n <quarkus.package.type>native</quarkus.package.type>\n </properties>\n </profile>\n </profiles>\n ```"
        codeSnip: |2-
            1  <?xml version="1.0" encoding="UTF-8"?>
            2  <project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0"
            3      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            4    <modelVersion>4.0.0</modelVersion>
            5    <groupId>com.redhat.coolstore</groupId>
            6    <artifactId>coolstore</artifactId>
            7    <version>1.0.0-SNAPSHOT</version>
            8    <name>coolstore-quarkus</name>
            9    <properties>
           10      <compiler-plugin.version>3.13.0</compiler-plugin.version>
           11      <maven.compiler.release>21</maven.compiler.release>
           12      <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
           13      <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
           14      <quarkus.platform.artifact-id>quarkus-bom</quarkus.platform.artifact-id>
           15      <quarkus.platform.group-id>io.quarkus.platform</quarkus.platform.group-id>
           16      <quarkus.platform.version>3.12.3</quarkus.platform.version>
           17      <skipITs>true</skipITs>
           18      <surefire-plugin.version>3.2.5</surefire-plugin.version>
           19    </properties>
           20    <dependencyManagement>
           21      <dependencies>
           22        <dependency>
           23          <groupId>io.quarkus.platform</groupId>
           24          <artifactId>quarkus-bom</artifactId>
           25          <version>${quarkus.platform.version}</version>
           26          <type>pom</type>
           27          <scope>import</scope>
           28        </dependency>
           29      </dependencies>
           30    </dependencyManagement>
           31    <dependencies>
           32      <dependency>
           33        <groupId>io.quarkus</groupId>
           34        <artifactId>quarkus-arc</artifactId>
           35      </dependency>
           36      <dependency>
           37        <groupId>io.quarkus</groupId>
           38        <artifactId>quarkus-resteasy</artifactId>
           39      </dependency>
           40      <dependency>
           41        <groupId>io.quarkus</groupId>
           42        <artifactId>quarkus-resteasy-jackson</artifactId>
           43      </dependency>
           44      <dependency>
           45        <groupId>io.quarkus</groupId>
           46        <artifactId>quarkus-resteasy-client</artifactId>
           47      </dependency>
           48      <dependency>
           49        <groupId>io.quarkus</groupId>
           50        <artifactId>quarkus-resteasy-client-jackson</artifactId>
           51      </dependency>
           52      <dependency>
           53        <groupId>io.quarkus</groupId>
           54        <artifactId>quarkus-hibernate-orm</artifactId>
           55      </dependency>
           56      <dependency>
           57        <groupId>io.quarkus</groupId>
           58        <artifactId>quarkus-jdbc-postgresql</artifactId>
           59      </dependency>
           60      <dependency>
           61        <groupId>io.quarkus</groupId>
           62        <artifactId>quarkus-flyway</artifactId>
           63      </dependency>
           64      <dependency>
           65        <groupId>org.flywaydb</groupId>
           66        <artifactId>flyway-database-postgresql</artifactId>
           67        <version>10.12.0</version>
           68        <scope>runtime</scope>
           69      </dependency>
           70      <dependency>
           71        <groupId>io.quarkus</groupId>
           72        <artifactId>quarkus-undertow</artifactId>
           73      </dependency>
           74      <dependency>
           75        <groupId>io.quarkus</groupId>
           76        <artifactId>quarkus-messaging</artifactId>
           77      </dependency>
           78      <dependency>
           79        <groupId>io.quarkus</groupId>
           80        <artifactId>quarkus-container-image-docker</artifactId>
           81      </dependency>
           82      <dependency>
           83        <groupId>io.quarkus</groupId>
           84        <artifactId>quarkus-minikube</artifactId>
           85      </dependency>
           86    </dependencies>
           87     <build>
           88          <plugins>
           89              <plugin>
           90                  <groupId>${quarkus.platform.group-id}</groupId>
           91                  <artifactId>quarkus-maven-plugin</artifactId>
           92                  <version>${quarkus.platform.version}</version>
           93                  <extensions>true</extensions>
           94                  <executions>
           95                      <execution>
           96                          <goals>
           97                              <goal>build</goal>
           98                              <goal>generate-code</goal>
           99                              <goal>generate-code-tests</goal>
          100                              <goal>native-image-agent</goal>
          101                          </goals>
          102                      </execution>
          103                  </executions>
          104              </plugin>
          105              <plugin>
        lineNumber: 4
        variables:
          data: project
          innerText: "\n  4.0.0\n  com.redhat.coolstore\n  coolstore\n  1.0.0-SNAPSHOT\n  coolstore-quarkus\n  \n    3.13.0\n    21\n    UTF-8\n    UTF-8\n    quarkus-bom\n    io.quarkus.platform\n    3.12.3\n    true\n    3.2.5\n  \n  \n    \n      \n        io.quarkus.platform\n        quarkus-bom\n        ${quarkus.platform.version}\n        pom\n        import\n      \n    \n  \n  \n    \n      io.quarkus\n      quarkus-arc\n    \n    \n      io.quarkus\n      quarkus-resteasy\n    \n    \n      io.quarkus\n      quarkus-resteasy-jackson\n    \n    \n      io.quarkus\n      quarkus-resteasy-client\n    \n    \n      io.quarkus\n      quarkus-resteasy-client-jackson\n    \n    \n      io.quarkus\n      quarkus-hibernate-orm\n    \n    \n      io.quarkus\n      quarkus-jdbc-postgresql\n    \n    \n      io.quarkus\n      quarkus-flyway\n    \n    \n      org.flywaydb\n      flyway-database-postgresql\n      10.12.0\n      runtime\n    \n    \n      io.quarkus\n      quarkus-undertow\n    \n    \n      io.quarkus\n      quarkus-messaging\n    \n    \n      io.quarkus\n      quarkus-container-image-docker\n    \n    \n      io.quarkus\n      quarkus-minikube\n    \n  \n   \n        \n            \n                ${quarkus.platform.group-id}\n                quarkus-maven-plugin\n                ${quarkus.platform.version}\n                true\n                \n                    \n                        \n                            build\n                            generate-code\n                            generate-code-tests\n                            native-image-agent\n                        \n                    \n                \n            \n            \n                maven-compiler-plugin\n                ${compiler-plugin.version}\n                \n                    \n                        -parameters\n                    \n                \n            \n            \n                maven-surefire-plugin\n                ${surefire-plugin.version}\n                \n                    \n                        org.jboss.logmanager.LogManager\n                        ${maven.home}\n                    \n                \n            \n            \n                maven-failsafe-plugin\n                ${surefire-plugin.version}\n                \n                    \n                        \n                            integration-test\n                            verify\n                        \n                    \n                \n                \n                    \n                        ${project.build.directory}/${project.build.finalName}-runner\n                        org.jboss.logmanager.LogManager\n                        ${maven.home}\n                    \n                \n            \n        \n    \n\n    \n        \n            native\n            \n                \n                    native\n                \n            \n            \n                false\n                true\n            \n        \n    \n"
          matchingXML: <modelVersion>4.0.0</modelVersion><groupId>com.redhat.coolstore</groupId><artifactId>coolstore</artifactId><version>1.0.0-SNAPSHOT</version><name>coolstore-quarkus</name><properties><compiler-plugin.version>3.13.0</compiler-plugin.version><maven.compiler.release>21</maven.compiler.release><project.build.sourceEncoding>UTF-8</project.build.sourceEncoding><project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding><quarkus.platform.artifact-id>quarkus-bom</quarkus.platform.artifact-id><quarkus.platform.group-id>io.quarkus.platform</quarkus.platform.group-id><quarkus.platform.version>3.12.3</quarkus.platform.version><skipITs>true</skipITs><surefire-plugin.version>3.2.5</surefire-plugin.version></properties><dependencyManagement><dependencies><dependency><groupId>io.quarkus.platform</groupId><artifactId>quarkus-bom</artifactId><version>${quarkus.platform.version}</version><type>pom</type><scope>import</scope></dependency></dependencies></dependencyManagement><dependencies><dependency><groupId>io.quarkus</groupId><artifactId>quarkus-arc</artifactId></dependency><dependency><groupId>io.quarkus</groupId><artifactId>quarkus-resteasy</artifactId></dependency><dependency><groupId>io.quarkus</groupId><artifactId>quarkus-resteasy-jackson</artifactId></dependency><dependency><groupId>io.quarkus</groupId><artifactId>quarkus-resteasy-client</artifactId></dependency><dependency><groupId>io.quarkus</groupId><artifactId>quarkus-resteasy-client-jackson</artifactId></dependency><dependency><groupId>io.quarkus</groupId><artifactId>quarkus-hibernate-orm</artifactId></dependency><dependency><groupId>io.quarkus</groupId><artifactId>quarkus-jdbc-postgresql</artifactId></dependency><dependency><groupId>io.quarkus</groupId><artifactId>quarkus-flyway</artifactId></dependency><dependency><groupId>org.flywaydb</groupId><artifactId>flyway-database-postgresql</artifactId><version>10.12.0</version><scope>runtime</scope></dependency><dependency><groupId>io.quarkus</groupId><artifactId>quarkus-undertow</artifactId></dependency><dependency><groupId>io.quarkus</groupId><artifactId>quarkus-messaging</artifactId></dependency><dependency><groupId>io.quarkus</groupId><artifactId>quarkus-container-image-docker</artifactId></dependency><dependency><groupId>io.quarkus</groupId><artifactId>quarkus-minikube</artifactId></dependency></dependencies><build><plugins><plugin><groupId>${quarkus.platform.group-id}</groupId><artifactId>quarkus-maven-plugin</artifactId><version>${quarkus.platform.version}</version><extensions>true</extensions><executions><execution><goals><goal>build</goal><goal>generate-code</goal><goal>generate-code-tests</goal><goal>native-image-agent</goal></goals></execution></executions></plugin><plugin><artifactId>maven-compiler-plugin</artifactId><version>${compiler-plugin.version}</version><configuration><compilerArgs><arg>-parameters</arg></compilerArgs></configuration></plugin><plugin><artifactId>maven-surefire-plugin</artifactId><version>${surefire-plugin.version}</version><configuration><systemPropertyVariables><java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager><maven.home>${maven.home}</maven.home></systemPropertyVariables></configuration></plugin><plugin><artifactId>maven-failsafe-plugin</artifactId><version>${surefire-plugin.version}</version><executions><execution><goals><goal>integration-test</goal><goal>verify</goal></goals></execution></executions><configuration><systemPropertyVariables><native.image.path>${project.build.directory}/${project.build.finalName}-runner</native.image.path><java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager><maven.home>${maven.home}</maven.home></systemPropertyVariables></configuration></plugin></plugins></build><profiles><profile><id>native</id><activation><property><name>native</name></property></activation><properties><skipITs>false</skipITs><quarkus.native.enabled>true</quarkus.native.enabled></properties></profile></profiles>
    links:
      - url: https://quarkus.io/guides/maven-tooling#build-tool-maven;
        title: Quarkus - Guide;
    effort: 1
tags: null
name: rhr/springboot
description: Verify the version of the Spring Boot framework is compatible with those supported by Red Hat Runtimes
violations: []
tags: null
name: technology-usage
description: This ruleset provides analysis of logging libraries.
tags:
  - Application Properties File
  - Application properties file detected
  - Bean=EJB XML
  - CDI
  - Configuration Management=Application Properties File
  - Connect=EJB XML
  - Connect=RMI
  - Embedded=Application Properties File
  - Embedded=Properties
  - Execute=CDI
  - Inversion of Control=CDI
  - Java EE=CDI
  - Java EE=EJB XML
  - Java EE=JPA named queries
  - Java EE=RMI
  - Other=Properties
  - Other=RMI
  - Persistence=JPA named queries
  - Store=JPA named queries
  - Sustain=Application Properties File
  - Sustain=Properties
insights:
  configuration-management-0200:
    description: Application properties file detected
    labels:
      - discovery
      - konveyor.io/include=always
      - tag=Application Properties File
      - tag=Application properties file detected
    incidents:
      - uri: file:///opt/input/source/src/main/resources/application.properties
        message: ""
  configuration-management-technology-usage-0200:
    description: ""
    labels:
      - discovery
      - konveyor.io/include=always
      - tag=Configuration Management=Application Properties File
      - tag=Embedded=Application Properties File
      - tag=Sustain=Application Properties File
    incidents:
      - uri: ""
        message: ""
        variables:
          tags:
            - Application Properties File
  javaee-technology-usage-00020-jakarta:
    description: ""
    labels:
      - discovery
      - konveyor.io/include=always
      - tag=CDI
    incidents:
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/CartEndpoint.java
        message: ""
        codeSnip: " 1  package com.redhat.coolstore.rest;\n 2  \n 3  import java.io.Serializable;\n 4  import java.util.ArrayList;\n 5  import java.util.HashMap;\n 6  import java.util.List;\n 7  import java.util.Map;\n 8  \n 9  import jakarta.enterprise.context.SessionScoped;\n10  import jakarta.inject.Inject;\n11  import jakarta.ws.rs.DELETE;\n12  import jakarta.ws.rs.GET;\n13  import jakarta.ws.rs.POST;\n14  import jakarta.ws.rs.Path;\n15  import jakarta.ws.rs.PathParam;\n16  import jakarta.ws.rs.Produces;\n17  import jakarta.ws.rs.core.MediaType;\n18  \n19  import com.redhat.coolstore.model.Product;\n20  import com.redhat.coolstore.model.ShoppingCart;"
        lineNumber: 10
        variables:
          file: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/CartEndpoint.java
          kind: Module
          name: jakarta.inject.Inject
          package: com.redhat.coolstore.rest
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/OrderEndpoint.java
        message: ""
        codeSnip: " 1  package com.redhat.coolstore.rest;\n 2  \n 3  import java.io.Serializable;\n 4  import java.util.List;\n 5  \n 6  import jakarta.enterprise.context.RequestScoped;\n 7  import jakarta.inject.Inject;\n 8  import jakarta.ws.rs.Consumes;\n 9  import jakarta.ws.rs.GET;\n10  import jakarta.ws.rs.Path;\n11  import jakarta.ws.rs.PathParam;\n12  import jakarta.ws.rs.Produces;\n13  import jakarta.ws.rs.core.MediaType;\n14  \n15  import com.redhat.coolstore.model.Order;\n16  import com.redhat.coolstore.service.OrderService;\n17  "
        lineNumber: 7
        variables:
          file: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/OrderEndpoint.java
          kind: Module
          name: jakarta.inject.Inject
          package: com.redhat.coolstore.rest
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/ProductEndpoint.java
        message: ""
        codeSnip: " 1  package com.redhat.coolstore.rest;\n 2  \n 3  import java.io.Serializable;\n 4  import java.util.List;\n 5  \n 6  import jakarta.enterprise.context.RequestScoped;\n 7  import jakarta.inject.Inject;\n 8  import jakarta.ws.rs.*;\n 9  import jakarta.ws.rs.core.MediaType;\n10  \n11  import com.redhat.coolstore.model.Product;\n12  import com.redhat.coolstore.service.ProductService;\n13  \n14  @RequestScoped\n15  @Path(\"/products\")\n16  @Consumes(MediaType.APPLICATION_JSON)\n17  @Produces(MediaType.APPLICATION_JSON)"
        lineNumber: 7
        variables:
          file: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/ProductEndpoint.java
          kind: Module
          name: jakarta.inject.Inject
          package: com.redhat.coolstore.rest
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/service/CatalogService.java
        message: ""
        codeSnip: " 1  package com.redhat.coolstore.service;\n 2  \n 3  import java.util.List;\n 4  import java.util.logging.Logger;\n 5  \n 6  import jakarta.enterprise.context.ApplicationScoped;\n 7  import jakarta.inject.Inject;\n 8  \n 9  import jakarta.persistence.criteria.CriteriaBuilder;\n10  import jakarta.persistence.criteria.CriteriaQuery;\n11  import jakarta.persistence.criteria.Root;\n12  \n13  import jakarta.persistence.EntityManager;\n14  \n15  import com.redhat.coolstore.model.*;\n16  \n17  @ApplicationScoped"
        lineNumber: 7
        variables:
          file: file:///opt/input/source/src/main/java/com/redhat/coolstore/service/CatalogService.java
          kind: Module
          name: jakarta.inject.Inject
          package: com.redhat.coolstore.service
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/service/InventoryNotificationMDB.java
        message: ""
        codeSnip: " 1  package com.redhat.coolstore.service;\n 2  \n 3  import com.redhat.coolstore.model.Order;\n 4  import com.redhat.coolstore.utils.Transformers;\n 5  \n 6  import io.smallrye.common.annotation.Blocking;\n 7  import jakarta.inject.Inject;\n 8  import jakarta.transaction.Transactional;\n 9  \n10  import org.eclipse.microprofile.reactive.messaging.Incoming;\n11  \n12  public class InventoryNotificationMDB {\n13  \n14      private static final int LOW_THRESHOLD = 50;\n15  \n16      @Inject\n17      private CatalogService catalogService;"
        lineNumber: 7
        variables:
          file: file:///opt/input/source/src/main/java/com/redhat/coolstore/service/InventoryNotificationMDB.java
          kind: Module
          name: jakarta.inject.Inject
          package: com.redhat.coolstore.service
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/service/OrderService.java
        message: ""
        codeSnip: " 1  package com.redhat.coolstore.service;\n 2  \n 3  import com.redhat.coolstore.model.Order;\n 4  import java.util.List;\n 5  \n 6  import jakarta.enterprise.context.ApplicationScoped;\n 7  import jakarta.inject.Inject;\n 8  import jakarta.persistence.EntityManager;\n 9  import jakarta.persistence.criteria.CriteriaBuilder;\n10  import jakarta.persistence.criteria.CriteriaQuery;\n11  import jakarta.persistence.criteria.Root;\n12  \n13  @ApplicationScoped\n14  public class OrderService {\n15  \n16    @Inject\n17    private EntityManager em;"
        lineNumber: 7
        variables:
          file: file:///opt/input/source/src/main/java/com/redhat/coolstore/service/OrderService.java
          kind: Module
          name: jakarta.inject.Inject
          package: com.redhat.coolstore.service
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/service/OrderServiceMDB.java
        message: ""
        codeSnip: " 1  package com.redhat.coolstore.service;\n 2  \n 3  import jakarta.enterprise.context.ApplicationScoped;\n 4  import jakarta.inject.Inject;\n 5  import jakarta.transaction.Transactional;\n 6  \n 7  import org.eclipse.microprofile.reactive.messaging.Incoming;\n 8  \n 9  import com.redhat.coolstore.model.Order;\n10  import com.redhat.coolstore.utils.Transformers;\n11  \n12  import io.smallrye.common.annotation.Blocking;\n13  \n14  @ApplicationScoped"
        lineNumber: 4
        variables:
          file: file:///opt/input/source/src/main/java/com/redhat/coolstore/service/OrderServiceMDB.java
          kind: Module
          name: jakarta.inject.Inject
          package: com.redhat.coolstore.service
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/service/ProductService.java
        message: ""
        codeSnip: " 1  package com.redhat.coolstore.service;\n 2  \n 3  import com.redhat.coolstore.model.CatalogItemEntity;\n 4  import com.redhat.coolstore.model.Product;\n 5  import com.redhat.coolstore.utils.Transformers;\n 6  \n 7  import jakarta.enterprise.context.RequestScoped;\n 8  import jakarta.inject.Inject;\n 9  import java.util.List;\n10  import java.util.stream.Collectors;\n11  \n12  import static com.redhat.coolstore.utils.Transformers.toProduct;\n13  \n14  @RequestScoped\n15  public class ProductService {\n16  \n17      @Inject\n18      CatalogService cm;"
        lineNumber: 8
        variables:
          file: file:///opt/input/source/src/main/java/com/redhat/coolstore/service/ProductService.java
          kind: Module
          name: jakarta.inject.Inject
          package: com.redhat.coolstore.service
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/service/ShoppingCartOrderProcessor.java
        message: ""
        codeSnip: " 1  package com.redhat.coolstore.service;\n 2  \n 3  import java.util.logging.Logger;\n 4  import jakarta.enterprise.context.RequestScoped;\n 5  import jakarta.inject.Inject;\n 6  \n 7  import org.eclipse.microprofile.reactive.messaging.Channel;\n 8  import org.eclipse.microprofile.reactive.messaging.Emitter;\n 9  \n10  import com.redhat.coolstore.model.ShoppingCart;\n11  import com.redhat.coolstore.utils.Transformers;\n12  \n13  import io.smallrye.reactive.messaging.annotations.Broadcast;\n14  \n15  @RequestScoped"
        lineNumber: 5
        variables:
          file: file:///opt/input/source/src/main/java/com/redhat/coolstore/service/ShoppingCartOrderProcessor.java
          kind: Module
          name: jakarta.inject.Inject
          package: com.redhat.coolstore.service
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/service/ShoppingCartService.java
        message: ""
        codeSnip: " 1  package com.redhat.coolstore.service;\n 2  \n 3  import java.util.logging.Logger;\n 4  \n 5  import jakarta.enterprise.context.SessionScoped;\n 6  import jakarta.inject.Inject;\n 7  \n 8  import org.eclipse.microprofile.rest.client.inject.RestClient;\n 9  \n10  import com.redhat.coolstore.model.Product;\n11  import com.redhat.coolstore.model.ShoppingCart;\n12  import com.redhat.coolstore.model.ShoppingCartItem;\n13  import com.redhat.coolstore.rest.client.ShippingServiceClient;\n14  \n15  @SessionScoped\n16  public class ShoppingCartService  {"
        lineNumber: 6
        variables:
          file: file:///opt/input/source/src/main/java/com/redhat/coolstore/service/ShoppingCartService.java
          kind: Module
          name: jakarta.inject.Inject
          package: com.redhat.coolstore.service
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/utils/DataBaseMigrationStartup.java
        message: ""
        codeSnip: " 1  package com.redhat.coolstore.utils;\n 2  \n 3  import org.flywaydb.core.Flyway;\n 4  import org.flywaydb.core.api.FlywayException;\n 5  \n 6  import io.quarkus.runtime.Startup;\n 7  import jakarta.annotation.PostConstruct;\n 8  import jakarta.inject.Inject;\n 9  import jakarta.inject.Singleton;\n10  \n11  import javax.sql.DataSource;\n12  import java.util.logging.Level;\n13  import java.util.logging.Logger;\n14  \n15  /**\n16   * Created by tqvarnst on 2017-04-04.\n17   */\n18  @Singleton"
        lineNumber: 8
        variables:
          file: file:///opt/input/source/src/main/java/com/redhat/coolstore/utils/DataBaseMigrationStartup.java
          kind: Module
          name: jakarta.inject.Inject
          package: com.redhat.coolstore.utils
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/utils/DataBaseMigrationStartup.java
        message: ""
        codeSnip: " 1  package com.redhat.coolstore.utils;\n 2  \n 3  import org.flywaydb.core.Flyway;\n 4  import org.flywaydb.core.api.FlywayException;\n 5  \n 6  import io.quarkus.runtime.Startup;\n 7  import jakarta.annotation.PostConstruct;\n 8  import jakarta.inject.Inject;\n 9  import jakarta.inject.Singleton;\n10  \n11  import javax.sql.DataSource;\n12  import java.util.logging.Level;\n13  import java.util.logging.Logger;\n14  \n15  /**\n16   * Created by tqvarnst on 2017-04-04.\n17   */\n18  @Singleton\n19  @Startup"
        lineNumber: 9
        variables:
          file: file:///opt/input/source/src/main/java/com/redhat/coolstore/utils/DataBaseMigrationStartup.java
          kind: Module
          name: jakarta.inject.Singleton
          package: com.redhat.coolstore.utils
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/utils/Producers.java
        message: ""
        codeSnip: " 1  package com.redhat.coolstore.utils;\n 2  \n 3  import jakarta.enterprise.inject.Produces;\n 4  import jakarta.enterprise.inject.spi.InjectionPoint;\n 5  import java.util.logging.Logger;\n 6  \n 7  \n 8  public class Producers {\n 9  \n10      Logger log = Logger.getLogger(Producers.class.getName());\n11  \n12      @Produces\n13      public Logger produceLog(InjectionPoint injectionPoint) {"
        lineNumber: 3
        variables:
          file: file:///opt/input/source/src/main/java/com/redhat/coolstore/utils/Producers.java
          kind: Module
          name: jakarta.enterprise.inject.Produces
          package: com.redhat.coolstore.utils
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/utils/Producers.java
        message: ""
        codeSnip: " 1  package com.redhat.coolstore.utils;\n 2  \n 3  import jakarta.enterprise.inject.Produces;\n 4  import jakarta.enterprise.inject.spi.InjectionPoint;\n 5  import java.util.logging.Logger;\n 6  \n 7  \n 8  public class Producers {\n 9  \n10      Logger log = Logger.getLogger(Producers.class.getName());\n11  \n12      @Produces\n13      public Logger produceLog(InjectionPoint injectionPoint) {\n14          return Logger.getLogger(injectionPoint.getMember().getDeclaringClass().getName());"
        lineNumber: 4
        variables:
          file: file:///opt/input/source/src/main/java/com/redhat/coolstore/utils/Producers.java
          kind: Module
          name: jakarta.enterprise.inject.spi.InjectionPoint
          package: com.redhat.coolstore.utils
  javaee-technology-usage-00021:
    description: ""
    labels:
      - discovery
      - konveyor.io/include=always
      - tag=Execute=CDI
      - tag=Inversion of Control=CDI
      - tag=Java EE=CDI
    incidents:
      - uri: ""
        message: ""
        variables:
          tags:
            - CDI
  non-xml-technology-usage-02000:
    description: ""
    labels:
      - discovery
      - konveyor.io/include=always
      - tag=Bean=EJB XML
      - tag=Connect=EJB XML
      - tag=Java EE=EJB XML
    incidents:
      - uri: ""
        message: ""
        variables:
          tags:
            - EJB XML
  non-xml-technology-usage-20000:
    description: ""
    labels:
      - discovery
      - konveyor.io/include=always
      - tag=Embedded=Properties
      - tag=Other=Properties
      - tag=Sustain=Properties
    incidents:
      - uri: ""
        message: ""
        variables:
          tags:
            - Properties
  technology-usage-connect-01000:
    description: ""
    labels:
      - discovery
      - konveyor.io/include=always
      - tag=Connect=RMI
      - tag=Java EE=RMI
      - tag=Other=RMI
    incidents:
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/CartEndpoint.java
        message: ""
        codeSnip: " 89  \t\t\tshoppingCartService.priceShoppingCart(cart);\n 90  \t\t\tcart.setShoppingCartItemList(dedupeCartItems(cart.getShoppingCartItemList()));\n 91  \t\t} catch (Exception ex) {\n 92  \t\t\tthrow ex;\n 93  \t\t}\n 94  \n 95  \t\treturn cart;\n 96  \t}\n 97  \n 98  \t@DELETE\n 99  \t@Path(\"/{cartId}/{itemId}/{quantity}\")\n100  \t@Produces(MediaType.APPLICATION_JSON)\n101  \tpublic ShoppingCart delete(@PathParam(\"cartId\") String cartId,\n102  \t\t\t\t\t\t\t   @PathParam(\"itemId\") String itemId,\n103  \t\t\t\t\t\t\t   @PathParam(\"quantity\") int quantity) throws Exception {\n104  \n105  \t\tList<ShoppingCartItem> toRemoveList = new ArrayList<>();\n106  \n107  \t\tShoppingCart cart = shoppingCartService.getShoppingCart(cartId);\n108  \n109  \t\tcart.getShoppingCartItemList().stream()"
        lineNumber: 99
        variables:
          file: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/CartEndpoint.java
          kind: Method
          name: DELETE
          package: com.redhat.coolstore.rest
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/CartEndpoint.java
        message: ""
        codeSnip: "15  import jakarta.ws.rs.PathParam;\n16  import jakarta.ws.rs.Produces;\n17  import jakarta.ws.rs.core.MediaType;\n18  \n19  import com.redhat.coolstore.model.Product;\n20  import com.redhat.coolstore.model.ShoppingCart;\n21  import com.redhat.coolstore.model.ShoppingCartItem;\n22  import com.redhat.coolstore.service.ShoppingCartService;\n23  \n24  @SessionScoped\n25  @Path(\"/cart\")\n26  public class CartEndpoint implements Serializable {\n27  \n28  \tprivate static final long serialVersionUID = -7227732980791688773L;\n29  \n30  \t@Inject\n31  \tprivate ShoppingCartService shoppingCartService;\n32  \n33  \t@GET\n34  \t@Path(\"/{cartId}\")\n35  \t@Produces(MediaType.APPLICATION_JSON)"
        lineNumber: 25
        variables:
          file: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/CartEndpoint.java
          kind: Class
          name: SessionScoped
          package: com.redhat.coolstore.rest
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/CartEndpoint.java
        message: ""
        codeSnip: "24  @SessionScoped\n25  @Path(\"/cart\")\n26  public class CartEndpoint implements Serializable {\n27  \n28  \tprivate static final long serialVersionUID = -7227732980791688773L;\n29  \n30  \t@Inject\n31  \tprivate ShoppingCartService shoppingCartService;\n32  \n33  \t@GET\n34  \t@Path(\"/{cartId}\")\n35  \t@Produces(MediaType.APPLICATION_JSON)\n36  \tpublic ShoppingCart getCart(@PathParam(\"cartId\") String cartId) {\n37  \t\treturn shoppingCartService.getShoppingCart(cartId);\n38  \t}\n39  \n40  \t@POST\n41  \t@Path(\"/checkout/{cartId}\")\n42  \t@Produces(MediaType.APPLICATION_JSON)\n43  \tpublic ShoppingCart checkout(@PathParam(\"cartId\") String cartId) {\n44  \t\treturn shoppingCartService.checkOutShoppingCart(cartId);"
        lineNumber: 34
        variables:
          file: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/CartEndpoint.java
          kind: Method
          name: GET
          package: com.redhat.coolstore.rest
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/CartEndpoint.java
        message: ""
        codeSnip: "31  \tprivate ShoppingCartService shoppingCartService;\n32  \n33  \t@GET\n34  \t@Path(\"/{cartId}\")\n35  \t@Produces(MediaType.APPLICATION_JSON)\n36  \tpublic ShoppingCart getCart(@PathParam(\"cartId\") String cartId) {\n37  \t\treturn shoppingCartService.getShoppingCart(cartId);\n38  \t}\n39  \n40  \t@POST\n41  \t@Path(\"/checkout/{cartId}\")\n42  \t@Produces(MediaType.APPLICATION_JSON)\n43  \tpublic ShoppingCart checkout(@PathParam(\"cartId\") String cartId) {\n44  \t\treturn shoppingCartService.checkOutShoppingCart(cartId);\n45  \t}\n46  \n47  \t@POST\n48  \t@Path(\"/{cartId}/{itemId}/{quantity}\")\n49  \t@Produces(MediaType.APPLICATION_JSON)\n50  \tpublic ShoppingCart add(@PathParam(\"cartId\") String cartId,\n51  \t\t\t\t\t\t\t@PathParam(\"itemId\") String itemId,"
        lineNumber: 41
        variables:
          file: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/CartEndpoint.java
          kind: Method
          name: POST
          package: com.redhat.coolstore.rest
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/CartEndpoint.java
        message: ""
        codeSnip: "38  \t}\n39  \n40  \t@POST\n41  \t@Path(\"/checkout/{cartId}\")\n42  \t@Produces(MediaType.APPLICATION_JSON)\n43  \tpublic ShoppingCart checkout(@PathParam(\"cartId\") String cartId) {\n44  \t\treturn shoppingCartService.checkOutShoppingCart(cartId);\n45  \t}\n46  \n47  \t@POST\n48  \t@Path(\"/{cartId}/{itemId}/{quantity}\")\n49  \t@Produces(MediaType.APPLICATION_JSON)\n50  \tpublic ShoppingCart add(@PathParam(\"cartId\") String cartId,\n51  \t\t\t\t\t\t\t@PathParam(\"itemId\") String itemId,\n52  \t\t\t\t\t\t\t@PathParam(\"quantity\") int quantity) throws Exception {\n53  \t\tShoppingCart cart = shoppingCartService.getShoppingCart(cartId);\n54  \n55  \t\tProduct product = shoppingCartService.getProduct(itemId);\n56  \n57  \t\tShoppingCartItem sci = new ShoppingCartItem();\n58  \t\tsci.setProduct(product);"
        lineNumber: 48
        variables:
          file: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/CartEndpoint.java
          kind: Method
          name: POST
          package: com.redhat.coolstore.rest
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/CartEndpoint.java
        message: ""
        codeSnip: "65  \t\t\tcart.setShoppingCartItemList(dedupeCartItems(cart.getShoppingCartItemList()));\n66  \t\t} catch (Exception ex) {\n67  \t\t\tcart.removeShoppingCartItem(sci);\n68  \t\t\tthrow ex;\n69  \t\t}\n70  \n71  \t\treturn cart;\n72  \t}\n73  \n74  \t@POST\n75  \t@Path(\"/{cartId}/{tmpId}\")\n76  \t@Produces(MediaType.APPLICATION_JSON)\n77  \tpublic ShoppingCart set(@PathParam(\"cartId\") String cartId,\n78  \t\t\t\t\t\t\t@PathParam(\"tmpId\") String tmpId) throws Exception {\n79  \n80  \t\tShoppingCart cart = shoppingCartService.getShoppingCart(cartId);\n81  \t\tShoppingCart tmpCart = shoppingCartService.getShoppingCart(tmpId);\n82  \n83  \t\tif (tmpCart != null) {\n84  \t\t\tcart.resetShoppingCartItemList();\n85  \t\t\tcart.setShoppingCartItemList(tmpCart.getShoppingCartItemList());"
        lineNumber: 75
        variables:
          file: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/CartEndpoint.java
          kind: Method
          name: POST
          package: com.redhat.coolstore.rest
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/OrderEndpoint.java
        message: ""
        codeSnip: " 9  import jakarta.ws.rs.GET;\n10  import jakarta.ws.rs.Path;\n11  import jakarta.ws.rs.PathParam;\n12  import jakarta.ws.rs.Produces;\n13  import jakarta.ws.rs.core.MediaType;\n14  \n15  import com.redhat.coolstore.model.Order;\n16  import com.redhat.coolstore.service.OrderService;\n17  \n18  @RequestScoped\n19  @Path(\"/orders\")\n20  @Consumes(MediaType.APPLICATION_JSON)\n21  @Produces(MediaType.APPLICATION_JSON)\n22  public class OrderEndpoint implements Serializable {\n23  \n24      private static final long serialVersionUID = -7227732980791688774L;\n25  \n26      @Inject\n27      private OrderService os;\n28  \n29  "
        lineNumber: 19
        variables:
          file: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/OrderEndpoint.java
          kind: Class
          name: RequestScoped
          package: com.redhat.coolstore.rest
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/OrderEndpoint.java
        message: ""
        codeSnip: "21  @Produces(MediaType.APPLICATION_JSON)\n22  public class OrderEndpoint implements Serializable {\n23  \n24      private static final long serialVersionUID = -7227732980791688774L;\n25  \n26      @Inject\n27      private OrderService os;\n28  \n29  \n30      @GET\n31      @Path(\"/\")\n32      public List<Order> listAll() {\n33          return os.getOrders();\n34      }\n35  \n36      @GET\n37      @Path(\"/{orderId}\")\n38      public Order getOrder(@PathParam(\"orderId\") long orderId) {\n39          return os.getOrderById(orderId);\n40      }\n41  "
        lineNumber: 31
        variables:
          file: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/OrderEndpoint.java
          kind: Method
          name: GET
          package: com.redhat.coolstore.rest
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/OrderEndpoint.java
        message: ""
        codeSnip: "27      private OrderService os;\n28  \n29  \n30      @GET\n31      @Path(\"/\")\n32      public List<Order> listAll() {\n33          return os.getOrders();\n34      }\n35  \n36      @GET\n37      @Path(\"/{orderId}\")\n38      public Order getOrder(@PathParam(\"orderId\") long orderId) {\n39          return os.getOrderById(orderId);\n40      }\n41  \n42  }\n"
        lineNumber: 37
        variables:
          file: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/OrderEndpoint.java
          kind: Method
          name: GET
          package: com.redhat.coolstore.rest
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/ProductEndpoint.java
        message: ""
        codeSnip: " 5  \n 6  import jakarta.enterprise.context.RequestScoped;\n 7  import jakarta.inject.Inject;\n 8  import jakarta.ws.rs.*;\n 9  import jakarta.ws.rs.core.MediaType;\n10  \n11  import com.redhat.coolstore.model.Product;\n12  import com.redhat.coolstore.service.ProductService;\n13  \n14  @RequestScoped\n15  @Path(\"/products\")\n16  @Consumes(MediaType.APPLICATION_JSON)\n17  @Produces(MediaType.APPLICATION_JSON)\n18  public class ProductEndpoint implements Serializable {\n19  \n20      /**\n21       *\n22       */\n23      private static final long serialVersionUID = -7227732980791688773L;\n24  \n25      @Inject"
        lineNumber: 15
        variables:
          file: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/ProductEndpoint.java
          kind: Class
          name: RequestScoped
          package: com.redhat.coolstore.rest
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/ProductEndpoint.java
        message: ""
        codeSnip: "20      /**\n21       *\n22       */\n23      private static final long serialVersionUID = -7227732980791688773L;\n24  \n25      @Inject\n26      private ProductService pm;\n27  \n28  \n29      @GET\n30      @Path(\"/\")\n31      public List<Product> listAll() {\n32          return pm.getProducts();\n33      }\n34  \n35      @GET\n36      @Path(\"/{itemId}\")\n37      public Product getProduct(@PathParam(\"itemId\") String itemId) {\n38          return pm.getProductByItemId(itemId);\n39      }\n40  "
        lineNumber: 30
        variables:
          file: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/ProductEndpoint.java
          kind: Method
          name: GET
          package: com.redhat.coolstore.rest
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/ProductEndpoint.java
        message: ""
        codeSnip: "26      private ProductService pm;\n27  \n28  \n29      @GET\n30      @Path(\"/\")\n31      public List<Product> listAll() {\n32          return pm.getProducts();\n33      }\n34  \n35      @GET\n36      @Path(\"/{itemId}\")\n37      public Product getProduct(@PathParam(\"itemId\") String itemId) {\n38          return pm.getProductByItemId(itemId);\n39      }\n40  \n41  }\n"
        lineNumber: 36
        variables:
          file: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/ProductEndpoint.java
          kind: Method
          name: GET
          package: com.redhat.coolstore.rest
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/client/ShippingServiceClient.java
        message: ""
        codeSnip: " 1  package com.redhat.coolstore.rest.client;\n 2  \n 3  import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n 4  \n 5  import com.redhat.coolstore.model.ShoppingCart;\n 6  \n 7  import jakarta.ws.rs.Path;\n 8  import jakarta.ws.rs.POST;\n 9  \n10  @Path(\"/shipping\")\n11  @RegisterRestClient(configKey=\"shipping-service-api\")\n12  public interface ShippingServiceClient {\n13  \n14      @POST\n15      @Path(\"/calculateShipping\")\n16      public double calculateShipping(ShoppingCart sc);\n17  \n18      @POST\n19      @Path(\"/calculateShippingInsurance\")\n20      public double calculateShippingInsurance(ShoppingCart sc);"
        lineNumber: 10
        variables:
          file: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/client/ShippingServiceClient.java
          kind: Interface
          name: Path
          package: com.redhat.coolstore.rest.client
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/client/ShippingServiceClient.java
        message: ""
        codeSnip: " 5  import com.redhat.coolstore.model.ShoppingCart;\n 6  \n 7  import jakarta.ws.rs.Path;\n 8  import jakarta.ws.rs.POST;\n 9  \n10  @Path(\"/shipping\")\n11  @RegisterRestClient(configKey=\"shipping-service-api\")\n12  public interface ShippingServiceClient {\n13  \n14      @POST\n15      @Path(\"/calculateShipping\")\n16      public double calculateShipping(ShoppingCart sc);\n17  \n18      @POST\n19      @Path(\"/calculateShippingInsurance\")\n20      public double calculateShippingInsurance(ShoppingCart sc);\n21  \n22  }\n"
        lineNumber: 15
        variables:
          file: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/client/ShippingServiceClient.java
          kind: Method
          name: POST
          package: com.redhat.coolstore.rest.client
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/client/ShippingServiceClient.java
        message: ""
        codeSnip: " 9  \n10  @Path(\"/shipping\")\n11  @RegisterRestClient(configKey=\"shipping-service-api\")\n12  public interface ShippingServiceClient {\n13  \n14      @POST\n15      @Path(\"/calculateShipping\")\n16      public double calculateShipping(ShoppingCart sc);\n17  \n18      @POST\n19      @Path(\"/calculateShippingInsurance\")\n20      public double calculateShippingInsurance(ShoppingCart sc);\n21  \n22  }\n"
        lineNumber: 19
        variables:
          file: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/client/ShippingServiceClient.java
          kind: Method
          name: POST
          package: com.redhat.coolstore.rest.client
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/service/ShippingService.java
        message: ""
        codeSnip: " 1  package com.redhat.coolstore.service;\n 2  \n 3  import java.math.BigDecimal;\n 4  import java.math.RoundingMode;\n 5  \n 6  import com.redhat.coolstore.model.ShoppingCart;\n 7  \n 8  import jakarta.ws.rs.POST;\n 9  import jakarta.ws.rs.Path;\n10  \n11  @Path(\"/shipping\")\n12  public class ShippingService {\n13  \n14      @POST\n15      @Path(\"/calculateShipping\")\n16      public double calculateShipping(ShoppingCart sc) {\n17  \n18          if (sc != null) {\n19  \n20              if (sc.getCartItemTotal() >= 0 && sc.getCartItemTotal() < 25) {\n21  "
        lineNumber: 11
        variables:
          file: file:///opt/input/source/src/main/java/com/redhat/coolstore/service/ShippingService.java
          kind: Class
          name: Path
          package: com.redhat.coolstore.service
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/service/ShippingService.java
        message: ""
        codeSnip: " 5  \n 6  import com.redhat.coolstore.model.ShoppingCart;\n 7  \n 8  import jakarta.ws.rs.POST;\n 9  import jakarta.ws.rs.Path;\n10  \n11  @Path(\"/shipping\")\n12  public class ShippingService {\n13  \n14      @POST\n15      @Path(\"/calculateShipping\")\n16      public double calculateShipping(ShoppingCart sc) {\n17  \n18          if (sc != null) {\n19  \n20              if (sc.getCartItemTotal() >= 0 && sc.getCartItemTotal() < 25) {\n21  \n22                  return 2.99;\n23  \n24              } else if (sc.getCartItemTotal() >= 25 && sc.getCartItemTotal() < 50) {\n25  "
        lineNumber: 15
        variables:
          file: file:///opt/input/source/src/main/java/com/redhat/coolstore/service/ShippingService.java
          kind: Method
          name: POST
          package: com.redhat.coolstore.service
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/service/ShippingService.java
        message: ""
        codeSnip: "39  \n40              }\n41  \n42          }\n43  \n44          return 0;\n45  \n46      }\n47  \n48      @POST\n49      @Path(\"/calculateShippingInsurance\")\n50      public double calculateShippingInsurance(ShoppingCart sc) {\n51  \n52          if (sc != null) {\n53  \n54              if (sc.getCartItemTotal() >= 25 && sc.getCartItemTotal() < 100) {\n55  \n56                  return getPercentOfTotal(sc.getCartItemTotal(), 0.02);\n57  \n58              } else if (sc.getCartItemTotal() >= 100 && sc.getCartItemTotal() < 500) {\n59  "
        lineNumber: 49
        variables:
          file: file:///opt/input/source/src/main/java/com/redhat/coolstore/service/ShippingService.java
          kind: Method
          name: POST
          package: com.redhat.coolstore.service
  technology-usage-database-01200:
    description: ""
    labels:
      - discovery
      - konveyor.io/include=always
      - tag=Java EE=JPA named queries
      - tag=Persistence=JPA named queries
      - tag=Store=JPA named queries
    incidents:
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/model/CatalogItemEntity.java
        message: ""
        codeSnip: " 1  package com.redhat.coolstore.model;\n 2  \n 3  import jakarta.persistence.*;\n 4  import java.io.Serializable;\n 5  \n 6  @Entity\n 7  @Table(name = \"PRODUCT_CATALOG\", uniqueConstraints = @UniqueConstraint(columnNames = \"itemId\"))\n 8  public class CatalogItemEntity implements Serializable {\n 9  \n10  \tprivate static final long serialVersionUID = -7304814269819778382L;\n11  \t\n12  \t@Id\n13  \tprivate String itemId;\n14  \n15      @Column(length = 80)\n16      private String name;"
        lineNumber: 6
        variables:
          file: file:///opt/input/source/src/main/java/com/redhat/coolstore/model/CatalogItemEntity.java
          kind: Class
          name: Entity
          package: com.redhat.coolstore.model
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/model/CatalogItemEntity.java
        message: ""
        codeSnip: " 1  package com.redhat.coolstore.model;\n 2  \n 3  import jakarta.persistence.*;\n 4  import java.io.Serializable;\n 5  \n 6  @Entity\n 7  @Table(name = \"PRODUCT_CATALOG\", uniqueConstraints = @UniqueConstraint(columnNames = \"itemId\"))\n 8  public class CatalogItemEntity implements Serializable {\n 9  \n10  \tprivate static final long serialVersionUID = -7304814269819778382L;\n11  \t\n12  \t@Id\n13  \tprivate String itemId;\n14  \n15      @Column(length = 80)\n16      private String name;\n17  "
        lineNumber: 7
        variables:
          file: file:///opt/input/source/src/main/java/com/redhat/coolstore/model/CatalogItemEntity.java
          kind: Class
          name: Entity
          package: com.redhat.coolstore.model
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/model/InventoryEntity.java
        message: ""
        codeSnip: " 2  \n 3  import java.io.Serializable;\n 4  \n 5  import jakarta.persistence.Column;\n 6  import jakarta.persistence.Entity;\n 7  import jakarta.persistence.Id;\n 8  import jakarta.persistence.Table;\n 9  import jakarta.persistence.UniqueConstraint;\n10  import jakarta.xml.bind.annotation.XmlRootElement;\n11  \n12  @Entity\n13  @XmlRootElement\n14  @Table(name = \"INVENTORY\", uniqueConstraints = @UniqueConstraint(columnNames = \"itemId\"))\n15  public class InventoryEntity implements Serializable {\n16  \n17  \tprivate static final long serialVersionUID = 7526472295622776147L; \n18  \n19      @Id\n20      private String itemId;\n21  \n22  "
        lineNumber: 12
        variables:
          file: file:///opt/input/source/src/main/java/com/redhat/coolstore/model/InventoryEntity.java
          kind: Class
          name: Entity
          package: com.redhat.coolstore.model
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/model/InventoryEntity.java
        message: ""
        codeSnip: " 4  \n 5  import jakarta.persistence.Column;\n 6  import jakarta.persistence.Entity;\n 7  import jakarta.persistence.Id;\n 8  import jakarta.persistence.Table;\n 9  import jakarta.persistence.UniqueConstraint;\n10  import jakarta.xml.bind.annotation.XmlRootElement;\n11  \n12  @Entity\n13  @XmlRootElement\n14  @Table(name = \"INVENTORY\", uniqueConstraints = @UniqueConstraint(columnNames = \"itemId\"))\n15  public class InventoryEntity implements Serializable {\n16  \n17  \tprivate static final long serialVersionUID = 7526472295622776147L; \n18  \n19      @Id\n20      private String itemId;\n21  \n22  \n23      @Column\n24      private String location;"
        lineNumber: 14
        variables:
          file: file:///opt/input/source/src/main/java/com/redhat/coolstore/model/InventoryEntity.java
          kind: Class
          name: Entity
          package: com.redhat.coolstore.model
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/model/Order.java
        message: ""
        codeSnip: " 7  import jakarta.persistence.CascadeType;\n 8  import jakarta.persistence.Column;\n 9  import jakarta.persistence.Entity;\n10  import jakarta.persistence.FetchType;\n11  import jakarta.persistence.GeneratedValue;\n12  import jakarta.persistence.Id;\n13  import jakarta.persistence.JoinColumn;\n14  import jakarta.persistence.OneToMany;\n15  import jakarta.persistence.Table;\n16  \n17  @Entity\n18  @Table(name = \"ORDERS\")\n19  public class Order implements Serializable {\n20  \n21  \tprivate static final long serialVersionUID = -1L;\n22  \n23  \t@Id\n24  \t@GeneratedValue\n25  \tprivate long orderId;\n26  \n27  \tprivate String customerName;"
        lineNumber: 17
        variables:
          file: file:///opt/input/source/src/main/java/com/redhat/coolstore/model/Order.java
          kind: Class
          name: Entity
          package: com.redhat.coolstore.model
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/model/Order.java
        message: ""
        codeSnip: " 8  import jakarta.persistence.Column;\n 9  import jakarta.persistence.Entity;\n10  import jakarta.persistence.FetchType;\n11  import jakarta.persistence.GeneratedValue;\n12  import jakarta.persistence.Id;\n13  import jakarta.persistence.JoinColumn;\n14  import jakarta.persistence.OneToMany;\n15  import jakarta.persistence.Table;\n16  \n17  @Entity\n18  @Table(name = \"ORDERS\")\n19  public class Order implements Serializable {\n20  \n21  \tprivate static final long serialVersionUID = -1L;\n22  \n23  \t@Id\n24  \t@GeneratedValue\n25  \tprivate long orderId;\n26  \n27  \tprivate String customerName;\n28  "
        lineNumber: 18
        variables:
          file: file:///opt/input/source/src/main/java/com/redhat/coolstore/model/Order.java
          kind: Class
          name: Entity
          package: com.redhat.coolstore.model
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/model/OrderItem.java
        message: ""
        codeSnip: " 1  package com.redhat.coolstore.model;\n 2  \n 3  import java.io.Serializable;\n 4  \n 5  import jakarta.persistence.Column;\n 6  import jakarta.persistence.Entity;\n 7  import jakarta.persistence.GeneratedValue;\n 8  import jakarta.persistence.Id;\n 9  import jakarta.persistence.Table;\n10  \n11  @Entity\n12  @Table(name = \"ORDER_ITEMS\")\n13  public class OrderItem implements Serializable {\n14  \tprivate static final long serialVersionUID = 64565445665456666L;\n15  \n16  \t@Id\n17  \t@Column(name=\"ID\")\n18  \t@GeneratedValue\n19  \tprivate long id;\n20  \n21  \tprivate int quantity;"
        lineNumber: 11
        variables:
          file: file:///opt/input/source/src/main/java/com/redhat/coolstore/model/OrderItem.java
          kind: Class
          name: Entity
          package: com.redhat.coolstore.model
      - uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/model/OrderItem.java
        message: ""
        codeSnip: " 2  \n 3  import java.io.Serializable;\n 4  \n 5  import jakarta.persistence.Column;\n 6  import jakarta.persistence.Entity;\n 7  import jakarta.persistence.GeneratedValue;\n 8  import jakarta.persistence.Id;\n 9  import jakarta.persistence.Table;\n10  \n11  @Entity\n12  @Table(name = \"ORDER_ITEMS\")\n13  public class OrderItem implements Serializable {\n14  \tprivate static final long serialVersionUID = 64565445665456666L;\n15  \n16  \t@Id\n17  \t@Column(name=\"ID\")\n18  \t@GeneratedValue\n19  \tprivate long id;\n20  \n21  \tprivate int quantity;\n22  "
        lineNumber: 12
        variables:
          file: file:///opt/input/source/src/main/java/com/redhat/coolstore/model/OrderItem.java
          kind: Class
          name: Entity
          package: com.redhat.coolstore.model
violations: []
